/*
=============================================================
WebIntelligence(r) Report Panel
Copyright(c) 2001-2005 Business Objects S.A.
All rights reserved

Use and support of this software is governed by the terms
and conditions of the software license agreement and support
policy of Business Objects S.A. and/or its subsidiaries. 
The Business Objects products and technology are protected
by the US patent number 5,555,403 and 6,247,008

=============================================================
*/setTopFrameset();
_isFirstReportLoad = true
isPDF = false
_displayedModeIsPDF= isPDF;
isInteractive = false
isStructure = false
isDataManager = false
selectedIdRef=new Hash
idRefTable=new Hash
_bDrillMode = false;
_findAvailable = _ie||window.find;
_panesInitalized = false;
_drillBarSetFocus= false
_curExpandColInfo = null;
isPageLoaded=false;
isWOMLoaded=false
_curIdRef=null;
_curIdRefBid=null;
_curUIRef=null
_curDataPath=null;
_dpi=96;
_curIPageMax=null;
waitDlg=null
waitTimeoutID=null
_cancelRefreshOptions = null;
_bTdcActivate=false;
_bTDCAutoUpdateDataOnRefresh=false;
_refTDCDate=''; 
_refTDCDateInMs=0;
_foldPanelVisible=0;
_supportInputForms=true;
_inputFormBlocks=null;
_isBlockAsIFormClickAction=false;
_isInputFormAction=false;
_disabledInputFormBlocks=new Array();
_currContextMenu=null
_unitLabel = WS._unitIsInch ? 'inches':'cm'
_sTargetParameterSet = false; 
_paneState={
min:0,
normal:1,
off:2
}
var _reportTabIconType={
    normal:0,
    drill:1,
    tdc:2,
    drill_tdc:3   
};
var _reportTabIconArr=[    
    toolboxImg(139),
    toolboxImg(140),
    toolboxImg(116),
    toolboxImg(141)        
];
hideIVLoadingStatus();
workbenchW = new_WorkbenchWidget({
leftGrabCB:workbenchGrabCB,
clickCB: viewActionCB,
leftPaneW:WS._leftPaneWidth,
keybCB:viewKeyPressCB,
beforeAddWidgetInActionCB:workbenchBeforeAddWidget,
afterAddWidgetInActionCB:workbenchAfterAddWidget
});
fillAllActions(workbenchW)
welcomePers = workbenchW.addPerspective({
name:"Welcome Screen",
value:"welcome",
initTabBarCB:viewingFillTabMenu,  
paneChangeCB:viewPaneCB,
leftPaneVisible:false,
tabCB:viewTabCB,
toolboxBarVisible:false,
leftPaneVisible: false,
naviBarVisible: false,
statusBarVisible:false,
contentFrameId:"Report", 
mainPalVisible:false,
menuBarVisible:false
});
function fillWelcomePerspectiveUI()
{
if (window.fillWelcomePerspectiveUIDone != true)
{
window.fillWelcomePerspectiveUIDone = true
welcomeFillPalette(welcomePers.getMenuPalette())
var arr=[
{actionId:"newDocument", right:isEnableUserRight(WS._usrCreateDoc), disabledIfNoRight:true, hideIfNoRight:false}
];
updateActionsWithUserRight(arr);
}
}
viewPersDef = {
name:"Viewing Mode",
value:"viewingPers",
initTabBarCB:viewingFillTabMenu,  
paneChangeCB:viewPaneCB, 
showLeftPaneCB:viewShowLeftPaneCB,
tabCB:viewTabCB,
leftPaneW:WS._leftPaneWidth,
leftPaneVisible: (WS.bFullScreen ? false : (WS._showLeftPane==_paneState.normal)),
leftGrabVisible: (WS.bFullScreen ? false : (WS._showLeftPane==_paneState.normal)),
leftPaneAndBarVisible: (WS.bFullScreen ? false : (WS._showLeftPane!=_paneState.off)),
naviBarVisible: true,
toolboxBarVisible:false,
statusBarVisible:(WS.bFullScreen ? true : (WS._showStatus==1)),
statusBarId:"status",
contentFrameId:"Report",
leftPaneId:"leftPaneW",
mainPalVisible:false,
floatPaletteVisible:true,
floatPaletteId:"floatPal",
menuBarVisible:(WS.bFullScreen ? false : true),
showHideFindBarCB:showHideFindBarCB,
getReportFrameCB:getReportFrame
};
apply_customization(viewPersDef, "viewperspective");
viewPers = workbenchW.addPerspective(viewPersDef);
function commonFillPerspectives()
{
if (window.commonFillPerspectivesDone != true)
{
window.commonFillPerspectivesDone = true
viewFillStatusBar(viewPers.getStatusBar())
viewFillLeftPane(viewPers.getLeftPane())
viewPers.getLeftPane().freezeNavigate()
viewPers.getFloatPalette().fill(
[
{type:"lines", children:
[
{type:"placeHolder", width:24, height:24},
{actionId:"smartTop", allowDblClick:true},
{type:"br"},
{actionId:"smartLeft", allowDblClick:true},
{type:"placeHolder", width:24, height:24},
{actionId:"smartRight", allowDblClick:true},
{type:"br"},
{type:"placeHolder", width:24, height:24},
{actionId:"smartBottom", allowDblClick:true}
]
}
]
)
workbenchW.getAction("showStatusBar").check(viewPers.isStatusBarVisible());
workbenchW.getAction("showReportTabs").check(viewPers.isNaviBarVisible());
window.drillFilterMenu = viewPers.addMenu({value:"drillFilterMenu", beforeShowCB:initdrillFilterMenu});
window.drillFilterDimMenu = viewPers.addMenu({value:"drillFilterDimMenu", beforeShowCB:initdrillFilterDimMenu});
viewPers.getStatusBar().setRoleAndLabelledBy("region", "Status Bar")
workbenchW.getAction("pageNavGroup").setRoleAndLabelledBy("navigation", "Page")
}
}
function fillViewPerspectiveUI()
{
if (window.fillViewPerspectiveUIDone != true)
{
window.fillViewPerspectiveUIDone = true
commonFillPerspectives()
viewFillPalette(viewPers.getMenuPalette());
var viewContextMenu = viewPers.getToolbarMenu();
viewPerspectivePaletteMenu(viewContextMenu);
viewPers.setContextMenu(viewContextMenu);
}
updateActionsUponWSUserRight();
updateActionsUponDSUserRight();
}
pdfPers = workbenchW.addPerspective({
name:"PDF Mode",
value:"pdfPers",
initTabBarCB:viewingFillTabMenu,  
paneChangeCB:viewPaneCB, 
showLeftPaneCB:viewShowLeftPaneCB,
tabCB:viewTabCB,
leftPaneVisible: (WS.bFullScreen ? false : (WS._showLeftPane==_paneState.normal)),
leftGrabVisible: (WS.bFullScreen ? false : (WS._showLeftPane==_paneState.normal)),
leftPaneAndBarVisible: (WS.bFullScreen ? false : (WS._showLeftPane!=_paneState.off)),
naviBarVisible: true,
statusBarVisible:(WS._showStatus==1),
statusBarId:"status", 
contentFrameId:"Report",
leftPaneId:"leftPaneW",
mainPalVisible:false,
menuBarVisible:false
});
function fillPDFPerspectiveUI()
{
if (window.fillPdfPerspectiveUIDone != true)
{
window.fillPdfPerspectiveUIDone = true
commonFillPerspectives()
pdfFillPalette(pdfPers.getMenuPalette());
var pdfContextMenu = pdfPers.getToolbarMenu();
viewPDFPaletteMenu(pdfContextMenu);
pdfPers.setContextMenu(pdfContextMenu);
updateActionsUponWSUserRight();
updateActionsUponDSUserRight();
}
}
document.onmousemove = mainWinMouseMove
document.onmouseout = mainWinMouseOut
if (isPicker)
{
workbenchW.getAction("switchToView").setDisplay(false)
workbenchW.getAction("switchToInteractive").setDisplay(false)
workbenchW.getAction("structureView").setDisplay(false)
workbenchW.getAction("pdfView").setDisplay(false)
workbenchW.getAction("dataManager").setDisplay(false)
workbenchW.getAction("switchAppliMode1").setDisplay(false)
}
function mainWinMouseMove(e)
{
if (isInteractive)
{
if (window._isDDEnabled && DDInitAction &&  eventGetY(e)> 5 )
{
DDInitAction(document,null);
newTooltipWidget().show(true, "<nobr>"+convStr(_DDTxt)+"</nobr>",_DDIconUrl,16,16,0,16*_DDIdx,true,e,(eventGetX(e)+27),(eventGetY(e)+10))
document.body.style.cursor = "default";
return false
}
}
}
function mainWinMouseOut(e)
{
newTooltipWidget().show(false)
}
function setReportUrl(url, history) {
workbenchW.getPerspective().setContentFrameURL(url, history);
}
function workbenchBeforeAddWidget(actionId, prms)
{
switch(actionId)
{
case "reportsCombo":
prms.changeCB=reportComboTabCB
break
case "zoomCombo":
prms.changeCB=applyZoom
prms.checkCB=checkZoomCB
break
case "pageNumber":
prms.noMargin=true
prms.afterInitCB=initPageNumberTextField
break
case "refreshDateStatus":
prms.refreshLyrTitle=true
break
case "pageRows":
prms.max=WS._rowsLimitQDM;
break
case "pageColumn":
prms.max=WS._columnsLimitQDM;
case "freezeHeaders":
prms.beforeShowCB=beforeShowFreezeMenuCB;
break
}
if (window.interactiveBeforeAddWidget)
interactiveBeforeAddWidget(actionId, prms)
}
function workbenchAfterAddWidget(actionId, widget)
{
switch(actionId)
{
case "reportsCombo":
workbenchW._reportsCombo = widget;
break
case "zoomCombo":
initZoomCombo(widget);
break
}
if (window.interactiveAfterAddWidget)
interactiveAfterAddWidget(actionId, widget)
}
function viewSetVisibleLeftPaneIcons(pers, newName)
{
if (newName == "welcome") return
var pane  = pers.getLeftPane()
var useQF = !_UDZ_useCustomPrompts && isEnableUserRight(DS._usrRefreshDoc)
var useDI = isEnableUserRight(WS._usrShowDocInfo)
var useIC = isEnableUserRight(WS._usrCreateEditReportFilter)
var useFM = isEnableUserRight(WS._usrShowFilterMap)
switch(newName)
{
case "viewingPers":
pane.valueShow("docinfo", useDI)
pane.valueShow("reportmap", true)
pane.valueShow("inputForm", useIC)
pane.valueShow("quickFilter", useQF)
pane.valueShow("resultObj", false)
pane.valueShow("filtmap", false)
pane.valueShow("debugWOM", false)
pane.valueShow("debugSettings", WS._debug)
pane.valueShow("traceDom", WS._debug)
break
case "pdfPers":
pane.valueShow("docinfo", useDI)
pane.valueShow("reportmap", false)
pane.valueShow("inputForm", false)
pane.valueShow("quickFilter", useQF)
pane.valueShow("resultObj", false)
pane.valueShow("filtmap", false)
pane.valueShow("debugWOM", false)
pane.valueShow("debugSettings", WS._debug)
pane.valueShow("traceDom", WS._debug)
break
case "interactivePers":
pane.valueShow("docinfo", useDI)
pane.valueShow("reportmap", true)
pane.valueShow("inputForm", useIC)
pane.valueShow("quickFilter", useQF)
pane.valueShow("resultObj", true)
pane.valueShow("filtmap", useFM) 
pane.valueShow("debugWOM", WS._debug)
pane.valueShow("debugSettings", WS._debug)
pane.valueShow("traceDom", WS._debug)
break
}
apply_extension(pane, "leftpane", newName);
}
_keepPreviousLeftPaneState = {
showLeftPane:WS._showLeftPane,
showFormulaBar:false,
leftPaneSubMenu:false,
showReportTabs:false
}
function keepLeftPaneState()
{
var persp = _currWorkbench.getPerspective();
if (persp != null && persp.value != "welcome")
{
var ps = _keepPreviousLeftPaneState; 
ps.showLeftPane = WS._showLeftPane;
ps.showFormulaBar = _currWorkbench.getAction("showFormulaBar").isDisabled();
ps.leftPaneSubMenu = _currWorkbench.getAction("leftPaneSubMenu").isDisabled();
ps.showReportTabs = _currWorkbench.getAction("showReportTabs").isDisabled();
}
}
function restoreLeftPaneState(persp)
{
if (persp != "welcome")
{
var ps = _keepPreviousLeftPaneState;
WS._showLeftPane = ps.showLeftPane;
_currWorkbench.getAction("showFormulaBar").setDisabled(ps.showFormulaBar);
_currWorkbench.getAction("leftPaneSubMenu").setDisabled(ps.leftPaneSubMenu);
_currWorkbench.getAction("showReportTabs").setDisabled(ps.showReportTabs);
}
}
function viewKeyPressCB(e)
{
var key = e.keyCode
switch(key)
{
case 8: 
e.returnValue=false
preventDef(e)
return false;
case Event.KEY_ESC:
eventManager.notify(_EVT_ESC_KEY)
preventDef(e)
return false;
case 46 : 
return true;
default:
return true
}
}
function switchModeTo(newMode)
{
var repInfoMode = "";
switch (newMode)
{
case "quickMode": repInfoMode = "QuickDisplay"; break;
case "pageMode":  repInfoMode = "Page"; break;
case "draftMode": repInfoMode = "Listing"; break;
}
var repInfo=DS.arrReports[getReportIdxFromId(DS.iReportID)];
workbenchW.getAction("pageMode").check(newMode == "pageMode");
workbenchW.getAction("draftMode").check(newMode == "draftMode");
workbenchW.getAction("quickMode").check(newMode == "quickMode");
if (repInfo.pageMode!=repInfoMode)
{
wt();
repInfo.pageMode=repInfoMode;
var p=urlParams(true,true,null,null,null,repInfo.pageMode,repInfo.repMode,repInfo.curPage);
setReportUrl("report"+ _appExt +p);
}
_bShowPageNavigation = ((repInfoMode=='Page'||repInfoMode=='QuickDisplay') && !isPDF)
showPageNavigIcons(_bShowPageNavigation);
}
_printLyr = null;
function printLyrCB()
{
setTimeout("directPrintFrame(false)",1)
}
function directPrintFrame(show)
{
if (show) {
var p = _root + "getPDFView" + _appExt + urlParamsNoBID() + "&viewType=P&download=no&sPrint=true"
window.open
if (_printLyr == null) {
append(document.body, '<iframe onload="printLyrCB()" style="position:absolute;left:0px;top:0px;width:1000px;height:1000px;" id="printFrame" name="printFrame" frameborder="0" src="' + convStr(p) + '"></iframe>')
_printLyr = getLayer('printFrame')
}
else {
_printLyr.style.display = "block";
frameNav('printFrame', p);
}
}
else
{
_printLyr.style.display = "none";
}
}
function setPaneVisibility(showLeftPane)
{
var pers = workbenchW.getPerspective();
WS._showLeftPane = showLeftPane
pers.showLeftGrab(showLeftPane == _paneState.normal);
pers.showleftPaneAndBar(showLeftPane != _paneState.off);
pers.showLeftPane(showLeftPane == _paneState.normal);
}
_comeFromInteractive = isInteractive
function focusOnZone(actionId)
{
if (actionId)
setTimeout("delayedFocusOnZone('"+actionId+"')", 100)
}
function delayedFocusOnZone(actionId)
{
var pers=workbenchW.getPerspective()
if (pers==null)
return
var tb = pers.getToolboxBar()
switch (actionId)
{
case "gotoReport":
if (pers.getContentFrameWindow())
safeSetFocus(getReportFrame())
break;
case "gotoCommonToolbox":
if (isInteractive&&tb)
{
tb.getLeftToolbox().focus()
}
else
{
if (pers.isMenuPaletteVisible())
pers.getMenuPalette().focus()
}
break;
case "gotoToolbox":
if (isInteractive&&tb)
{
tb.getMidToolbox().focus()
}
else
{
if (pers.isMenuPaletteVisible())
workbenchW.getAction("viewToolboxZone").setFocus()
}
break;
case "gotoLeftPane":
if (pers.isleftPaneAndBarVisible())
pers.getLeftPane().vertBar.focus()
break;
case "gotoFormulaBar":
if (isInteractive&&pers.isFormulaBarVisible())
{
workbenchW.getAction("formulaText").setFocus()
}
break;
case "gotoStatusOrTabs":
if (pers.isStatusBarVisible())
{
pers.getStatusBar().focus()
}
else
{
if (pers.isNaviBarVisible())
{
pers.getNaviBar().focus()
}
}
break;
}
}
function buildGotoArray(pers)
{
if (window._gotoArray == null)
window._gotoArray = [
          {target:"gotoCommonToolbox", isVisible:function() {return pers.isMenuPaletteVisible()}}
         ,{target:"gotoLeftPane",      isVisible:function() {return pers.isleftPaneAndBarVisible()}}
         ,{target:"gotoReport",        isVisible:function() {return true}}
         ,{target:"gotoStatusOrTabs",  isVisible:function() {return pers.isStatusBarVisible() || pers.isNaviBarVisible()}}
         ]
}
function getNextGroup(currentGroup, next)
{
buildGotoArray(workbenchW.getPerspective())
var startIndex=-1, len=_gotoArray.length
for (var i=0; i<len; i++) {
if (_gotoArray[i].target == currentGroup) {
startIndex = i
break
}
}
if (startIndex != -1) {
for (var i=1; i<len; i++) {
var j = (startIndex + (next ? i : (len-i))) % len
if (_gotoArray[j].isVisible()) {
return _gotoArray[j].target
break
}
}
}
return null
}
function markViewingModeGoto(next)
{
function setGoto(widget, _goto) {
if (widget) widget._goto = _goto
}
var pers = workbenchW.getPerspective(), _goto = getNextGroup("gotoCommonToolbox", next)
setGoto(pers.getMenuBar(), _goto)
setGoto(pers.getToolboxBar(), _goto)
setGoto(pers.getMenuPalette(), _goto)
setGoto(pers.getToolbarMenu(), _goto)
_goto = getNextGroup("gotoLeftPane", next)
setGoto(pers.getLeftPane(), _goto)
setGoto(pers.getLeftGrab(), _goto)
setGoto(pers.getFormulaBar(), _goto)
if (pers.getLeftPane()) setGoto(pers.getLeftPane().getFrame(), _goto)
_goto = getNextGroup("gotoStatusOrTabs", next)
setGoto(pers.getNaviBar(), _goto) 
setGoto(pers.getStatusBar(), _goto) 
_goto = getNextGroup("gotoReport", next)
setGoto(pers.getFloatPalette(), _goto) 
setGoto(pers.getFindBar(), _goto) 
if (pers.getContentFrameWindow()) {
var fr = pers.getContentFrameWindow(), frms = fr.frames
fr._goto = _goto
for (var i=0; i<fr.length; i++)
frms[i]._goto = _goto
}
}
function getGotoFromLayer(layer)
{
var w=layer._widget
var widget = w ? _widgets[w] : null
if (widget && widget._goto)
return widget._goto
if (layer.parentNode)
return getGotoFromLayer(layer.parentNode)
else
return getParentWindow(layer)._goto
}
function viewActionCB(srcWidget, action, srcElement)
{
var pers = workbenchW.getPerspective();
var actionId = srcWidget?srcWidget.actionId: action.id;
if (isPicker && reportPickerClickCB(srcWidget, actionId))
{
return;
}
_askConfirmationBeforeClosingDoc = true;
if (isInteractive && interactiveActionCB(srcWidget, pers, actionId))
{
return
}
switch (actionId)
{
case "gotoReport":
case "gotoCommonToolbox":
case "gotoToolbox":
case "gotoLeftPane":
case "gotoFormulaBar":
case "gotoStatusOrTabs":
focusOnZone(actionId)
break;
case "gotoNextGroup":
markViewingModeGoto(true)
focusOnZone(getGotoFromLayer(srcElement))
break;
case "gotoPrevGroup":
markViewingModeGoto(false)
focusOnZone(getGotoFromLayer(srcElement))
break;
case "smartLeft": 
smartNavig("left");
break;
case "smartRight":
smartNavig("right");
break;
case "smartTop":
smartNavig("top");
break;
case "smartBottom":
smartNavig("bottom");
break;
case "defaultChart":
case "defaultTable":
var p=urlParamsNoBID()
if (p!="")
setReportUrl("processCreateDefault"+_appExt+p+"&sAction="+actionId,true);
break;
    case "readingModeMenu":
case "switchToView":
switchToPerspective("view", srcWidget!=null);
break;
    case "designModeMenu":
    switchToDesignPerspective(srcWidget!=null);
    break;
case "switchToInteractive":
switchToPerspective("interactive", srcWidget!=null);
break
case "structureView":
switchToPerspective("structure", srcWidget!=null);
break;
case "dataManager":
workbenchW.getAction("dataManager").check(false);
break;
case "firstIcn":
wt()
moveToPage("first");
break;
case "previousIcn":
var val = parseInt(workbenchW.getAction("pageNumber").getValue());
if (val > 1)
{
val--;
wt();
moveToPage(val.toString());
}
break;
case "pageNumberStatus":
editInPlacePageNumber(srcWidget);
break;
case "pageNumber":
var val = workbenchW.getAction("pageNumber").getValue();
if ( (val < 1) || (!isNaN(DS.nbPage) && val > DS.nbPage) )
{
showAlertDialog("Invalid page number.","Error",0);
workbenchW.getAction("pageNumber").setValue(DS.iPage);
}
else if ( val != DS.iPage )
{
wt()
moveToPage(val)
}
break;
case "nextIcn":
var val = parseInt(workbenchW.getAction("pageNumber").getValue());
if (isNaN(DS.nbPage) || val < DS.nbPage)
{
val++;
wt();
moveToPage(val.toString());
}
break;
case "lastIcn":
wt()
moveToPage("last");
break;
case "drillBar":
_showDrillBar = srcWidget.isChecked();
_drillBarSetFocus = _showDrillBar 
showHideReportFilterBar();
break;
case "drillMenu":
var isDrillCurentlyOn = workbenchW.getAction("drill").isChecked(), futureDrillSate = !isDrillCurentlyOn
_showDrillBar = futureDrillSate?WS._showDrillBarPref:false;
drillNav()
break;
case "drill":
var isChecked = srcWidget.isChecked()
_showDrillBar = isChecked?WS._showDrillBarPref:false;
drillNav()
break;
case "drillDown":
case "drillUp":
drillCB(actionId)
break;
case "snapshot":
wt()
getSnapshot();
break;
case "drillLite":
_showDrillBar = srcWidget.isChecked();
_drillBarSetFocus = _showDrillBar
workbenchW.getAction("drillLite").check(_showDrillBar);
showHideReportFilterBar()
break;
case "refresh":
case "refreshAll":
case "refreshDateStatus":
case "refreshPDF":
case "refreshDPMenu":
wt();
refreshDocument();
break;
case "quickMode":
case "pageMode":
case "draftMode":
switchModeTo(actionId);
break;
case "pdfView":
switchToPerspective("pdfView", srcWidget!=null)
break;
case "findText":
showHideFindBarCB(srcWidget.isChecked());
break;
case "showToolbar":
pers.showMenuBar(srcWidget.isChecked())
pers.showMenuPalette(srcWidget.isChecked())
break;
case "sendToUser":
if (parent.invokeAction){
parent.invokeAction("../PlatformServices"+DS.inboxActionURL, DS.inboxActionId, DS.strDocID, 1, DS.inboxActionType, null);
}
break;
case "sendToMail":
if (parent.invokeAction){
parent.invokeAction("../PlatformServices"+DS.emailActionURL, DS.emailActionId, DS.strDocID, 1, DS.emailActionType, null);
}
break;
case "sendto":
if (parent.invokeAction)
{
if (DS.emailActionType != "") 
parent.invokeAction("../PlatformServices"+DS.emailActionURL, DS.emailActionId, DS.strDocID, 1, DS.emailActionType, null);
else 
{
if (DS.inboxActionType != "") 
parent.invokeAction("../PlatformServices"+DS.inboxActionURL, DS.inboxActionId, DS.strDocID, 1, DS.inboxActionType, null);
else 
{
if (DS.ftpActionType != "") parent.invokeAction("../PlatformServices"+DS.ftpActionURL, DS.ftpActionId, DS.strDocID, 1, DS.ftpActionType, null);
}
}
}
break;
case "sendToFtp":
if (parent.invokeAction){
parent.invokeAction("../PlatformServices"+DS.ftpActionURL, DS.ftpActionId, DS.strDocID, 1, DS.ftpActionType, null);
}
break;
case "historyBtn":
if (parent.invokeAction){
parent.invokeAction("../AnalyticalReporting"+DS.historyActionURL, DS.historyActionId, DS.strDocID, 1, DS.historyActionType, null);
}
break;
case "close":
initWelcomePerspective();
break;
case "save":
case "saveBtn":
_askConfirmationBeforeClosingDoc = false;
saveOrSaveAs()
break;
case "saveAs":
_askConfirmationBeforeClosingDoc = false;
wt()
saveAs();
break;
case "undo":
if (curState>=1)
{
wt()
undoRedo(-1)
}
break;
case "redo":
if (curState<(arrState.length-1))
{
wt()
undoRedo(+1)
}
break;
case "saveXLS":
var p = urlParamsNoBID() + "&doctype=" + strDocType 
p +=  "&viewType=" + (WS._saveAsXLSOptimized=="Y"? "O":"X")+"&saveReport=N"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
break
case "saveXLSX":
var p = urlParamsNoBID() + "&doctype=" + strDocType 
p +=  "&viewType=X" + (WS._saveAsXLSOptimized=="Y"? "O":"X")+"&saveReport=N"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
break
case "saveReportXLS":
var p = urlParamsNoBID() + "&doctype=" + strDocType 
p +=  "&viewType=" + (WS._saveAsXLSOptimized=="Y"? "O":"X")+"&saveReport=Y"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
    break
case "saveReportXLSX":
var p = urlParamsNoBID() + "&doctype=" + strDocType 
p +=  "&viewType=X" + (WS._saveAsXLSOptimized=="Y"? "O":"X")+"&saveReport=Y"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
    break
case "printOptions":
wt();
frameNav("DlgFrame", "language/"+_lang+"/html/printDialog.html?saveReport=N"+ "&doctype=" + strDocType);
break;
case "print":
case "printPdf":
case "printShortcut":
case "savePDF":
var p=urlParamsNoBID() + "&doctype=" + strDocType + "&viewType=P"+"&saveReport=N"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
break
case "saveReportPDF":
var p=urlParamsNoBID() + "&doctype=" + strDocType + "&viewType=P"+"&saveReport=Y"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
break    
case "savePDFOp":
    wt()
frameNav("DlgFrame", "language/"+_lang+"/html/PDFOptionsDialog.html");
break
case "saveCSV":
wt()
var p=urlParamsNoBID() + "&doctype=" + strDocType + "&viewType=C"
frameNav("DlgFrame", _root + "downloadCSV" + _appExt + p);
break
case "saveCSVReports":
wt()
frameNav("DlgFrame", "language/"+_lang+"/html/CSVOptionsDialog.html?saveReport=A");
break
case "saveCSVReport":
wt()
frameNav("DlgFrame", "language/"+_lang+"/html/CSVOptionsDialog.html?saveReport=Y");
break
case "saveCSVOp":
    wt()
frameNav("DlgFrame", "language/"+_lang+"/html/CSVOptionsDialog.html?saveReport=N");
break
case "saveReportTXT":
var p = urlParamsNoBID() + "&doctype=" + strDocType 
p +=  "&viewType=T&saveReport=Y"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
    break
case "saveTXT":
var p=urlParamsNoBID() + "&doctype=" + strDocType
p += "&viewType=T"+"&saveReport=N"
frameNav("DlgFrame", _root + "downloadPDForXLS" + _appExt + p);
break
case "docProps":
wt()
frameNav("DlgFrame", _root + "language/"+_lang+"/html/editDocumentSummaryDialog.html")
break;
case "showLeftPane_Normal":
setPaneVisibility(1)
pers.showLeftPaneCB();
break;
case "showLeftPane_Mini":
setPaneVisibility(0)
pers.showLeftPaneCB();
break;
case "showLeftPane_Off":
setPaneVisibility(2)
pers.showLeftPaneCB();
break;
case "showStatusBar":
_showStatus = srcWidget.isChecked();
workbenchW.getPerspective().showStatusBar(_showStatus);
workbenchW.getAction("showStatusBar").check(workbenchW.getPerspective().isStatusBarVisible());
recordProp("CDZ_VIEW_showStatus",_showStatus?"1":"0");
break;
case "showMenuBar":
workbenchW.getPerspective().showMenuBar(srcWidget.isChecked());
break;
case "showReportTabs":
workbenchW.getPerspective().showNaviBar(srcWidget.isChecked());
break;
case "trackStatus":
invokeTDCOptionDlg(0);
break;
case "tdcOnOff":
var on = srcWidget.isChecked();
if (on) 
invokeTDCOptionDlg(0);
else
showTdcPromptDialog("If you deactivate data tracking, you will not be able to compare your current data with the data before the last refresh. Do you want to continue?","Deactivate Data Tracking",_promptDlgInfo, deactivateTDC, cancelDeactivateTDC, "Yes","No",400,150);
break;
case "tdcReadingMenu":
var isCheck = !_bTdcActivate; 
if (isCheck) 
invokeTDCOptionDlg(0);
else 
showTdcPromptDialog("If you deactivate data tracking, you will not be able to compare your current data with the data before the last refresh. Do you want to continue?","Deactivate Data Tracking",_promptDlgInfo, deactivateTDC, cancelDeactivateTDC, "Yes","No",400,150);
break;
case "tdcMenu":
if(!_bTdcActivate) return; 
var reportId=DS.iReportID, rep = getReportFromId(reportId), show = rep?rep.sc:false;
processShowChangesTDC(!show);
break;
case "tdcShowChanges":
processShowChangesTDC(srcWidget.isChecked());
break;
case "tdcOptions":
invokeTDCOptionDlg(1);
break;
case "foldUnfold": 
_foldPanelVisible = srcWidget.isChecked()?1:0;
FoldOrUnfoldPanel();
break;
case "newDocument": 
if(_currWorkbench.getPerspective().value == "welcome")
{
frameNav("DlgFrame", "language/"+_lang+"/html/chooseDSTypeDlg.html");
}
else
{
if(isDocModified())
{
showPromptDialog("The document will not be saved if you close it now. Do you want to continue?","Confirm Close",1,closeDocAndInvokeNewDlg)
}
else
{
closeDocAndInvokeNewDlg();
} 
}
break;
case "openDocument":
if(isDocModified())
{
showPromptDialog("The document will not be saved if you close it now. Do you want to continue?","Confirm Close",1,closeDocAndInvokeOpenDlg)
}
else
{
closeDocAndInvokeOpenDlg();
}
break;
case "freezeHeaders":
var block = getBlock(getSelectedEltInViewing());
var bid = block?block.bid:null;
if(bid)
{
var tableInfo = getFreezeInfoFromBid(bid);
var freezeInfo = {  bid:bid,
bFreezeHHeader:(isVerticalTable(block) ||isCrossTable(block)),
bFreezeVHeader:(isHorizontalTable(block) ||isCrossTable(block)), 
freezeRowIndex:(tableInfo?tableInfo.freezeRowIndex:0), 
freezeColIndex:(tableInfo?tableInfo.freezeColIndex:0)};
updateFreezeBids(freezeInfo);
processFreezeHeader(bid,freezeInfo);
freezeHeaderScrollCB(); 
}
  break;
 case "freeze0":
case "freeze1":
case "freeze2":
case "freeze3":
case "freeze4":
case "freeze5":
var bFreezeIndex =  workbenchW.getAction(actionId).isChecked();
var freezeIndex = bFreezeIndex?parseInt(actionId.slice(6)):0;
var bDrawFreeze = (bFreezeIndex && freezeIndex>0);
case "freezeHHeader":
case "freezeVHeader":
var block = getBlock(getSelectedEltInViewing());
var bid = block?block.bid:null;
if(bid)
{
var tableInfo = getFreezeInfoFromBid(bid);
var bFreezeHHeader = (actionId=="freezeHHeader")? workbenchW.getAction("freezeHHeader").isChecked(): tableInfo?tableInfo.bFreezeHHeader:false;
var bFreezeVHeader = (actionId=="freezeVHeader")? workbenchW.getAction("freezeVHeader").isChecked(): tableInfo?tableInfo.bFreezeVHeader:false;
var freezeRowIndex = isHorizontalTable(block)?freezeIndex:0;
var freezeColIndex = isVerticalTable(block)?freezeIndex:0;
if(freezeIndex==null)
{
freezeRowIndex=tableInfo?tableInfo.freezeRowIndex:0;
freezeColIndex=tableInfo?tableInfo.freezeColIndex:0;
bDrawFreeze=(bFreezeHHeader||bFreezeVHeader);
}
var freezeInfo = {  bid:bid,
bFreezeHHeader:bFreezeHHeader,
bFreezeVHeader:bFreezeVHeader, 
freezeRowIndex:freezeRowIndex, 
freezeColIndex:freezeColIndex};
updateFreezeBids(freezeInfo);
hideFrozenHeaders(freezeInfo);
processFreezeHeader(bid,freezeInfo);
if(bDrawFreeze) freezeHeaderScrollCB(); 
}
        break;
case "about":
showAboutDialog()
        break
case "helpContents":
showHelpContent()
break;
case "tutorials":
var tutoUrl = "http://www.sdn.sap.com/irj/scn/web-intelligence-elearning?refer=product-help"
var tutWidth = (((_availWidth-60)>1038)?1038:(_availWidth-60))
var tutHeight = (((_availHeight-100)>1000)?1000:(_availHeight-100))
var tutLeft   = (_availWidth>tutWidth?Math.round((_availWidth-tutWidth)/2):10)
var specs = "scrollbars=yes, resizable=yes, width="+tutWidth+", height="+tutHeight+", top=50, left="+tutLeft
window.open(tutoUrl, "TutoWindow", specs)
break
case "marketPlace":
if (WS._marketPlaceURL != '')
window.open(WS._marketPlaceURL, '_blank');
break;
default:
if (typeof(apply_extension_action) != "undefined")
apply_extension_action(actionId, srcWidget);
}
}
function showHelpContent() {
var helpUrl =  _root + "../../help/" + _lang + "/html/default.htm";
readHttpServerObject(helpUrl, function(xmlhttp) {
helpUrl =  _root + "../../help/" + ((xmlhttp.status==404)?"en":_lang) + "/html/default.htm";
window.open(helpUrl, "helpWindow");
});
}
_globalApplicationDialogHelpIcon = {src: _img + 'galleries/icon16x16gallery1b.png',
dy : 480,
clickCB: showHelpContent,
tooltip: "Help Contents"
};
function closeDocAndInvokeNewDlg()
{
unload();
resetStatesCB();
switchToPerspective("welcome");
frameNav("DlgFrame", "language/"+_lang+"/html/chooseDSTypeDlg.html");
}
function closeDocAndInvokeOpenDlg()
{
var pickUrl = "language/"+_lang+ "/html/" + (WS._debug?"ajaxSaveAsDialog.html":"ajaxOpenOrSaveAsDialog.html")
pickUrl += "?isChooser=true"
pickUrl += "&callback=p.initPerspective"
frameNav("SecondDlgFrame", pickUrl)
}
function getReportFromId(rid) {
rid = parseInt(rid)
for (var i=0; i < DS.arrReports.length; i++) {
if (DS.arrReports[i].reportID == rid) return DS.arrReports[i];
}
return null;
}
function getReportIdxFromId(rid) {
rid = parseInt(rid)
for (var i=0; i < DS.arrReports.length; i++) {
if (DS.arrReports[i].reportID == rid) return i
}
return -1
}
function getReportIdFromIdx(ridx) {
ridx = parseInt(ridx)
if (ridx < DS.arrReports.length) {
return DS.arrReports[ridx].reportID
}
return -1
}
function switchToPerspective(persp, setFocusOnTopLeftButton)
{
    wt(false);
_displayedModeIsPDF=isPDF
var report = "report"
var oldPersName = _currWorkbench.getPerspective() ? _currWorkbench.getPerspective().name : null
if (!isEnableUserRight(WS._usrEditDocumentFormatting) && (persp=="interactive")){
persp="view"
}
var bSendOpenDocWithPromptsEvents = false;
if (WS.isOpenDocWithPrompts)
{
bSendOpenDocWithPromptsEvents = true;
launchRefreshWaitDlg("Refreshing Data",true,true,true);
WS.isOpenDocWithPrompts = false;
WS.isOpenDocWithFilters = false;
}
else if (WS.isOpenDocWithFilters)
{
WS.isOpenDocWithFilters = false;
wt();
}
if (WS.bFullScreen)
{
WS.strViewType = "H"
isInteractive=false;
isPDF=false;
isStructure=false;
_bShowPageNavigation = true;
fillViewPerspectiveUI()
viewSetVisibleLeftPaneIcons(viewPers, "viewingPers")
workbenchW.setPerspective("viewingPers");
        if (_currWorkbench)
        {
            _currWorkbench.getAction("designModeMenu").setDisplay( false);
            _currWorkbench.getAction("readingModeMenu").setDisplay( false);
        }    
}
else
{
keepLeftPaneState();
switch (persp)
{
case "welcome":
isInteractive=false;
isPDF=false;
isStructure=false;
_bShowPageNavigation = false;
WS._showLeftPane=_paneState.off;
fillWelcomePerspectiveUI()
_currWorkbench.getAction("drillLite").setDisabled(true);
_currWorkbench.getAction("foldUnfold").setDisabled(true);
_currWorkbench.getAction("showFormulaBar").setDisabled(true);
_currWorkbench.getAction("leftPaneSubMenu").setDisabled(true);
_currWorkbench.getAction("showReportTabs").setDisabled(true);
_currWorkbench.getAction("saveBtn").setDisabled(true);
_currWorkbench.getAction("save").setDisabled(true);
_currWorkbench.getAction("saveAs").setDisabled(true);
_currWorkbench.getAction("print").setDisabled(true);
_currWorkbench.getAction("findText").setDisabled(true);
_currWorkbench.getAction("historyBtn").setDisabled(true);
_currWorkbench.getAction("exportMenu").setDisabled(true);
_currWorkbench.getAction("sendto").setDisabled(true);
_currWorkbench.getAction("refreshDPMenu").setDisabled(true);
_currWorkbench.getAction("tdcReadingMenu").setDisabled(true);
_currWorkbench.getAction("drillMenu").setDisabled(true);
_currWorkbench.getAction("drillLite").setDisabled(true);
_currWorkbench.getAction("freezeHeaders").setDisabled(true);
_currWorkbench.getAction("foldUnfold").setDisabled(true);
viewSetVisibleLeftPaneIcons(welcomePers, "welcome")
workbenchW.setPerspective("welcome");
report="language/"+ _lang + "/html/welcome.html"
window.DS = {"iReportID":null, "strEntry":null, "arrReports":[], "iPage":1, "strPageMode":"Page", "strReportMode":"Viewing"}
_showDrillBar=false
setDocTitle("Web Intelligence"); 
break;
case "interactive":
case "structure": 
isInteractive=true;
isPDF=false; 
isStructure = (persp == "structure")
DS.designModeState = isStructure?"structure":"data"; 
_bShowPageNavigation = true;
fillInteractivePerspectiveUI()
restoreLeftPaneState(persp);
_currWorkbench.getAction("groups.onTableSelected").setDisplay(false);
_currWorkbench.getAction("groups.onFreeCell").setDisplay(false);
_currWorkbench.getAction("groups.ReportElementOnChart").setDisplay(false);
_currWorkbench.getAction("groups.formatChartStyle").setDisplay(false);
_currWorkbench.getAction("groups.ReportElementOnTable").setDisplay(false);
_currWorkbench.getAction("groups.ReportElementOnSection").setDisplay(false);
workbenchW.getPerspective("interactivePers").getLeftPane().freezeNavigate();
interactiveLoadCB()
viewSetVisibleLeftPaneIcons(interactivePers, "interactivePers");
workbenchW.setPerspective("interactivePers");
        if (_currWorkbench)
        {
            _currWorkbench.getAction("designModeMenu").updateRadioBtn( true);
            _currWorkbench.getAction("readingModeMenu").updateRadioBtn( false);
        } 
break;
case "view":
isInteractive=false;
isPDF=false;
isStructure=false;
_bShowPageNavigation = true;
fillViewPerspectiveUI()
restoreLeftPaneState(persp);
viewSetVisibleLeftPaneIcons(viewPers, "viewingPers")
workbenchW.getPerspective("viewingPers").getLeftPane().freezeNavigate();
workbenchW.setPerspective("viewingPers");
        if (_currWorkbench)
        {
            _currWorkbench.getAction("designModeMenu").updateRadioBtn( false);
            _currWorkbench.getAction("readingModeMenu").updateRadioBtn( true);
_currWorkbench.getAction("freezeHeaders").setDisabled(true);
        }    
break;
case "pdfView": 
if (_displayedModeIsPDF) return
isPDF=true; 
isInteractive=false;
isStructure=false;
repInfoMode = "Listing";
_bShowPageNavigation = false;
fillPDFPerspectiveUI()
restoreLeftPaneState(persp);
viewSetVisibleLeftPaneIcons(viewPers, "pdfPers")
workbenchW.setPerspective("pdfPers"); 
        if (_currWorkbench)
        {
            _currWorkbench.getAction("designModeMenu").updateRadioBtn(false);
            _currWorkbench.getAction("readingModeMenu").updateRadioBtn( true);
        }    
break;
}
}
modifyStatusBarDisplay()
updatePageModeMenu(DS.strPageMode);
updateStatusBarCB();
updateUndoRedoAction(); 
var newPers = workbenchW.getPerspective();
if (isPDF)
{
newPers.showNaviBar(WS._propShowTabs4PDF);
} else 
{
newPers.showNaviBar(workbenchW.getAction("showReportTabs").isChecked());
}
if (isInteractive) {
newPers.getToolboxBar().setRoleAndLabelledBy("region", "Toolbars")
} else { 
newPers.getMenuPalette().setRoleAndLabelledBy("region", "Toolbars")
}
newPers.getLeftPane().setRoleAndLabelledBy("complementary", "Side Panel")
newPers.getFindBar().setRoleAndLabelledBy("region", "Search Bar")
newPers.getFormulaBar().setRoleAndLabelledBy("region", "Formula Bar")
if (WS.bFullScreen) {
newPers.showLeftGrab(false)
newPers.showleftPaneAndBar(false)
newPers.showLeftPane(false)
newPers.showFindBar(false)
newPers.showMainPal(false)
newPers.showMenuBar(false)
newPers.showNaviBar(false)
newPers.showStatusBar(true)
newPers.showFormulaBar(false)
newPers.showToolboxBar(false)
newPers.showMenuPalette(false)
newPers.showFloatPalette(false)
newPers.showMainPal(false)
setPaneVisibility(_paneState.off)
setPane(WS._leftPaneSel, null, null, true);
newPers.leftPaneW = WS._leftPaneW
leftPane = newPers.getLeftPane(); 
workbenchW.getAction("findText").check(false);
workbenchW.getAction("switchAppliMode1").setDisplay(false)
workbenchW.getAction("showReportTabs").setDisplay(false)
workbenchW.getAction("showToolbar").setDisplay(true)
}
else {
workbenchW.getAction("showToolbar").setDisplay(false)
setPaneVisibility(WS._showLeftPane)
setPane(WS._leftPaneSel, null, null, true);
newPers.leftPaneW = WS._leftPaneW
leftPane = newPers.getLeftPane(); 
workbenchW.getAction("findText").check(newPers.isFindBarVisible());
workbenchW.getAction("showStatusBar").check(viewPers.isStatusBarVisible());
workbenchW.getAction("showReportTabs").check(viewPers.isNaviBarVisible());
}
apply_customization(newPers, "switchtoperspective");
_currWorkbench.getAction("showFormulaBar").setDisplay(isInteractive)
if ( isInteractive)
{
newPers.getToolboxBar().midToolbox.select("toolboxes.reportElements");
if(getDictionary() == null)
{
ajaxDictionaryStructure(function(jsonObj) {
fillDictionaryStructure(jsonObj);
});
}
}
initTabsZone(getReportIdxFromId(DS.iReportID))
if (!DS.sendEnabled)
{
if (WS._appSupportSendTo)
workbenchW.getAction("sendto").setDisabled(true);
else
workbenchW.getAction("sendto").setDisplay(false);
}
updateSendToButton();
if (!DS.historyActionType || DS.historyActionType == "") workbenchW.getAction("historyBtn").setDisabled(true);
workbenchW.getAction("copy").setDisabled(!isInteractive);
workbenchW.getAction("paste").setDisabled(!isInteractive);
workbenchW.getAction("cut").setDisabled(!isInteractive);
var reportUrl = report
if (report == "report" || WS.sTarget != null) {
if (WS.sTarget != null)
{
reportUrl = WS.sTarget;
WS.sTarget = null;
_sTargetParameterSet = true;
}
reportUrl += _appExt
reportUrl += urlParams(true,true, DS.strEntry, WS.iViewerID, DS.iReportID, DS.strPageMode, DS.strReportMode, (isStructure?1:DS.iPage), null, DS.foldPanel);
reportUrl += isPDF?"&viewType=P&download=no":"";
}
if (_google)
{
setReportUrl(_root + reportUrl);
}
else
{
setTimeout('setReportUrl("' + _root + reportUrl + '")',1);
}
if (oldPersName != _currWorkbench.getPerspective().name)
eventManager.notify(_EVT_SWITCH_TO_PERSPECTIVE, _currWorkbench.name);
if (bSendOpenDocWithPromptsEvents)
eventManager.notify(_EVT_REFRESH_DATA);
if (WS.bFullScreen != true && setFocusOnTopLeftButton)
{
switch (persp)
{
case "welcome":
setTimeout('workbenchW.getAction("viewBtn").setFocus()', 1)
break
case "interactive":
case "structure": 
setTimeout('workbenchW.getAction("designModeMenu").setFocus()', 1)
break
case "view":
case "pdfView": 
setTimeout('workbenchW.getAction("readingModeMenu").setFocus()', 1)
break
}
}
workbenchW.getPerspective().resizeElements()
}
function modifyStatusBarDisplay() {
updateViewActionChecks()
showPageNavigIcons(_bShowPageNavigation);
showModeSelector(!isPDF)
showZoomSelector(!isPDF)
showReportSelector(!isPDF || (isPDF && WS._propShowTabs4PDF))
}
function showModeSelector(s)
{
workbenchW.getAction("quickMode").setDisplay(s);
workbenchW.getAction("pageMode").setDisplay(s);
workbenchW.getAction("draftMode").setDisplay(s);
}
function showZoomSelector(s)
{
workbenchW.getAction("zoomCombo").setDisplay(s);
workbenchW.getAction("zoom").setDisplay(s);
}
function showReportSelector(s)
{
workbenchW.getAction("reportsCombo").setDisplay(s);
}
function viewCreateObservers()
{
setInterval("updateStatusBarCB()", 60000);
drillObs1=newObserverTwoEvents(_EVT_DRILL_ON,_EVT_WOM_LOADED,drillIcnCB);
drillObs2=newObserverTwoEvents(_EVT_DRILL_OFF,_EVT_WOM_LOADED,drillIcnCB);
drillObs3=newObserverTwoEvents(_EVT_DRILL_LITE,_EVT_WOM_LOADED,drillIcnCB);
drillObs4=newObserverTwoEvents(_EVT_DRILL_ACTION,_EVT_WOM_LOADED,updateRefreshStatusBar);
drillObs5=newObserverOneEvent(_EVT_REPORT_FILTER_BAR_FILLED_UP,drillFilterLoaded);
rtabsObs1=newObserverTwoEvents(_EVT_REP_RENAMED,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs2=newObserverTwoEvents(_EVT_REP_DELETED,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs3=newObserverTwoEvents(_EVT_REP_ADDED,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs4=newObserverTwoEvents(_EVT_REP_DUPLICATED,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs5=newObserverTwoEvents(_EVT_REP_MOVED,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs6=newObserverTwoEvents(_EVT_UNDO_REDO,_EVT_REP_DATAOK,reportTabsCB);
rtabsObs7=newObserverTwoEvents(_EVT_TDC_CHANGED,_EVT_PAGE_LOADED,reportTabsCB);
rtabsObs8=newObserverOneEvent(_EVT_WELCOME,reportTabsCB);
obsLP = new Array;
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_PROMPTS_VALUES_CHANGED,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_UNDO_REDO,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverOneEvent(_EVT_PROCESS_SAVE, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverOneEvent(_EVT_PROCESS_QUICK_SAVE, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_TDC_CHANGED,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_DOC_PROPERTIES,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_VARS_UPDATE,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverTwoEvents(_EVT_DRILL_ACTION,_EVT_WOM_LOADED, refreshLeftPanelCB);
obsLP[obsLP.length] = newObserverOneEvent(_EVT_WOM_LOADED,refreshLeftPanelCB);
newObserverOneEvent(_EVT_DOC_UPDATE,resetStatesCB);
newObserverOneEvent(_EVT_REPORT_RELOAD,reloadReportOnSaveAsCB);
newObserverOneEvent(_EVT_DOCID_UPDATE,updateDocIdCB);
stateObs1=newObserverOneEvent(_EVT_WOM_LOADED,saveStateCB);
newObserverOneEvent(_EVT_DOC_UPDATE,updateRefreshIcon);
newObserverTwoEvents(_EVT_REP_SELECTED,_EVT_PAGE_LOADED,saveSelectedReportCB);
newObserverOneEvent(_EVT_ZOOM_CHANGED,saveZoomCB);
newObserverOneEvent(_EVT_ZOOM_CHANGED,freezeHeaderScrollCB);
newObserverOneEvent(_EVT_WOM_LOADED,savePageCB);
fetchDataObv1=newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_PAGE_LOADED,fetchDataCB);
fetchDataObv2=newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_PAGE_LOADED,fetchDataCB);
processSaveEvent = newObserverOneEvent(_EVT_PROCESS_SAVE,processSaveEventCB);
processQuickSaveEvent = newObserverOneEvent(_EVT_PROCESS_QUICK_SAVE,processSaveEventCB);
sbarDocUpdateObv=newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_PAGE_LOADED,updateStatusBarCB);
sbarRefreshDataObv=newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_PAGE_LOADED,updateStatusBarCB);
sbarUndoRedoObv=newObserverTwoEvents(_EVT_UNDO_REDO,_EVT_PAGE_LOADED,updateStatusBarCB);
newObserverOneEvent(_EVT_WOM_LOADED,updateTDCToolbar)
pageObs1=newObserverOneEvent(_EVT_WOM_LOADED,updatePageWidgetsCB)
zoomObs=newObserverOneEvent(_EVT_WOM_LOADED,setZoomCB)
findObs=newObserverOneEvent(_EVT_WOM_LOADED,resetFindBarCB)
refreshOnOpenObv=newObserverTwoEvents(_EVT_REFRESH_ON_OPEN,_EVT_PAGE_LOADED,refreshOnOpenCB);
newObserverOneEvent(_EVT_SELECTION_CHANGES_VIEWING,updateFreezeCB);
newObserverOneEvent(_EVT_PAGE_LOADED,updateFreezeInfoCB); 
newObserverOneEvent(_EVT_SELECTION_CHANGES_VIEWING,updateFoldUnfoldCB);
newObserverOneEvent(_EVT_SCROLL_REPORT,updateSmartPageCB); 
newObserverOneEvent(_EVT_PAGE_LOADED,updateRefreshIcons); 
newObserverTwoEvents(_EVT_REP_SELECTED,_EVT_PAGE_LOADED,refreshLeftPanelCB);
newObserverOneEvent(_EVT_PAGE_LOADED,parseReport); 
}
_doNotHideOnLoadReport=false
_disableBlockFrame=false
function wt(doNotHideOnLoadReport)
{
if (isInteractive)
{
_disableBlockFrame=true
}
newBlockWhileWaitWidget().show(true)
_doNotHideOnLoadReport=doNotHideOnLoadReport?true:false
}
function hideWt()
{
newBlockWhileWaitWidget().show(false)
}
function updateDocIdCB()
{
if ( isEnableUserRight(WS._usrPublishDoc))
{
var url =  _root + "ajaxPlatformActions" + _appExt
url += urlParamsNoBID();
url += "&id=" + DS.strDocID
ajaxUpdater({"url":url, "postCB":updateDocumentIDForSendTo, "ajaxErrorCB":manageAjaxError});
}
}
function updateDocumentIDForSendTo(jsObj)
{
    if (jsObj && (jsObj.sendEnabled == true))
    {
       DS.strDocID = strDocID;
       DS.inboxActionURL = jsObj.inboxActionURL;
       DS.inboxActionId = jsObj.inboxActionId;
       DS.inboxActionType = jsObj.inboxActionType;
       DS.emailActionURL = jsObj.emailActionURL;
       DS.emailActionId = jsObj.emailActionId;
       DS.emailActionType = jsObj.emailActionType;
       DS.ftpActionURL = jsObj.ftpActionURL;
       DS.ftpActionId = jsObj.ftpActionId;
       DS.ftpActionType = jsObj.ftpActionType;
       DS.historyActionURL = jsObj.historyActionURL;
       DS.historyActionId = jsObj.historyActionId;
       DS.historyActionType = jsObj.historyActionType;
workbenchW.getAction("sendto").setDisabled(false);
       updateSendToButton()
    }
    else
    {
    workbenchW.getAction("sendto").setDisabled(true);
    }
}
function updateSendToButton()
{
workbenchW.getAction("sendToUser").setDisabled(!((DS.inboxActionType != "")&& (DS.inboxActionType != undefined)));
workbenchW.getAction("sendToMail").setDisabled(!((DS.emailActionType != "")&& (DS.emailActionType != undefined)));
workbenchW.getAction("sendToFtp").setDisabled(!((DS.ftpActionType != "")&& (DS.emailActionType != undefined)));
workbenchW.getAction("historyBtn").setDisabled(!((DS.historyActionType != "")&& (DS.emailActionType != undefined)));
}
function viewTabCB()
{
var sel = workbenchW.getPerspective().getNaviBar().getSelection();
if (sel)
{
var index=sel.index;
if (index != getReportIdxFromId(DS.iReportID))
{
wt();
selectReport(index);
}
}
}
function reportComboTabCB()
{
var sel =  this.getSelection();
if (sel)
{
var index = sel.index;
if (index != getReportIdxFromId(DS.iReportID))
{
wt();
selectReport(index);
}
}
}
function workbenchGrabCB(x,y)
{
var newW=Math.max(50,x-6)
if (WS._leftPaneWidth!=newW)
{
recordProp("CDZ_VIEW_leftPaneW",""+newW)
}
}
_oldLeftPaneRecorded = WS._showLeftPane
function viewShowLeftPaneCB()
{
var pers = workbenchW.getPerspective()
WS._showLeftPane = (pers.isleftPaneAndBarVisible() ? (pers.isLeftPaneVisible() ? _paneState.normal : _paneState.min) : _paneState.off)
if ((WS._showLeftPane != _oldLeftPaneRecorded) && (!WS.bFullScreen))
recordProp("CDZ_VIEW_leftPane", WS._showLeftPane)
if (WS._showLeftPane == _paneState.normal)
{
var sel = pers.getLeftPane().getSelection();
var key = sel ? sel.value : null;
if (key==null)
{
setPane(WS._leftPaneSel,false,true)
}
}
else
{
collapsePane()
}
updateLeftPaneActions();
}
function updateLeftPaneActions()
{
workbenchW.getAction("showLeftPane_Normal").check(WS._showLeftPane == _paneState.normal);
workbenchW.getAction("showLeftPane_Mini").check  (WS._showLeftPane == _paneState.min);
workbenchW.getAction("showLeftPane_Off").check   (WS._showLeftPane == _paneState.off);
}
function viewPaneCB()
{
var key=workbenchW.getPerspective().getLeftPane().getSelection().value
eventManager.notify(_EVT_LEFTCOMBO_CHANGED,key)
recordProp("CDZ_VIEW_leftPane","1")
recordProp("CDZ_VIEW_leftPaneSel",key)
WS._leftPaneSel=key
}
function viewingFillTabMenu()
{
}
function wr(s)
{
document.write(s)
}
alertDlg=null
function showAlertDialog(msg,title,iPromptType,okCB)
{
if (alertDlg==null)
{
alertDlg=newAlertDialog("alertDlg","","","OK",_promptDlgInfo)
if (!alertDlg.isHTMLSet())
alertDlg.setFrameHTML(alertDlg.getPromptHTML());
alertDlg.init();
alertDlg.getCancelBtn().setDisplay(false);
}
if (iPromptType ==null) iPromptType=_promptDlgInfo
if (title==null)
title= "Web Intelligence"
if (startsWithIgnoreCase(msg, "VIEWER:"))
msg=getLocalizedMessageString(msg);
alertDlg.setText(msg)
alertDlg.setTitle(title)
alertDlg.setPromptType(iPromptType)
alertDlg.yesCB=(okCB)?okCB:null
alertDlg.show(true);
return alertDlg;
}
promptDlg=null
function showPromptDialog(msg,title,iPromptType,yesCB,noCB, yesText, noText)
{
if (promptDlg==null)
{
var yes=(typeof(yesText)=="undefined")?"Yes":yesText;
var no=(typeof(noText)=="undefined")?"No":noText;
promptDlg=newPromptDialog("promptDlg","","",yes,no,_promptDlgInfo)
if (!promptDlg.isHTMLSet())
promptDlg.setFrameHTML(promptDlg.getPromptHTML());
promptDlg.init();
promptDlg.getOKBtn().setText(yes);
promptDlg.getCancelBtn().setText(no);
}
if (iPromptType ==null) iPromptType=_promptDlgInfo
if (title==null)
{
title= "Web Intelligence"
}
promptDlg.setTitle(title)
promptDlg.setText(msg)
promptDlg.setPromptType(iPromptType)
promptDlg.yesCB=yesCB
promptDlg.noCB=noCB
if (yesCB)
promptDlg.attachDefaultButton(promptDlg.getOKBtn());
else
if (noCB) 
    promptDlg.attachDefaultButton(promptDlg.getCancelBtn());
promptDlg.show(true)
return promptDlg;
}
var promptDlg_3Btns=null;
function promptDlg_3Btns_getCustomisedOKButtonZoneHTML()
{
    var o=promptDlg_3Btns;
    var s='';
if (!o.noOKButtonZone)
{
    s ='<tr>' +    
    '<td class="aboveBtnSpace" align="right" valign="top">' +
    '<table  cellspacing="0" cellpadding="0" border="0"><tbody><tr>' +
    '<td>' +   
    o.okBtn.getHTML() +
    '</td>' +
    '<td id="'+o.notdid+'" style="padding-left:5px;">'+
    o.noBtn.getHTML() +
    '</td>' +
    '<td id="'+o.canceltdid+'" style="padding-left:5px;">'+
    o.cancelBtn.getHTML() +
    '</td>' +
    '<td id="'+o.applytdid+'">'+
    o.applyBtn.getHTML() +
    '</td>' +
    '<td style="padding-right:9px">'+
    '<div></div>' +
    '</td>' +
    '</tr></tbody></table>'+   
    '</td>' +
    '</tr>';
}
    return s;
}
function promptDlg_3Btns_NoCB()
{
    if (promptDlg_3Btns)
    {
        if (promptDlg_3Btns.noKCB)
        {
            promptDlg_3Btns.noKCB();
        }
        promptDlg_3Btns.show(false)
    }
}
function show3ButtonsPromptDialog(msg,title,iPromptType,yesCB,noCB,yesText, noText, cancelText)
{
var yes=(typeof(yesText)=="undefined")?"Yes":yesText;
var no=(typeof(noText)=="undefined")?"No":noText;
var cancel=(typeof(noText)=="undefined")?"Cancel":cancelText;
if (promptDlg_3Btns==null)
{
promptDlg_3Btns=newPromptDialog("promptDlg_3Btns","","",yes,no,_promptDlgInfo)
promptDlg_3Btns.notdid="no_td_id_"+o.id;
        promptDlg_3Btns.noBtn=new_ButtonWidget({id:"prompt_3Btns_NO_BTN_"+o.id, label:no, width:_defaultButtonWidth, clickCB:promptDlg_3Btns_NoCB});             
        promptDlg_3Btns.getOKButtonZoneHTML=promptDlg_3Btns_getCustomisedOKButtonZoneHTML;
if (!promptDlg_3Btns.isHTMLSet())
promptDlg_3Btns.setFrameHTML(promptDlg_3Btns.getPromptHTML());
promptDlg_3Btns.init();
promptDlg_3Btns.noBtn.init();
}
promptDlg_3Btns.yesCB=yesCB;    
promptDlg_3Btns.noKCB=noCB;     
promptDlg_3Btns.noCB=null;      
promptDlg_3Btns.getOKBtn().setText(yes);
promptDlg_3Btns.noBtn.setText(no);
promptDlg_3Btns.getCancelBtn().setText(cancel);
promptDlg_3Btns.getCancelBtn().par=promptDlg_3Btns;
promptDlg_3Btns.getCancelBtn().setDisplay(true);
if (iPromptType ==null) iPromptType=_promptDlgInfo
if (title==null)
{
title= "Web Intelligence"
}
promptDlg_3Btns.setTitle(title)
promptDlg_3Btns.setText(msg)
promptDlg_3Btns.setPromptType(iPromptType)
if (yesCB)
promptDlg_3Btns.attachDefaultButton(promptDlg_3Btns.getOKBtn());
else
if (noCB) 
promptDlg_3Btns.attachDefaultButton(promptDlg_3Btns.noBtn);
promptDlg_3Btns.show(true)
return promptDlg_3Btns;
}
invalidSessionDlg=null
_xtraNeededAutosaveRights =isEnableUserRight(WS._myFavoritesEditRight);
var autoSave_myFavoritesAddToFoldersRight = (DS && typeof(DS._myFavoritesAddToFoldersRight!="undefined"))? DS._myFavoritesAddToFoldersRight : WS._myFavoritesAddToFoldersRight;
var autoSave_myFavoritesEditRight = (DS && typeof(DS._myFavoritesEditRight!="undefined"))? DS._myFavoritesEditRight : WS._myFavoritesEditRight;
var autoSave_myFavoritesDeleteRight = (DS && typeof(DS._myFavoritesDeleteRight!="undefined"))? DS._myFavoritesDeleteRight : WS._myFavoritesDeleteRight;
setTimeout("startCheckSession()", 720000) 
function getXtraNeededAutosaveRights()
{
var xtraRights = _xtraNeededAutosaveRights;
if (DS && typeof(DS._myFavoritesEditRight!="undefined"))
xtraRights = isEnableUserRight(DS._myFavoritesEditRight);
return xtraRights;
}
function startCheckSession(){
setInterval("checkSessionInvalid()", 30000);
}
function checkSessionCB(ajaxMsg)
{
if (ajaxMsg && ajaxMsg.docExists) {
checkSessionInvalid(ajaxMsg);
}
}
var _checkRestore = false
var _docExists = false
function checkSessionInvalid(ajaxMsg)
{
var canAutosave = isDocModified() && WS._canAutosave
if (!canAutosave) {
setIVAutosaveRecoveryCB(null, null, null)
return
}
if (ajaxMsg && ajaxMsg.docExists) {
_checkRestore = true
_docExists = true
} 
if (!_checkRestore) { 
if (parseInt(DS.restoreId) > 0) {
var ajUrl = "checkRestoredDoc" + _appExt + "?iDocID=" + DS.restoreId
ajaxUpdater({
"url": ajUrl,
"postCB": checkSessionCB,
"ajaxErrorCB": manageAjaxError
});
} else {
_checkRestore = true
_docExists = false
}
return
}
canAutosave = _docExists
_askConfirmationBeforeClosingDoc = isDocModified();
if (canAutosave && getXtraNeededAutosaveRights()) {
var msg = "The session timed out. The document" + "\"" + strDocName  + ".wid\" " +
"has been autosaved in the Favorites\\~WebIntelligence folder." + " " + "Click Restore to retrieve it. (WIH 00015)"
setIVAutosaveRecoveryCB(msg, "Restore", autosave)
} else {
if (canAutosave && !getXtraNeededAutosaveRights()){
var msg = "The session timed out, but the document could not be autosaved because the following security rights are not assigned (WIH 00016):";
msg += " " + (isEnableUserRight(autoSave_myFavoritesEditRight)?"":"Edit object");
setIVAutosaveRecoveryCB(msg, null, function() {
_askConfirmationBeforeClosingDoc = false;
});
}
else {
setIVAutosaveRecoveryCB(null, null, null)
}
}
}
function alertWebiServerDown(ajaxMsg) {
var canAutosave = isDocModified() && WS._canAutosave
var msg = "The Web Intelligence Processing Server is down or unreachable." 
var msgTitle = "Communication Error"
if (!canAutosave) { 
showAlertDialog(msg, msgTitle, _promptDlgWarning, invalidSession)
return
}
if (ajaxMsg) {
_checkRestore = true
_docExists =  ajaxMsg.docExists
} 
if (!_checkRestore) { 
if (parseInt(DS.restoreId) > 0) {
var ajUrl = "checkRestoredDoc" + _appExt + "?iDocID=" + DS.restoreId
ajaxUpdater({
"url": ajUrl,
"postCB": alertWebiServerDown,
"ajaxErrorCB": manageAjaxError
});
} else {
_checkRestore = true
_docExists = false
}
return
}
_askConfirmationBeforeClosingDoc = isDocModified();
if (_docExists) {
msg += " \"" + strDocName  + ".wid\" "
msg += "has been autosaved in the Favorites\\~WebIntelligence folder." + " " + "Click Restore to retrieve it. (WIH 00015)"
showPromptDialog(msg, msgTitle, _promptDlgWarning, autosave, invalidSession, "Restore", "Close")
} else {
if (!getXtraNeededAutosaveRights()){
msg += " " + "Web Intelligence could not autosave the document because the following security rights are not assigned (WIH 00016):" 
msg += isEnableUserRight(autoSave_myFavoritesAddToFoldersRight)?"":"Add object to Folder" + "\n"
msg += isEnableUserRight(autoSave_myFavoritesEditRight)?"":"Edit object" + "\n"
msg += isEnableUserRight(autoSave_myFavoritesDeleteRight)?"":"Delete object" + "\n"
} 
showAlertDialog(msg, msgTitle, _promptDlgWarning, invalidSession)
}
}
function alertSessionInvalid()
{
var msg = "Invalid session. Please close your browser and log on again. (WIH 00013)" + "\n"
showAlertDialog(msg,"Web Intelligence",_promptDlgWarning,invalidSession)
}
function alertWebiNotExist()
{
hideWaitDlg();
showAlertDialog("BI launch pad cannot connect to the server. Close the report panel and try to connect again or see your BusinessObjects administrator.", null, _promptDlgWarning, restoreAfterWebiNotExist);
}
function restoreAfterWebiNotExist(ajaxMsg)
{
_checkRestore = false;
var canAutosave = isDocModified() && WS._canAutosave;
if (!canAutosave) {
return;
}
if (ajaxMsg) {
_checkRestore = true;
_docExists =  ajaxMsg.docExists;
} 
if (!_checkRestore) {
if (parseInt(DS.restoreId) > 0) {
var ajUrl = "checkRestoredDoc" + _appExt + "?iDocID=" + DS.restoreId;
ajaxUpdater({
"url": ajUrl,
"postCB": restoreAfterWebiNotExist,
"ajaxErrorCB": manageAjaxError
});
} else {
_checkRestore = true;
_docExists = false;
}
return;
}
_askConfirmationBeforeClosingDoc = false;
if (ajaxMsg != null && _docExists) {
var msg = " \"" + strDocName  + ".wid\" " + "has been autosaved in the Favorites\\~WebIntelligence folder." + " " + "Click Restore to retrieve it. (WIH 00015)";
showPromptDialog(msg, "Communication Error", _promptDlgWarning, function(){wt();initPerspective(DS.restoreId);}, null, "Restore", "Close");
}
}
if ((allowSaveAs!=null)&&(allowSaveAs==false))
{
DS._usrSaveAsDoc="none"
}
function isEnableUserRight(right)
{
return (right=="none")?false:true
}
function initUserRight(widget,right,bDisable)
{
if(widget==null)return;
if(!isEnableUserRight(right))
{  
if (bDisable)
widget.setDisabled(true)
else
{
if(widget.setDisplay) 
widget.setDisplay(false)
else if(widget.show) 
widget.show(false)
}
}
}
function saveOrSaveAs(fromQuery)
{
wt()
if (DS.isNew) {
saveAs(fromQuery)
} else {
if (workbenchW.getAction("save").disabled) {
saveAs(fromQuery);
}
else {
save(fromQuery)
}
}
}
function getBids(singleBID)
{
var b=""
if (isInteractive && selectedBid)
{
selectedBid.each(function(pair) {
var i = pair.key;
if (b!="")
b+=","
b+=i
if (singleBID)
throw $break;
});
}
return b
}
function getBidInViewing()
{
var b=""
if (selectedIdRef != null)
{
selectedIdRef.each(function(pair) {
b = pair.value;
});
}
return b
}
function urlParams(singleBID,acceptNoBID,otherSEntry,otherViewerID,otherReportID,otherPageMode,otherReportMode,otherPage,dontKeepScrollInfo,otherFoldPanel,isRedirectTo,bCachePageEnabled)
{
if (bCachePageEnabled==null)
bCachePageEnabled=true;
var b = getBids(singleBID)
if ((b=="")&&(!acceptNoBID))
return "";
var params = urlParamsNoBID(otherSEntry,otherViewerID,otherReportID,otherPageMode,otherReportMode,otherPage,dontKeepScrollInfo,otherFoldPanel,isRedirectTo);
params += (singleBID?("&sBid="+escape(b)):("&bids="+escape(b))) + ((!bCachePageEnabled)?"&cachePageEnabled=false":""); 
return params;
}
function urlParamsNoBID(otherSEntry,otherViewerID,otherReportID,otherPageMode,otherReportMode,otherPage,dontKeepScrollInfo,otherFoldPanel,isRedirectTo)
{
if (otherSEntry==null)
otherSEntry=DS.strEntry
if (otherViewerID==null)
otherViewerID=WS.iViewerID
if (otherReportID==null)
otherReportID=DS.iReportID
var otherReportIDx = getReportIdxFromId(otherReportID)
if (otherReportIDx == -1)
{
otherReportIDx = otherReportID
otherReportID = getReportIdFromIdx(otherReportIDx)
}
var repChanged = false;
if (otherReportID == DS.iReportID || DS.iReportID == null)
{
if (otherPageMode==null)
otherPageMode=DS.strPageMode
if (otherReportMode==null)
otherReportMode=DS.strReportMode
if (otherPage==null)
otherPage=DS.iPage
if (otherFoldPanel==null)
otherFoldPanel=DS.foldPanel;
}
else
{
repChanged = true;
var rep = DS.arrReports[otherReportIDx];
if (otherPageMode==null)
otherPageMode=rep.pageMode
if (otherReportMode==null)
otherReportMode=rep.repMode
if (otherPage==null)
otherPage=rep.page
if (otherFoldPanel==null)
otherFoldPanel=rep.foldPanel;
}
if (dontKeepScrollInfo) {
var rep=DS.arrReports[otherReportIDx]
if (rep!=null)  {
rep.scrollX=0
rep.scrollY=0
}
 } else  {
saveScrollingInfo()
}
_curIPageMax=null;
var params = "?iViewerID="+escape(otherViewerID)+"&sEntry="+escape(otherSEntry)+"&iReport="+otherReportIDx+"&iReportID="+otherReportID;
params += "&sPageMode="+otherPageMode+"&sReportMode="+otherReportMode+"&iPage="+otherPage+(otherFoldPanel?"&iFoldPanel="+otherFoldPanel:"");
params += "&zoom="+getZoom(otherReportIDx)+"&isInteractive="+((isInteractive || isPicker)?"true":"false");
params += "&isStructure=" + ((isStructure)?"true":"false");
params += (isRedirectTo)?"&sRedirectTo=Report":"";
var idRef = ((_curUIRef && !repChanged)?"&idRef=" + encodeURIComponent(_curUIRef) :"") ;
params +=  checkURLLength(params + idRef)? idRef:"";
return params;
}
function checkURLLength(url)
{
if (url==null || typeof(url)=="undefined") return false;
return url.length <= _urlMaxLength - 50;
}
function saveScrollingInfo()
{
if ( isPDF || _showQueryPanel || _displayedModeIsPDF )
return
var w=getReportFrame()
if (w==null) return
if (w.document.body==null) return
var rep=DS.arrReports[getReportIdxFromId(DS.iReportID)]
if (rep==null)
return
rep.scrollX=getScrollX(w)
rep.scrollY=getScrollY(w)
}
function getReportFrame()
{
var f=workbenchW.getPerspective().getContentFrameWindow();
if (f==null) return null
if ((_bDrillMode || _showDrillBar || _foldPanelVisible==1)&&f&&(f.frames)&&(f.frames.Reportbloc))
{
f=f?f.frames.Reportbloc:null
try
{
var dummy=f.name
}
catch(ex)
{
return null
} 
}
return f
}
function getZoom(idx)
{
{
if (idx==null)
idx = getReportIdxFromId(DS.iReportID);
if (idx==null || idx == -1)
return 100
return DS.arrReports[idx].zoom
}
}
function changeEntry(s)
{
eventManager.notify(_EVT_BEFORE_TOKEN_UPDATE,s)
DS.strEntry=s
}
function overrideEntry(s)
{
DS.strEntry = s;
arrState[curState].sEntry = DS.strEntry;
}
function getEntry()
{
return DS.strEntry;
}
function setDrillMode()
{
if(DS.strReportMode == "Analysis") 
{
_bDrillMode = !_bReportDrillLite;
}
else 
{
_bDrillMode = false;
}
setDrillIconState(_bDrillMode);
}
function setDrillIconState(bDrillMode)
{
if (!isPageLoaded) {
setTimeout('setDrillIconState('+bDrillMode+')',100)
} else {
var tooltip = bDrillMode?"Deactivate drill mode":"Start drill mode"
var drillAction = workbenchW.getAction("drill")
drillAction.setText(bDrillMode?"Stop Drill":"Start Drill")
drillAction.check(bDrillMode)
workbenchW.getAction("drillMenu").updateRadioBtn(bDrillMode);
workbenchW.getAction("snapshot").setDisplay(bDrillMode && isEnableUserRight(WS._usrWorkInDrillMode))
workbenchW.getAction("drillLite").check(_showDrillBar);
}
}
function updateWOM()
{
_currentMoveLayer=null
globMoveObj=null
_isMoving=false
isWOMLoaded=false
womLoadCB()
}
function delayedWomLoadCB()
{
var rWin=getReportFrame()
if (rWin == null) return
var rDoc=rWin.document
if (!_ff)
goToAnchor(rWin);
_bShowPageNavigation = ((DS.strPageMode=='Page'||DS.strPageMode=='QuickDisplay') && !isPDF)
updatePageModeMenu(DS.strPageMode)
showPageNavigIcons(DS.strPageMode != null && !isPDF)
delayReportTabsTDC();
updateFreezeHeaderToolbar();
if (!_ie)
{
rDoc.body.addEventListener("mousedown",reportBodyMouseDown,true)
}
else
{
var cont=getPageContainer();
if (cont)
cont.onmousedown = reportBodyMouseDown;
}
addBOEvents(rDoc,null,rWin);
JITAttachKeyboard(rDoc.body)
if (_foldPanelVisible)
{
workbenchW.getAction("foldUnfold").check(true);
var fr=workbenchW.getPerspective().getContentFrameWindow();
if (fr && typeof(fr.frames['FoldPanel'])!="undefined" && typeof(fr.frames['FoldPanel'].initOutline)!="undefined")
{
fr.frames['FoldPanel'].initOutline(getZoom()/100);
}
}
else
workbenchW.getAction("foldUnfold").check(false);
try
{
if (_isFirstReportLoad)
{
_isFirstReportLoad=false
focusOnZone("gotoCommonToolbox")
}
else
{
}
}
catch(e)
{
}
if (isPicker)
{
_feedbackManager.init(rWin, rDoc, getZoom()/100, _dpi);
Draw.init();
}
else if (!isPDF)
{
restoreScrollingInfo();
if (isInteractive)
{
interactiveDelayedWomLoadCB(rWin, rDoc);
}
else
{
if (DS._docHasInputForms  
   ||              
        _inputFormBlocks !=null
)
{
registerBidsForInputForm();
_feedbackManager.init(rWin, rDoc, getZoom()/100, _dpi);
Draw.init();
}
restoreSelectionInViewing(); 
}
if (_inputFormBlocks!=null)
{
var frm=getReportFrame();
frm.setBlockAsInputForm();
}
if (_ie && !_ie9R)
rDoc.body.onscroll = onScrollCB;
else
rDoc.addEventListener("scroll",onScrollCB,false); 
}
eventManager.notify(_EVT_WOM_LOADED)
if ((!doRefreshOnOpen && !_showDrillBar) || (!doRefreshOnOpen && isPDF) || _sTargetParameterSet)  
{
workbenchW.getPerspective().getLeftPane().restoreNavigate();
_sTargetParameterSet = false;
}
}
function drillFilterLoaded()
{
if (!_sTargetParameterSet)
{
workbenchW.getPerspective().getLeftPane().restoreNavigate();
}
}
function onScrollCB()
{
 eventManager.notify(_EVT_SCROLL_REPORT);
 freezeHeaderScrollCB();
}
function cancelRefreshOnOpen() {
if (workbenchW) {
workbenchW.getPerspective().getLeftPane().restoreNavigate()
}
}
function womLoadCB()
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
var reportIndex = getReportIdxFromId(DS.iReportID); 
reportTabSelect(reportIndex);
syncArrReport(reportIndex);
var frm=getReportFrame()
if (isPDF)
{
try
{
if ((frm==null)||(frm.document==null)||(frm.document.body==null))
setTimeout("womLoadCB()",100)
else
delayedWomLoadCB()
}
catch(ex)
{
setTimeout("womLoadCB()",100)
}
}
else
{
if ((frm==null)||(frm.document==null)||(frm.document.body==null))
setTimeout("womLoadCB()",100)
else
delayedWomLoadCB()
}
}
function mapmdownForExpCollCB(e)
{
var o=this, fr = getParentWindow(o)
if (fr==null)
return true
var e=_ie?fr.event:e
simulateClick(e)
var m = getClickCoordinatesInContainer(o,e)
var isLeftButton = eventIsLeftButton(e,fr) 
var bid = o.getAttribute?o.getAttribute("bid"):null
if (!_bDrillMode)
{
if(null != bid)
{
var area = getCurrArea(m);
var idxs = null
if (area && area.idxs)
{
idxs = area.idxs.split(',')
}
_ExpColChartZoneInfo = getCurrExpColChartZoneInfo(idxs, area,bid);
if(isLeftButton && _ExpColChartZoneInfo )
doFocusDrill()
}
}
}
function getChartArrErrors(theIdRef,errsmsg) 
{
for(var i=0;i<errsmsg.length;i++)
{
 if( errsmsg[i].href  == theIdRef )
return errsmsg[i].errors
}
return null;
}
_ERR_CAT_BLOCK_DEFINITION = 0
_ERR_CAT_DATASET_ERROR = 1
_ERR_CAT_FORMULA_DEFINITION = 2
_ERR_CAT_FORMULA_EVALUTION  = 3
_ERR_CAT_NEED_REFRESH= 4
_ERR_CAT_SECURITY= 5
_ERR_CAT_DATASET_ERR= 6
function getErrMsgCat(errorType,type)
{
var objRes = new Object
switch(errorType)
{
case "eDatasync":
case "eIncompatible":
case "eMix":
objRes.catType = _ERR_CAT_BLOCK_DEFINITION
objRes.catMsg = (type == 0?"Block definition":"Check objects incompatibilities in the dataset");
return objRes;
break;
case "eExternal":
case "eMigration":
objRes.catType = _ERR_CAT_FORMULA_DEFINITION
objRes.catMsg = (type == 0?"Formula Definition":"Check objects incompatibilities in the dataset");
return objRes;
break;
case "eComputation":
case "eContext":
case "eDivisionByZero":
case "eMultiValue":
case "eOverflow":
case "eRanking":
case "eSyntax":
case "eUnavailable":
objRes.catType = _ERR_CAT_FORMULA_EVALUTION
objRes.catMsg = (type == 0?"Formula Evaluation":"Check formula definition in this dataset context");
return objRes;
break;
case "eNeedRefresh":
objRes.catType = _ERR_CAT_NEED_REFRESH
objRes.catMsg = (type == 0?"Need Refresh":"Refresh your query to display the data");
return objRes;
break;
case "eSecurity":
objRes.catType = _ERR_CAT_SECURITY
objRes.catMsg = (type == 0?"Security":"Access right denied - Contact your administrator");
return objRes;
break;
case "eOutOfRange":
case "eDatatype":
case "eUndefined":
case "eVolatile":
case "eStrippedObject":
case "eUnknown":
objRes.catType = _ERR_CAT_DATASET_ERR
objRes.catMsg = (type == 0?"Dataset error":"Check dataset for errors");
return objRes;
break;
}
return null;
}
function getFinalErrMsg(arr)
{
var arrTool = new Array
if(arr)
{
arrTool.push("<ul>")
for(var i=0;i<arr.length;i++)
{
arrTool[arrTool.length] = "<li>"+convStr(arr[i].msg.join(''))+'<br>'+ convStr(arr[i].explanation)+"</li>"
}
arrTool.push("</ul>")
return arrTool.join('')
}
}
var arrTooltip = new Array
var arrTooltipMess = new Array
function  getChartErrorMsg(fr,theIdRef)
{
if(fr && fr.JSONDATA && fr.JSONDATA.errsmsg && fr.JSONDATA.errsmsg.length > 0)
{
var categorieNameType = 0
var categorieExplanationType = 1
var arrErr = new Array
var errsmsg = fr.JSONDATA.errsmsg
for(var j=0; j<errsmsg.length; j++)
{
if(errsmsg[j].href == theIdRef)
{
var tabErr = errsmsg[j].errors;
for (var k=0; k<tabErr.length; k++)
{
 var errObj=tabErr[k]
 for (i in errObj)
     {
 arrErr[arrErr.length] = {type : i,
  name :errObj[i]
 }           
     }
}
break;
}
}
for(var i=0;i<arrErr.length;i++)
{
var objResCatName = getErrMsgCat(arrErr[i].type,categorieNameType)
var catMsg = objResCatName.catMsg + " - " + "Error in dataset values"+" : "
var index = arrayFind(window,"arrTooltip",objResCatName.catType,'type')
if(index != -1)
{
var len = arrTooltip[index].msg.length
arrTooltipMess = arrTooltip[index].msg
var index2 = arrayFind(window,"arrTooltipMess",arrErr[i].name)
if(index2 == -1)
arrTooltip[index].msg[len]= ", " + arrErr[i].name
}
else
{
var objRes = getErrMsgCat(arrErr[i].type,categorieExplanationType)
arrTooltip[arrTooltip.length] ={
type : objRes.catType,
explanation : objRes.catMsg, 
  msg : [catMsg,  arrErr[i].name]
    }
}
}
return (arrErr.length)?getFinalErrMsg(arrTooltip):null;
}
}
function cleanErrArr() 
{ 
arrTooltip.length = 0
arrTooltipMess.length = 0
}
function addBOEvents(l,winRect,fr)
{
if (l.nodeType==3)
return
var bid=l.getAttribute?l.getAttribute("bid"):null,n=l.childNodes
var plugin_name = l.getAttribute?l.getAttribute("plugin_name"):null
var isChart= ("com.sap.webi.cvom" == plugin_name)
if (isPicker && bid!=null)
{
registerBid(bid,l)
l.onmousemove=mmove
}
else
{
if (isInteractive)
{
if (bid) {
if (_ie)
{
makeSectionSensitiveIE(l)
if (l.tagName=="TD")
{
if (l.innerHTML=="&nbsp;")
l.innerHTML="<div>&nbsp;</div>"
var lst=l.style
var lclst=l.currentStyle
if (lclst.backgroundImage||lclst.backgroundColor)
{
}
else
{
lst.backgroundImage=_emptyURL
lst.backgroundRepeat="no-repeat"
}
}
}
registerBid(bid,l)
addDblClickCB(l,viewDblClickCB)
l.onmousedown=viewClickCB
l.oncontextmenu=contextMenu
l.onmouseover=mover
l.onmouseup=elemup
l.onmousemove=mmove
if(l.addEventListener)
{
l.addEventListener("dragover",dragOverCB,false)
l.addEventListener("drop",dropCB,false)
}
else
{
l.ondragover=dragOverCB
l.ondrop=dropCB
}
}
}
else 
{
registerBid(bid,l);
}
if (isChart && !isEnabledBif(bid)) {
l.onmousemove = mapmove
l.oncontextmenu=contextMenu
if (!isInteractive && !_bDrillMode)
{
l.onmousedown=mapmdownForExpCollCB
}
}
if (_bDrillMode)
{
if(l.tagName == null)
{
if (_drillTooltip) {
_drillTooltip.show(false)
}
}
l.onmouseout=drillOutCB;
var bodrill = l.getAttribute?l.getAttribute("drill"):null
if (bodrill != null)
{
var isLink = false;
if (l.childNodes != null && l.childNodes.length > 0)
{
var tn = l.childNodes[0].tagName;
if (tn != null && tn.toLowerCase() == 'a')
{
var hrefAttrib = l.childNodes[0].getAttribute("href");
isLink = (hrefAttrib != null && hrefAttrib != '');
}
}
if (!isLink)
{
l.onmousedown=viewClickCB
l.onmouseover=drillOverCB
}
if (!isInteractive && !isPicker) {
var lp = getParentTableCell(l)
if (lp) {
lp.oncontextmenu=contextMenu
} else {
l.oncontextmenu=contextMenu
}
}
}
}
}
if (l.tagName == "IMG") {
var expand_collapse = l.getAttribute ? l.getAttribute("ms") : null
if (expand_collapse) 
{
initExpCollInfos(l);
l.onmousedown = expandCollapseClickCB;
if (!_ie9R && _ie) 
{
var parLayer = l.parentNode.parentNode;
if(parLayer.tagName=="TD")
parLayer.oncontextmenu=contextMenu;
else
parLayer.parentNode.oncontextmenu=contextMenu; 
}
else
{
l.parentNode.parentNode.oncontextmenu=contextMenu;
}
}
if(_ie8 || _ie8CompView){
 l.removeAttribute("alt");
}
}
if ((bid != null) && (l.tagName == "DIV")) {
if (isChart && !isEnabledBif(bid)) { 
var rWin=fr
if (rWin == null) return
var rDoc=rWin.document
var tdc = l.getAttribute?l.getAttribute("trackdata"):""
var hasTdc = tdc && (tdc != "")
if (hasTdc) {
var divSt = l.style
divSt.borderWidth="2px"
divSt.borderColor="#FFB49D"
var newImg=rDoc.createElement('img')
newImg.id= "chartTdcIcon_" + bid
newImg.src=_img+'tdc_chart_32x32.png'
newImg.tooltip=isInteractive?"The data in this chart has changed.\nClick the icon to turn the chart into a table and view data changes.":"The data for this chart has changed."
var imgSt=newImg.style
imgSt.position="absolute"
imgSt.zIndex=100
imgSt.top=0
imgSt.left=0
imgSt.width="32px"
imgSt.height="32px"
if (isInteractive) {
imgSt.cursor = _hand
newImg.onclick = clickIconChartCB
}
newImg.onmouseover = iconChartOverCB
newImg.onmouseout = hideIconChartTooltip
l.appendChild(newImg)
}
var icon = null
if(!DS.bhideWarningIconsChart)
{
var theIdRef = l.getAttribute?l.getAttribute("idref"):null
if(theIdRef)
{
var errorMsg =  getChartErrorMsg(fr,theIdRef) 
if(errorMsg)
icon = {"img":"warning", "tt":errorMsg}
cleanErrArr();
}
}
var error = l.getAttribute?l.getAttribute("error"):""
if (error == "xelement_failed") {
icon = {"img":"error", "tt":"An error occurred during chart generation. The chart cannot be displayed."}
} else {
var partialdataset = l.getAttribute?l.getAttribute("partialdataset"):""
if (partialdataset == "true") {
icon = {"img":"warning", "tt":"The chart engine could not interpret all the data.\n Only a partial set of the data was treated to display this chart."}
} else {
var improveable = l.getAttribute ? l.getAttribute("warning"):""
if (improveable == "dataset_is_improvable") {
icon = {"img":"info", "tt":"This chart cannot display all its data correctly.\n Increase the chart size or change the chart type."}
}
}
}
if (null != icon) {
var newImg= rDoc.createElement('img')
newImg.src= _img + icon.img + '_32x32.png'
newImg.tooltip= icon.tt
var imgSt=newImg.style
imgSt.position="absolute"
imgSt.zIndex=100
imgSt.top=0
imgSt.left = hasTdc?"32px":0
imgSt.width="32px"
imgSt.height="32px"
newImg.onmouseover = iconChartOverCB
newImg.onmouseout = hideIconChartTooltip
l.appendChild(newImg)
}
if(isStructure || ( isInteractive && isGhost(bid)))
{
var newDiv= rDoc.createElement('div')
newDiv.innerHTML=convStr("Drop data objects here")
setLayerTransp(newDiv,70)
var st=newDiv.style
st.position="absolute"
st.top='5px'
st.left='5px'
st.width=''+Math.max(0,l.offsetWidth-10)+'px'
st.fontFamily = 'Tahoma,sans-serif';
st.fontSize='12px';
st.fontWeight='bold'
st.overflow='hidden'
st.textOverflow='ellipsis'
st.color='#ffffff'
st.backgroundColor='#a0a0a0'
st.border='1px solid #303030'
st.padding='4px' 
st.textAlign='center'
l.appendChild(newDiv)
}
}
}
if (n!=null)
{
var count=n.length
for (var i=0;i<count;i++) addBOEvents(n[i],winRect,fr)
}
}
function registerBid(bid,l)
{
var t=bidTable.get(bid)
if (t==null)
{
t=new Array
bidTable.set(bid,t)
}
t[t.length]=l
}
function isEnabledBif(bid)
{
var ret = false;
if (_inputFormBlocks)
{
for (var i=0; i<_inputFormBlocks.length; i++)
{
var iForm = _inputFormBlocks[i];
if (iForm.bid == bid)
{
ret = !_disabledInputFormBlocks[iForm.id];
break;
}
}
}
return ret;
}
function registerIdRef(ref,l)
{
var t=idRefTable.get(ref)
if (t==null)
{
idRefTable.set(ref,l)
}
}
function resetIdRefTable()
{
idRefTable = null;
idRefTable = new Hash();
}
function getSelectedReportIndex()
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
return tabsZone.getSelection().index
}
function getSelectedReportName()
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
return tabsZone.getSelection().name
}
function selectReport(index,bForceReDraw,bUndoEnabled,otherSEntry,bNotifyEvent,bCachePageEnabled)
{
if(index<0) return; 
if (bForceReDraw==null)
bForceReDraw=false;
if (bUndoEnabled==null)
bUndoEnabled=false;
if (bNotifyEvent==null)
bNotifyEvent=true;
var repInfo=DS.arrReports[index]
if (index != getReportIdxFromId(DS.iReportID) || bForceReDraw )
{
setFollowObjectInfo(null); 
if (bNotifyEvent)
eventManager.notify(_EVT_REP_SELECTED,index)
_showDrillBar=repInfo.drillBar
if(repInfo.curPage == null ) repInfo.curPage=1;
var p=urlParams(true,true,otherSEntry,null,repInfo.reportID,repInfo.pageMode,repInfo.repMode,repInfo.curPage,true,null,null,bCachePageEnabled) 
setReportUrl(_root+"report"+_appExt+p+"&sUndoEnabled="+bUndoEnabled+((isPDF && WS._propShowTabs4PDF)?"&viewType=P":""));
afterSelectReport(index);
}
}
function afterSelectReport(index)
{
var repInfo=DS.arrReports[index]
    if (isInteractive)
{
selectedBid.each(function(pair) {
var i = pair.key;
selectedBid.unset(i)
});
}
_bShowPageNavigation = ((repInfo.pageMode=='Page'||repInfo.pageMode=='QuickDisplay') && !isPDF)
showPageNavigIcons(_bShowPageNavigation)
updatePageModeMenu(repInfo.pageMode);
}
function getReportTabIcon(report)
{
    var alt="Report"
    var tabIcon=report.sc?_reportTabIconType.tdc:_reportTabIconType.normal;
    if (report.repMode=='Analysis' && !report.drillLite) 
    {   
    tabIcon=report.sc?_reportTabIconType.drill_tdc:_reportTabIconType.drill;
    alt="Drilled Report"
    }
    return {name:report.name,icon:_reportTabIconArr[tabIcon], tooltip:alt};
}
function reportTabsCB(evt,data)
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
switch(evt)
{
case _EVT_TDC_CHANGED:
delayReportTabsTDC();
break
case _EVT_REP_RENAMED:
var index=parseInt(data)
var tab=tabsZone.getTab(index)
    tab.change(getReportTabIcon(DS.arrReports[index]));
initReportCombo()
reportTabSelect(index)
break
case _EVT_REP_DELETED:
var index=parseInt(data)
tabsZone.remove(index)
initReportCombo()
break;
case _EVT_REP_ADDED:
case _EVT_REP_DUPLICATED:
var last= DS.arrReports.length-1
    tabsZone.addByPrms(getReportTabIcon(DS.arrReports[last]))      
initReportCombo()
reportTabSelect(-1)
break
case _EVT_REP_MOVED:
var from=parseInt(data.from)
var dest=parseInt(data.dest)
initTabsZone(dest)
break
case _EVT_UNDO_REDO:
var index=parseInt(data)
initTabsZone(index)
break;
case _EVT_WELCOME:
DS.arrReports.clear()
initTabsZone(-1)
hideWt()
if (WS.bLaunchQP) {
showAlertDialog("The Query Panel is not available.", "Web Intelligence", _promptDlgWarning, null)
} 
break;
}
}
function delayReportTabsTDC()
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
if(tabsZone.getCount() != DS.arrReports.length )
{
setTimeout('delayReportTabsTDC()',10);
}
else
{
for (var i=0; i < tabsZone.getCount(); i++) 
{   
    var tab=tabsZone.getTab(i);
    tab.change(getReportTabIcon(DS.arrReports[i]));    
}
}
}
function initTabsZone(repIdx)
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
var reportsCombo=workbenchW._reportsCombo;
tabsZone.removeAll()
for (var i=0; i <  DS.arrReports.length; i++)
{
        tabsZone.addByPrms(getReportTabIcon(DS.arrReports[i]))
}
initReportCombo()
reportTabSelect(repIdx)
}
function reportTabSelect(repIdx)
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
tabsZone.select(repIdx)
reportComboSelect(repIdx)
setReportNameToolbox(repIdx)
updateReportActions();
}
function syncArrReport(repIdx)
{
var rep = DS.arrReports[repIdx];
rep.foldPanel = DS.foldPanel;
rep.page = DS.iPage;
rep.pageMode = DS.strPageMode;
rep.nbPage = DS.nbPage;
rep.repMode = DS.strReportMode;
}
function updateReportActions()
{
var nbReport = DS.arrReports.length;
var idxReport = getReportIdxFromId(DS.iReportID);
workbenchW.getAction("deleteReport").setDisabled(nbReport == 1);
workbenchW.getAction("moveReportLeft").setDisabled(idxReport==0);
workbenchW.getAction("moveReportRight").setDisabled(idxReport==(nbReport-1));
workbenchW.getAction("moveReportFirst").setDisabled(idxReport==0);
workbenchW.getAction("moveReportLast").setDisabled(idxReport==(nbReport-1));
}
function setReportNameToolbox(repIdx)
{
if (DS.arrReports.length == 0) return;
if(repIdx == null) repIdx=getReportIdxFromId(DS.iReportID);
if(repIdx == -1) repIdx=DS.arrReports.length-1; 
workbenchW.getAction("reportName").setValue(DS.arrReports[repIdx].name);
var pageContainer = getPageContainer()
if (null != pageContainer) {
var fr = getReportFrame()
var idLabel = workbenchW.getPerspective().getContentFrame().getAriaLabelledByID()
var div = fr.document.getElementById(idLabel);
if (null == div) {
div = fr.document.createElement("div")
fr.document.body.appendChild(div)
pageContainer.setAttribute("role", "main")
pageContainer.setAttribute("aria-labelledby", idLabel)
}
div.innerHTML = '<div style="display:none" id="'+idLabel+'">' + convStr("Report") + '</div>'   
}
}
function reportComboSelect(repIdx)
{
var reportsCombo = workbenchW._reportsCombo;
if (reportsCombo)
{
reportsCombo.select(repIdx);
repIdx = "" + repIdx;
repIdx = parseInt(repIdx)
if(repIdx == -1) repIdx=DS.arrReports.length-1; 
if (DS.arrReports.length > 1)
reportsCombo.setText(DS.arrReports[repIdx].name)
}
}
function initReportCombo()
{
var reportsCombo=workbenchW._reportsCombo;
if (reportsCombo)
reportsCombo.del();
for (var i=0; i <  DS.arrReports.length; i++)
{
rep=DS.arrReports[i]
if (reportsCombo)
reportsCombo.add(rep.name,i);
}
}
function restoreScrollingInfo()
{
if ( isPDF || _showQueryPanel || !(_foldPanelVisible || isInteractive || _isInputFormAction || _isExpandCollapseAction))
return
var w=getReportFrame()
if (w == null) return
if (w.document.body==null)
return
var rep=DS.arrReports[getReportIdxFromId(DS.iReportID)]
if (rep==null)
return
if (rep.curPage==DS.iPage && (rep.scrollX>0 ||  rep.scrollY>0))
winScrollTo(rep.scrollX,rep.scrollY,w)
else if(rep.scrollSlotH>0 || rep.scrollSlotV>0) 
{
winScrollTo(rep.scrollSlotH,rep.scrollSlotV,w)
rep.scrollSlotH = 0;
rep.scrollSlotV = 0;
}
}
function setPane(key,isRight,expand, force)
{
var leftPane = workbenchW.getPerspective().getLeftPane();
var s=_root+"../dhtmllib/empty.html"
if (!isInteractive&&((key=="dataSum")||(key=="reportelts")||(key=="resultObj")||(key=="filtmap")))
key="reportmap"
if (!isEnableUserRight(WS._usrShowDocInfo) && (key=="docinfo")) key="reportmap"
if (!isEnableUserRight(WS._usrShowDataSummary) && (key=="dataSum")) key="reportmap"
if (!isEnableUserRight(WS._usrShowResultObj) && (key=="resultObj")) key="reportmap"
if (!isEnableUserRight(WS._usrShowFilterMap) && (key=="filtmap")) key="reportmap"
if ((!isEnableUserRight(WS._usrInsertDuplicate) || !isEnableUserRight(WS._usrShowResultObj)) && (key=="reportelts")) key="reportmap"
if (!isEnableUserRight(WS._usrCreateEditReportFilter) && (key=="inputForm")) key="reportmap"
if ( (_UDZ_useCustomPrompts) && (key == "quickFilter")) key="reportmap"
if (key == "advFind") 
key="reportmap"
if (isPDF && key!="docinfo" && key!="quickFilter")
key="quickFilter";
if (!leftPane.isItemDisplayed(key))
{
for (var i=0; i<leftPane.items.length; i++)
{
var val = leftPane.items[i].value;
if (leftPane.isItemDisplayed(val))
{
key = val;
break;
}
}
}
leftPane.valueSelect(key,true,force)
if (expand)
expandPane(isRight)
}
function expandPane(isRight,saveProp)
{
var leftPane = workbenchW.getPerspective().getLeftPane();
WS._showLeftPane=_paneState.normal
var sel=leftPane.getSelection()
setPane(sel?sel.value:WS._leftPaneSel,isRight,false)
if (saveProp)
recordProp(isRight?"CDZ_VIEW_rightPane":"CDZ_VIEW_leftPane","1")
_askConfirmationBeforeClosingDoc = true;
}
function collapsePane()
{
var leftPane = workbenchW.getPerspective().getLeftPane();
var sel=leftPane.getSelection()
if (sel)
WS._leftPaneSel=sel.value
leftPane.valueSelect()
_askConfirmationBeforeClosingDoc = true;
}
function setPanes()
{
if (WS._showLeftPane == _paneState.normal) 
{
setPane(WS._leftPaneSel,false,false)
var sel = workbenchW.getPerspective().getLeftPane().getSelection()
if (sel)
WS._leftPaneSel = sel.value
}
}
function refreshLeftPanelCB(evt1,data) 
{
if (!(WS._showLeftPane==_paneState.normal) || doRefreshOnOpen)
{
if (doRefreshOnOpen)
{
if (!_panesInitalized) 
{
setPanes()
}
_panesInitalized=true
}
return;
}
var leftPane = workbenchW.getPerspective().getLeftPane() 
var lf = leftPane.getFrame();
if(lf == null ) return;
if (!_panesInitalized) 
{
_panesInitalized=true
setPanes()
return;
}
var pane = leftPane.getCurrentPane() 
if(pane == null)
return;
if (WS._leftPaneSel=="filtmap")
{
if ((typeof(fromTreeReportChange)!="undefined") && fromTreeReportChange)
{
fromTreeReportChange = false
return;
}
switch(evt1)
{
case _EVT_WOM_LOADED:
wt(true);
if(lf.refreshView) lf.refreshView();
break;
}
}
else if (WS._leftPaneSel=="docinfo")
{
switch(evt1)
{
case _EVT_DOC_UPDATE:
case _EVT_REFRESH_DATA:
case _EVT_PROMPTS_VALUES_CHANGED:
case _EVT_UNDO_REDO:
case _EVT_PROCESS_SAVE:
case _EVT_PROCESS_QUICK_SAVE:
case _EVT_TDC_CHANGED:
case _EVT_DOC_PROPERTIES:
wt(true);
lf.window.location.replace(pane.url)
break;
}
}
else if (WS._leftPaneSel=="dataSum")
{
switch(evt1)
{
case _EVT_DOC_UPDATE:
case _EVT_REFRESH_DATA:
case _EVT_UNDO_REDO:
case _EVT_VARS_UPDATE:
wt(true);
lf.window.location.replace(pane.url)
break;
}
}
else if (WS._leftPaneSel=="resultObj")
{
switch(evt1)
{
case _EVT_DOC_UPDATE:
case _EVT_REFRESH_DATA:
case _EVT_UNDO_REDO:
case _EVT_VARS_UPDATE:
case _EVT_DRILL_ACTION:
wt(true);
lf.window.location.replace(pane.url)
break;
}
}
else if (WS._leftPaneSel=="inputForm")
{
switch(evt1)
{
case _EVT_REP_SELECTED:
case _EVT_UNDO_REDO:
case _EVT_DOC_UPDATE:
case _EVT_REFRESH_DATA:
case _EVT_REP_DUPLICATED:
case _EVT_REP_DELETED:
case _EVT_REP_ADDED:
case _EVT_DRILL_ON:
case _EVT_DRILL_OFF:
wt(true);
lf.window.location.replace(pane.url)
break;
}
}
}
reportMapStates=newHashTable();
function getRepMapState(sKey)
{
return reportMapStates.get(sKey);
}
function setRepMapState(sKey)
{
var arrExp=new Array();
for (var i=0; i<arrReportMap.length; i++)
{
if (arrReportMap[i][8])
arrExp[arrExp.length]=arrReportMap[i][0].valueOf();
}
reportMapStates.put(sKey,arrExp);
}
function createBorderElement(id,x,y,w,h,url,border)
{
return '<div id="'+id+'" style="overflow:hidden;position:absolute;' +
(border ? ("border:" + border  + ";") : "") +
"width:" +(Math.max(0, Math.round(w)))+"px;" +
"height:" +(Math.max(0, Math.round(h)))+"px;" +
"left:" +Math.max(0, (x))+"px;" +
"top:" +Math.max(0, (y))+"px;" +
(url ? backImgOffset(url,0,0) : "") +
'"></div>'
}
function moveBorderElement(id,x,y,w,h)
{
var fr = getReportFrame()
if (fr)
{
if (eval("fr.__" + id) == null)
{
eval("fr.__" + id + "=fr.document.getElementById('"+id+"');" )
}
var lyr = eval("fr.__" + id)
if (lyr)
{
var st=lyr.style
if (w!=null) st.width  = "" +(Math.max(0, Math.round(w)))+"px"
if (h!=null) st.height = "" +(Math.max(0, Math.round(h)))+"px"
if (x!=null) st.left   = "" +(Math.round(x))+"px"
if (y!=null) st.top    = "" +(Math.round(y))+"px"
}
}
}
function displayPageBorders(z)
{
var pageContainer = getPageContainer()
var pageFrame = getPageFrame()
if (pageFrame)
{
var x=pageContainer.offsetLeft
var y=pageContainer.offsetTop
var w=pageContainer.offsetWidth
var h=pageContainer.offsetHeight
pageFrame.innerHTML=createBorderElement("borderSpacer",x+w*z+14,y+h*z+14,1,1) +
createBorderElement("borderRight",x+w*z+1,y+1+7,7,h*z-7+2,_img+"pageright.gif") +
createBorderElement("borderBottom",x+1+7,y+h*z+1,w*z-7+2,7,_img+"pagebottom.gif") +
createBorderElement("borderTopRight",x+w*z+1,y+1,7,7,_img+"pagetopright.gif") +
createBorderElement("borderBottomLeft",x+1,y+h*z+1,7,7,_img+"pagebottomleft.gif") +
createBorderElement("borderBottomRight",x+w*z+1,y+h*z+1,7,7,_img+"pagebottomright.gif") +
createBorderElement("borderContainer",x-1,y-1,w*z+(_ie?2:0),h*z+(_ie?2:0),null,"1px solid #808090")
}
}
function adjustPageBorders()
{
var repInfo= DS.arrReports[getReportIdxFromId(DS.iReportID)]
if (repInfo.pageMode == "Page")
{
var fr = getReportFrame()
if (fr.document.getElementById("borderContainer")==null)
{
displayPageBorders(getZoom())
}
else
{
var pageContainer = getPageContainer()
var pageFrame = getPageFrame()
var z = getZoom()/100
var x=pageContainer.offsetLeft
var y=pageContainer.offsetTop
var w=pageContainer.offsetWidth
var h=pageContainer.offsetHeight
moveBorderElement("borderSpacer",x+w*z+14,y+h*z+14)
moveBorderElement("borderRight",x+w*z+1,y+1+7,7,h*z-7+2)
moveBorderElement("borderBottom",x+1+7,y+h*z+1,w*z-7+2,7)
moveBorderElement("borderTopRight",x+w*z+1,y+1)
moveBorderElement("borderBottomLeft",x+1,y+h*z+1)
moveBorderElement("borderBottomRight",x+w*z+1,y+h*z+1)
moveBorderElement("borderContainer",x-1,y-1,w*z+(_ie?2:0),h*z+(_ie?2:0))
}
}
}
function displayOutline(outlines)
{
if (outlines != null)
{
var len=outlines.length;
}
}
function FoldOrUnfoldPanel()
{
wt();
DS.arrReports[getReportIdxFromId(DS.iReportID)].foldPanel=_foldPanelVisible;
DS.foldPanel=_foldPanelVisible;
var p=urlParams(false,true);
curState--;
if (p!="")
frameNav("Report","setFUFMode"+_appExt+p,true);
}
function setFUFMode()
{
foldPanelVisible = (_foldPanelVisible==1)?0:1;
setFUFIconState();
}
function setFUFIconState()
{
}
function getPageFrame()
{
var fr = getReportFrame()
if (fr)
{
if (fr.__pageFrame == null)
{
fr.__pageFrame = fr.document.getElementById("pageFrame")
}
return fr.__pageFrame
}
else
return null
}
function getPageContainer()
{
var fr = getReportFrame()
if (fr)
{
if (fr.__pageContainer == null)
{
fr.__pageContainer = fr.document.getElementById("pageContainer")
if (isPDF && fr.__pageContainer == null)
fr.__pageContainer = fr.document.body
}
return fr.__pageContainer
}
else
return null
}
function convertX(x)
{
return (getPageContainer().offsetLeft * (1 - getZoom()/100)) + Math.round(x * (getZoom() / 100))
}
function convertY(y)
{
return (getPageContainer().offsetTop * (1 - getZoom()/100)) +  + Math.round(y * (getZoom() / 100))
}
function convertWidth(w)
{
return Math.round(w * (getZoom() / 100))
}
function convertHeight(h)
{
return Math.round(h * (getZoom() / 100))
}
function getForceViewType()
{
var forceViewType=""
if(isPDF) 
forceViewType="P"
else if(isInteractive)
forceViewType="I"
return forceViewType;
}
function resetStatesCB()
{
arrState.length=0
curState=-1
}
function saveStateCB(evt,data)
{
if (!DS.bUndoableAction)
return
var len=arrState.length;
if ((curState>=0) && ((curState+1) <= len) && (arrState[curState].sEntry==DS.strEntry))
return;
if ( (DS.iStorageTokenStackSize > 0) && (len >= DS.iStorageTokenStackSize) )
{
if ((curState+1)< len)
{
curState+=1;
}
else
{
arrayRemove(window,'arrState',0)
}
}
else
{
curState+=1
}
arrState[curState]=newViewerState(DS.strEntry, WS.iViewerID, getReportIdxFromId(DS.iReportID), DS.arrReports)
arrState.length=curState+1
updateUndoRedoAction()
}
function saveSelectedReportCB()
{
if (curState >= 0)
{
var index=parseInt(getReportIdxFromId(DS.iReportID))
arrState[curState].selRep=index
}
}
function saveZoomCB(evt,data)
{
var zoom=parseFloat(data)
DS.arrReports[getReportIdxFromId(DS.iReportID)].zoom=zoom
arrState[curState].arr[getReportIdxFromId(DS.iReportID)].zoom=zoom
adjustPageBorders()
updateSmartPageCB()
}
function savePageCB(evt,data)
{
DS.arrReports[getReportIdxFromId(DS.iReportID)].curPage=DS.iPage
arrState[curState].arr[getReportIdxFromId(DS.iReportID)].curPage=DS.iPage
}
function updateUndoRedoAction()
{
var undo = workbenchW.getAction("undo");
var redo = workbenchW.getAction("redo");
var l=arrState.length
if (curState<1)
undo.setDisabled(true)
else
undo.setDisabled(false)
if (curState==(l-1))
redo.setDisabled(true)
else
redo.setDisabled(false)
}
_runQueryIdx = null;
_bRetrieveData = true ;
function fetchDataCB()
{
if (!isPDF)
{
var otherParams="";
var p=urlParams(false,true)
if (p!="")
{
if(_bRetrieveData)
{
otherParams = "&bNoFetchDataMsg=true";
if(_runQueryIdx!=null) 
    otherParams="&iDPIndex="+_runQueryIdx;
}
else 
{
_bRetrieveData = true; 
}
frameNav("DlgFrame","processDataFetch"+_appExt+p+otherParams)
}
}
}
function updateDPsRowsCB()
{
}
function displayNoDataToFetch(s,cb)
{
showAlertDialog("No data to retrieve in "+s,"Retrieving Data",0,cb);
}
function updateDPsRows(arr)
{
var arrDPsLen = DS.arrDPs.length
if(arr.length != DS.arrDPsLen) return;
for (var i = 0; i < arrDPsLen; i++)
{
DS.arrDPs[i].rows = parseInt(arr[i]);
}
eventManager.notify(_EVT_FETCH_DATA);
}
if(typeof (doRefreshOnOpen) == "undefined") doRefreshOnOpen = false;
function refreshOnOpenCB()
{
if (doRefreshOnOpen)
{
hideIVLoadingStatus();
refreshDocument();
doRefreshOnOpen = false;
}
}
function updateRefreshIcon()
{
if (strDocType=="rep")
{
workbenchW.getAction("refreshDoc").setDisplay(true);
workbenchW.getAction("refreshAll").setDisplay(false);
}
else
{
if (isInteractive)
{
var len =DS.arrDPs.length;
workbenchW.getAction("refreshDoc").setDisplay(len  == 1);
workbenchW.getAction("refreshAll").setDisplay(true);
}
else
{
workbenchW.getAction("refreshAll").setDisplay(true);
workbenchW.getAction("refreshDoc").setDisplay(false);
}
}
}
function updateRefreshIcons()
{
var disableRefreshAll = true;
var len = DS.arrDPs.length;
for (var i=0; i<len; i++)
{
disableRefreshAll = disableRefreshAll && !DS.arrDPs[i].canRefreshDP;
}
workbenchW.getAction("refreshDateStatus").setDisabled(disableRefreshAll); 
workbenchW.getAction("refreshAll").setDisabled(disableRefreshAll);
workbenchW.getAction("refreshDPMenu").setDisabled(disableRefreshAll);
}
if(typeof (doForceRefresh) == "undefined") doForceRefresh = false;
function toRefreshDocument(evt,data)
{
var params = urlParams();
if (params == null || params == "")
params = urlParamsNoBID();
strLocation = "processToRefresh" + _appExt + params + "&dpListToRefresh=" + encodeURIComponent(data);
if (curState>=0)
{
arrState.length=curState;
curState--;
}
launchRefreshWaitDlg("Refreshing Data",true,true,true);
self.ThirdDlgFrame.location.replace(strLocation);
doForceRefresh=false;
}
function drillIcnCB(evt,data)
{
var tabsZone = workbenchW.getPerspective().getNaviBar();
var tab=tabsZone.getTab(getReportIdxFromId(DS.iReportID))
var rep=DS.arrReports[getReportIdxFromId(DS.iReportID)]
switch(evt)
{
case _EVT_DRILL_ON:
rep.repMode='Analysis'
rep.drillBar=WS._showDrillBarPref
rep.drillLite=false
tab.change(getReportTabIcon(rep));
break
case _EVT_DRILL_OFF:
rep.repMode='Viewing'
rep.drillBar=false
rep.drillLite=false
tab.change(getReportTabIcon(rep));
break
case _EVT_DRILL_LITE:
rep.repMode='Analysis'
rep.drillBar=true
rep.drillLite=true
break
default:
break
}
}
function processSaveEventCB() 
{
    if (isInteractive)
    {
updateIsQPModified(false); 
    if (_showQueryPanel) 
    {
    storeReportQueryState(); 
    }   
}
DS.isNew=false;
hideBlockWhileWaitWidget()
}
function updatePageModeMenu(strPageMode)
{
workbenchW.getAction("quickMode").check((strPageMode=="QuickDisplay")&&!isPDF)
workbenchW.getAction("pageMode").check((strPageMode=="Page")&&!isPDF)
workbenchW.getAction("draftMode").check((strPageMode=="Listing")&&!isPDF)
}
function showPageNavigIcons(show)
{
workbenchW.getAction("pageLab").setDisplay(show)
workbenchW.getAction("firstIcn").setDisplay(show)
workbenchW.getAction("previousIcn").setDisplay(show)
workbenchW.getAction("pageNumberStatus").setDisplay(show)
workbenchW.getAction("pageNumber").setDisplay(false)
workbenchW.getAction("maxPage").setDisplay(show)
workbenchW.getAction("nextIcn").setDisplay(show)
workbenchW.getAction("lastIcn").setDisplay(show)
}
function undoRedo(step)
{
if (getReportFrame()) { 
curState=curState+step
}
if (curState < 0) curState=0
var st=arrState[curState]
eventManager.notify(_EVT_UNDO_REDO,st.selRep)
DS.arrReports.length=0
var stArrLen = st.arr.length
for (var i = 0; i < stArrLen; i++) {
DS.arrReports[i] = newReportInfo(st.arr[i].name, st.arr[i].pageMode, st.arr[i].repMode, st.arr[i].nbPage, st.arr[i].curPage, st.arr[i].isLeaf, st.arr[i].zoom, st.arr[i].sc);
DS.arrReports[i].reportID = st.arr[i].reportID;
DS.arrReports[i].drillBar = st.arr[i].drillBar;
DS.arrReports[i].drillLite = st.arr[i].drillLite;
DS.arrReports[i].foldPanel = st.arr[i].foldPanel;
}
eventManager.notify(_EVT_REP_DATAOK)
setFollowObjectInfo(null);
_showDrillBar = st.arr[st.selRep].drillBar
var rep = st.arr[st.selRep], repId = rep.reportID;
var p=urlParams(true,true,st.sEntry,st.iViewerID,repId,
rep.pageMode,rep.repMode,rep.curPage,null,rep.foldPanel)
if (p!="")
{
p+="&sUndoEnabled=false"
setReportUrl(_root+"report"+_appExt+p,true);
}
setTimeout("updateUndoRedoAction()",1)
}
function restoreAfterError()
{
var st=arrState[curState]
if (st!=null)
{
var p=urlParamsNoBID(st.sEntry,st.iViewerID,st.selRep,
st.arr[st.selRep].pageMode,st.arr[st.selRep].repMode,st.arr[st.selRep].curPage)
if (p!="")
{
p+="&sUndoEnabled=false";
frameNav("ThirdDlgFrame","processRestoreAfterError"+_appExt+p,false);
}
eventManager.notify(_EVT_RESTORE_AFTER_ERR)
}
}
function goToAnchor(rWin)
{
var anchor=getQueryParamValue(rWin.location.href, "sAnchor");
if (anchor!='')
{
var theLinks = rWin.document.getElementsByName(anchor)
if (theLinks&&(theLinks.length>0))
{
for (var i=0; i < theLinks.length; i++ )
{
if (theLinks[i].name == anchor)
{
theLinks[i].scrollIntoView();
break;
}
}
}
}
}
function recordProp(key,val)
{
if (isPageLoaded)
{
new Ajax.Request( _root + "ajaxUserPref" + _appExt + "?sKey="+key+"&sVal="+val,  {
        method:'get',        
        onComplete: function(t){
var response = t.responseText || "KO";
manageAjaxError(response.evalJSON(), null, "")
}
    });
}
}
function reportBodyMouseDown()
{
if (!isInteractive && !isPDF)
{
unselectCellInViewing();
selectionChangedInViewing(false);
}
if (!_ie)
return false
}
_longTextAllowed = false
_longTextAr = new Array()
_longTextID = 0
_curLongTextObj = null
function newLongTextObj(dlgTitle,dlgText,header)
{
 var o=new Object
 o.dlgTitle=dlgTitle
 o.dlgText=dlgText
 o.header=header    
 return o
}
function longText(title,value,header,par,frName)
{
var text = ''
if(value == null ) return text; 
header = (header)? header:''
frName = (frName)? frName:''
par= (par) ? par : ''
var descToolTip = value
var maxCharsLine = 60
var maxLines = 3
var maxTextLen = maxLines * maxCharsLine
var txtLen = descToolTip.length
var moreStr = "more..."
if (!_longTextAllowed && (txtLen > maxCharsLine))
{
_longTextAr[_longTextID] = newLongTextObj(title, value, header)
var iter = txtLen / maxCharsLine
var iter = (iter > 3) ? 3 : iter
for (var i = 0; i < iter; i++) 
{
if (i < iter-1)
text += convStr(descToolTip.substring( i*maxCharsLine, (i+1) * maxCharsLine)) + '<br>'
else 
{
var subText = descToolTip.substring( i*maxCharsLine, maxTextLen)
var subTextLen = subText.length
var moreTextLen = moreStr.length + 3 
text += (subTextLen < maxCharsLine) ? convStr(subText) : convStr(subText.substring(0, maxCharsLine-moreTextLen)) + 
' (<span onclick=\''+convStr(_codeWinName)+convStr(par)+'.clickMoreCB(' + (_longTextID++) + ',"'+convStr(frName)+'");return false\'><a class="dlgContent" href="javascript:void(0)"  >' +
convStr(moreStr) + '</a></span>)'
}
}
} 
else 
text = convStr(descToolTip)
text = '<span title="' + convStr(descToolTip, false, true) + '">' + text + '</span>'
return text
}
function clickMoreCB(txtID,frName)
{    
_curLongTextObj = _longTextAr[txtID]
wt()
var frameName=(frName)?frName:'DlgFrame'
var url=(frameName=='DlgFrame')?'':'language/'+_lang+'/html/'
url+='longTextDialog.html'
frameNav(frameName,url)
}
function formatDuration(dur)
{
var ret=new Object
ret.hh=0
ret.mm=0
ret.ss=0
if (dur==null)
return ret
var nbsec=parseInt(dur)
var h,m,s
h=Math.floor(nbsec/3600)
m=Math.floor((nbsec-h*3600)/60)
s=nbsec-h*3600-m*60
ret.hh=h
ret.mm=m
ret.ss=s
return ret
}
function getDeltaDateWithNow(milliS)
{
var labelLessOneMin = "< 1 Minute";
var labelOneMin = "1 Minute";
var labelOneHour = "1 Hour";
var labelOneDay = "1 Day";
var labelOneYear = "1 Year";
var labelMin = "%1 minutes ago";
var labelHours = "%1 hours ago";
var labelDays = "%1 days ago";
var labelYears = "%1 years ago";
if ((milliS == null) || (milliS == 0))
return "";
var nowDate = new Date();
var deltaDate = nowDate.getTime() - DS._lLastRefreshMilliSecDate
var sec = Math.floor(deltaDate/1000);
if (sec <= 60)
return "< 1 minute ago";
var min = Math.floor(deltaDate/60000);
if (min <= 1)
return "1 minute ago";
if (min <= 60)
return labelMin.replace("%1", min);
var hours = Math.floor(deltaDate/3600000);
if (hours <= 1)
return "1 hour ago";
if (hours <= 24)
return labelHours.replace("%1", hours);
var days = Math.floor(deltaDate/86400000);
if (days <= 1)
return "1 day ago";
if (days <= 365)
return labelDays.replace("%1", days);
var refreshDate = new Date(DS._lLastRefreshMilliSecDate);
var years = nowDate.getFullYear() - refreshDate.getFullYear();
if (years <= 1)
return "1 year ago";
return labelYears.replace("%1", years);
}
function updateStatusBarCB()
{
if (!window.DS) return;
var pers = workbenchW.getPerspective();
updateRefreshStatusBar()
updateTDCInfoOnStatusBar()
updatePageWidgetsCB()
}
function reloadReportOnSaveAsCB()
{
var url = "report" + _appExt + urlParamsNoBID();
frameNav("Report",url);
}
function reloadReportCB()
{
setReportUrl("report" + _appExt + urlParamsNoBID(), true);
}
function updateViewActionChecks() {
workbenchW.getAction("switchToView").check(!isInteractive && !isPDF);
workbenchW.getAction("switchToInteractive").check(isInteractive && !isStructure);
workbenchW.getAction("structureView").check(isInteractive && isStructure );
workbenchW.getAction("pdfView").check(isPDF);
}
function updateRefreshStatusBar()
{
var pers = workbenchW.getPerspective();
var refreshDateStatus = workbenchW.getAction("refreshDateStatus")
var iconR = toolboxImg(113);
var iconP = toolboxImg(126);
if (DS.blnPartialResult || DS.hasSampleResult)
{
refreshDateStatus.changeImg(iconP.dx,iconP.dy,iconP.src);
if (refreshDateStatus.items && refreshDateStatus.items.length > 0) {
refreshDateStatus.items[0].disDx=16;
refreshDateStatus.items[0].disDy=416;
}
}
else
{
refreshDateStatus.changeImg(iconR.dx,iconR.dy,iconR.src);
if (refreshDateStatus.items && refreshDateStatus.items.length > 0) {
refreshDateStatus.items[0].disDx=16;
refreshDateStatus.items[0].disDy=208; 
}
}
refreshDateStatus.setText(getDeltaDateWithNow(DS._lLastRefreshMilliSecDate));
var tooltip = '<nobr>' + (convStr(DS.blnPartialResult ? (DS.hasSampleResult ? "Sampled Results   " : "Partial Results   ") : '', true) + convStr("Last refresh on:")) + '</nobr><br><nobr>' + convStr(DS.strLastRefreshDate)+'</nobr>';
refreshDateStatus.setCustomTooltip({isHTML:true,title:"Refresh the data", text:tooltip})
}
function updateTDCInfoOnStatusBar()
{
var pers = workbenchW.getPerspective();
var trackStatus = workbenchW.getAction("trackStatus");
var trackStatusRef = workbenchW.getAction("trackStatusRef")
var display = isEnableUserRight(WS._usrEnableTrackDataChanges)
trackStatus.setDisplay(display);
if (display)
{
var label = "Track changes:";
var tooltip = "";
if (_bTdcActivate)
{
if(_bTDCAutoUpdateDataOnRefresh)
{
label +=" Auto-update" ;
tooltip = "Reference: last refresh"
tooltip += "\n"+_refTDCDate+"\n\n" ;
tooltip += "Click to change data tracking options";
}
else
{
label += " Fixed data";
tooltip = "Reference: fixed date"
tooltip += "\n"+_refTDCDate+"\n\n" ;
tooltip += "Click to change data tracking options";
}
}
else
{
label += " Off"
tooltip = "Click to activate data tracking"
}
trackStatus.setText(label);
trackStatus.setCustomTooltip({title:"Track data changes",text:tooltip});
}
}
function updateTDCToolbar()
{
if (!isEnableUserRight(WS._usrEnableTrackDataChanges))
{
workbenchW.getAction("tdcReadingMenu").setDisabled(true)
workbenchW.getAction("tdcOnOff").setDisabled(true)
workbenchW.getAction("tdcMenu").setDisabled(true)
workbenchW.getAction("tdcShowChanges").setDisplay(false)
workbenchW.getAction("tdcOptions").setDisplay(false)
return
}
var reportId=DS.iReportID, rep = getReportFromId(reportId), show = rep.sc
workbenchW.getAction("tdcOnOff").check(_bTdcActivate);
workbenchW.getAction("tdcReadingMenu").updateRadioBtn(_bTdcActivate);
workbenchW.getAction("tdcMenu").updateRadioBtn(show);
workbenchW.getAction("tdcShowChanges").check(show);
workbenchW.getAction("tdcReadingMenu").setDisabled(false)
workbenchW.getAction("tdcOnOff").setDisabled(false)
workbenchW.getAction("tdcMenu").setDisabled(!_bTdcActivate)
workbenchW.getAction("tdcShowChanges").setDisabled(!_bTdcActivate)
workbenchW.getAction("tdcOptions").setDisabled(!_bTdcActivate)
updateTDCInfoOnStatusBar();
}
function refreshDocument(iDataProvider,bCheckPDP, bRefreshAllowedMDP)
{
strDlgTitle="Refreshing Data";
iDataProvider=(iDataProvider!=null)?iDataProvider:null;
_runQueryIdx = iDataProvider; 
setFollowObjectInfo(null);
var strLocation = "refreshDocument"+_appExt+urlParamsNoBID(null,null,null,null,null,1)+"&nbPage=NaN"+"&sEmptyLab="+encodeURIComponent(_emptyValueLab);
if (doRefreshOnOpen)
strLocation += "&sUndoEnabled=false&bRefreshOnOpen=true";
if(bRefreshAllowedMDP)
strLocation+="&allowedMDPRefresh=true";
if(_runQueryIdx!=null)
    strLocation+="&iDPIndex="+_runQueryIdx;
if (WS.bLaunchQP==true)
{
strLocation+="&sNewDoc=true";
self.DlgFrame.location=strLocation;
}
else
{
if (DS.blnNeedAnswerCP)
{
if (isPDF)
{
var cancelKey="CP"+allUseDictionary.size();
var cancelValue=getFrame("Report").location.href;
allUseDictionary.put(cancelKey,cancelValue);
strLocation+="&sCancel="+cancelKey;
}
launchRefreshWaitDlg("Refreshing Data",false,false,false);
}
else
{
eventManager.notify(_EVT_REFRESH_DATA);
launchRefreshWaitDlg("Refreshing Data",true,true,true);
}
if (isPDF)
strLocation+="&viewType=P";
self.DlgFrame.location.replace(strLocation);
}
}
_bRefreshDocument=true;
function launchRefreshWaitDlg(strDlgTitle,blnCancelQuery,blnShowProgress,blnShowLabel,bInRunQuery)
{
strDlgTitle=strDlgTitle.replace(/"/g,"\\"+"\"");
var strLabel="Last refresh time: %h%h %m%m %s%s";
var strFuncPrototype="";
if (typeof(DS.lastRefreshDuration)=="undefined")
{
strLabel = "This document has never been refreshed.";
strFuncPrototype="showWaitDlg(\""+strDlgTitle+"\","+((blnCancelQuery)?"true":"false")+"," + "cancelQueryCB"+",false,0,true,\""+strLabel+"\")";
}
else
{
var lastRDms = (DS.lastRefreshDuration * 1000).toString();
var ret=formatDuration(DS.lastRefreshDuration.toString())
strLabel=strLabel.replace(/%h%/g,ret.hh);
strLabel=strLabel.replace(/%m%/g,ret.mm);
strLabel=strLabel.replace(/%s%/g,ret.ss);
strLabel=strLabel.replace(/"/g,"\\"+"\"");
strFuncPrototype="showWaitDlg(\""+strDlgTitle+"\","+((blnCancelQuery)?"true":"false")+"," + "cancelQueryCB" +","+((blnShowProgress)?"true":"false")+","+lastRDms+','+((blnShowProgress)?"true":"false")+",\""+strLabel+"\")";
}
eval(strFuncPrototype);
_bRefreshDocument = bInRunQuery? false:true;
}
function cancelQueryCB()
{
var action = _bRefreshDocument?"refresh":"runquery"
self.ThirdDlgFrame.location="cancelQuery"+_appExt+urlParamsNoBID()+"&action="+action;
}
newObserverOneEvent(_EVT_PROMPTS_LOADED, promptsLoadedCB);
function promptsLoadedCB()
{
if(_cancelRefreshOptions != null)
{
_cancelRefreshOptions.show(false);
}
}
function cancelRefreshCB ()
{
var action = _bRefreshDocument?"refresh":"runquery";
var prms = new Object();
prms.parent = this;
prms.applyCancelCB= applyCancelCB;
prms.action = action;
if(_cancelRefreshOptions == null)
{
_cancelRefreshOptions = new  CancelRefreshOptions(prms);
_cancelRefreshOptions.init();
}
_cancelRefreshOptions.show(true);
}
function applyCancelCB(prms)
{
var o = this.userData;
self.ThirdDlgFrame.location="cancelQuery"+_appExt+urlParamsNoBID()+"&action="+prms.action+prms.urlEx;
}
function allowedMDPRefresh()
{
hideWaitDlg();
showPromptDialog("You do not have access to one or more data providers. Only the data providers to which you have access will be refreshed. Do you want to continue? (Error: ERR_WIS_30286)","Refreshing Data",1,sectYesRAllowedMDPCB,sectNoRAllowedMDPCB);
}
function sectYesRAllowedMDPCB()
{
refreshDocument(null,null,true);
}
function sectNoRAllowedMDPCB()
{
}
function showWaitDlg(title,showCancel,cancelCB,showUPB,duration,showLabel,text)
{
if (waitDlg==null)
{
waitDlg=newWaitDialogBoxWidget("waitDlg",250,150)
targetApp(waitDlg.getHTML());
waitDlg.init()
}
waitDlg.setTitle(title)
waitDlg.setShowCancel(showCancel,cancelCB)
waitDlg.setShowUPB(showUPB,duration)
waitDlg.setShowLabel(showLabel,text)
if (waitTimeoutID!=null)
clearTimeout(waitTimeoutID)
waitTimeoutID=setTimeout('waitDlg.show(true)',1)
ping();
}
function showWaitDlgQP (title,showCancel,cancelCB,showUPB,duration,showLabel,text, userData)
{
if (waitDlg==null)
{
waitDlg=newWaitDialogBoxWidget("waitDlg",250,150)
targetApp(waitDlg.getHTML());
waitDlg.init()
}
waitDlg.setTitle(title)
waitDlg.setShowCancel(showCancel,cancelCB)
waitDlg.setShowUPB(showUPB,duration)
waitDlg.setShowLabel(showLabel,text)
waitDlg.userData = userData;
if (waitTimeoutID!=null)
clearTimeout(waitTimeoutID)
waitTimeoutID=setTimeout('waitDlg.show(true)',1)
ping();
}
function hideWaitDlg()
{
if ((waitDlg!=null)&&(waitTimeoutID!=null))
{
clearTimeout(waitTimeoutID)
clearInterval(ping_waitTimeoutID);
waitTimeoutID=null
waitDlg.show(false)
}
}
ping_waitTimeoutID=null;
function ping()
{
ping_waitTimeoutID=setInterval("checkTheConnectionn()",20000);
}
function checkTheConnectionn()
{
var newDate = new Date;
var uniqid = newDate.getTime();
var url = _root + "html/empty.html?" + uniqid;
var http_req=new XMLHttpRequest();
if (http_req!=null)
{
try
{
http_req.onreadystatechange=function()
{
if (http_req.readyState==4)
{
if (http_req.status!=200)
{
hideWaitDlg();
showAlertDialog("BI launch pad cannot connect to the server. Close the report panel and try to connect again or see your BusinessObjects administrator.","Ping",2,null);
}
}
}
http_req.open("GET",url,true)
http_req.send(null)
}
catch(fail)
{
hideWaitDlg();
showAlertDialog("BI launch pad cannot connect to the server. Close the report panel and try to connect again or see your BusinessObjects administrator.","Ping",2,null);
}
}
}
function showTdcPromptDialog(msg,title,iPromptType,yesCB,noCB, yesText, noText, width, height) 
{
if (!window.tdcpromptDlg) {
tdcpromptDlg=newPromptDialog("tdcpromptDlg",title,msg,yesText,noText,_promptDlgInfo, yesCB, noCB, true, width, height)
targetApp(tdcpromptDlg.getHTML());
tdcpromptDlg.init()
}
tdcpromptDlg.setText(msg);
tdcpromptDlg.setTitle(title);
tdcpromptDlg.setPromptType(iPromptType);
tdcpromptDlg.yesCB=yesCB
tdcpromptDlg.noCB=noCB
tdcpromptDlg.getOKBtn().setText(yesText);
tdcpromptDlg.getCancelBtn().setText(noText);
tdcpromptDlg.show(true)
}
function deactivateTDC()
{
wt()
eventManager.notify(_EVT_TDC_CHANGED);
var p=urlParamsNoBID()
setReportUrl("processTrackDataChanges" + _appExt + p + "&sEnableTdc=false", true);
}
function cancelDeactivateTDC()
{
workbenchW.getAction("tdcOnOff").check(_bTdcActivate);
workbenchW.getAction("tdcReadingMenu").updateRadioBtn(_bTdcActivate);
}
function processShowChangesTDC(show) 
{
wt()
var p=urlParamsNoBID()
if (p != "") 
{
eventManager.notify(_EVT_TDC_CHANGED);
setReportUrl("processTrackDataChanges" + _appExt + p + "&sShowCurrentReportChanges=" +show, true);
}
}
function invokeTDCOptionDlg(tabIndex)
{
wt()
frameNav("DlgFrame","language/"+_lang+"/html/applyTDCOptions.html?tabIndex="+tabIndex)
}
function showHideReportFilterBar()
{
wt();
if (_bDrillMode) 
{
DS.arrReports[getReportIdxFromId(DS.iReportID)].drillBar=_showDrillBar
var p=urlParams(false,true)
if (p!="")
setReportUrl("report"+_appExt+p,true);
}
else 
{
if(_showDrillBar)
eventManager.notify(_EVT_DRILL_LITE);
else
eventManager.notify(_EVT_DRILL_OFF);
var p=urlParams(false,true)
if (p!="")
setReportUrl("processDrill"+_appExt+p+"&sDrillMode="+(_showDrillBar?"drilllite":""))
}
}
function drillNav()
{
if (DS.strReportMode == "Viewing")
{
DS.strReportMode = "Analysis";
_bDrillMode = true;
eventManager.notify(_EVT_DRILL_ON);
}
else 
{
if (_bReportDrillLite) 
{
_bDrillMode = true;
eventManager.notify(_EVT_DRILL_ON)
}
else 
{
DS.strReportMode = "Viewing"
_bDrillMode = false;
eventManager.notify(_EVT_DRILL_OFF)
}
}
wt()
var p=urlParams(false,true)
if (p!="")
{
setReportUrl("processDrill"+_appExt+p+"&sDrillMode="+(_bDrillMode?"drill":""))
}
}
function getSnapshot() 
{
var p=urlParams(false,true);
if (p!="")
{
p+= "&nbPage=" + DS.nbPage
setReportUrl("processSnapShot"+_appExt+p)
}
}
_drillInfo=new Object
_drillOverInfo=null;
_drillPathInfo=null
idxAction=0
idxHID=1
idxHName=2
idxDimID=3
idxDimName=4
idxScopeFlag=5
_arrAmbiguousDim=null
function findDrillPath(drillPathID,arr)
{
if(!drillPathID) return null;
for(i = 0 ;i < arr.length; i++) 
{
if(arr[i].id== drillPathID)
return arr[i];
}
return null;
}
_drillContextMenu = null
function initdrillContextMenu(m)
{
var disableDrill = !isEnableUserRight(WS._usrEditDocumentFormatting)
if (null == m) {
if (null == _drillContextMenu) { 
m = _drillContextMenu = new_MenuWidget({id:"drillMenu"})
var dM = webi.viewing["drillMenu"]
for (var i = 0; i < dM.length; i++) {
if (dM[i].type=="separator") {
m.addSeparator()
}
else {
m.add(dM[i].id, dM[i].text, drillCB, null, null, null, disableDrill)
}
}
} else {
m = _drillContextMenu
}
} else {
if (null == m.getItemByID("drill")) {
m.addSeparator()
var dM = webi.viewing["drillMenu"]
for (var i = 0; i < dM.length; i++) {
if (dM[i].type=="separator") {
m.addSeparator()
}
else {
m.add(dM[i].id, dM[i].text, drillCB, null, null, null, disableDrill);
}
}
}
}
if (m.getItemByID("drill") != null)
{
m.getItemByID("drill").setText(_bDrillMode?"Stop Drill":"Start Drill")
var drillBy = m.getItemByID("drillBy")
if (drillBy) drillBy.setDisplay(true)
if (drillBy) drillBy.setDisabled(true)
if (_bDrillMode && _bodrillMenuInfo) {
generateDrillByMenu(drillBy)
generateDrillMenu('up', m)
generateDrillMenu('down', m)
} else {
if (drillBy) drillBy.setDisplay(false)
m.getItemByID("drillUp").setDisplay(false)
m.getItemByID("drillDown").setDisplay(false)
var dusm = m.getItemByID("drillUpSubMenu")
if (dusm) dusm.setDisplay(false)
var ddsm = m.getItemByID("drillDownSubMenu")
if (ddsm) ddsm.setDisplay(false)
}
}
}
function buildChildMenuItems(m, ecM)
{
var menu2 = new_MenuWidget({id: ecM.id, text:ecM.text})
var ecMChild = ecM.children
for (var i = 0; i < ecMChild.length; i++)
{
var menuItem1;
if (ecMChild[i].defaultType=="check")
menuItem1=menu2.addCheck(ecMChild[i].id,ecMChild[i].text,generateExpandCollapseCB,null,null,null,false,null,null,null,null,ecMChild[i].actionId)
else
menuItem1=menu2.add(ecMChild[i].id,ecMChild[i].text,generateExpandCollapseCB,null,null,null,false,null,null,null,null,ecMChild[i].actionId)
if (ecMChild[i].children)
{
buildChildMenuItems(menuItem1, ecMChild[i])
}
m.attachSubMenu(menu2) 
} 
}
_expandCollapseContextMenu=null
_ChartExpandCollapseContextMenu=null
function initExpandCollapseContextMenu(m, elt)
{
if (null == m)
{
var currentContextualMenu = (_ExpColChartZoneInfo)?_ChartExpandCollapseContextMenu:_expandCollapseContextMenu
if (null == currentContextualMenu)
{ 
m = currentContextualMenu = new_MenuWidget({
id: (_ExpColChartZoneInfo)?"chartExpandCollapseMenu":"expandCollapseMenu"
})
var ecM = (_ExpColChartZoneInfo)?webi.viewing["chartExpandCollapseMenu"]: webi.viewing["expandCollapseMenu"]
for (var i = 0; i < ecM.length; i++)
{
var menuItem1 = null;
if(ecM[i].id =="drill")
{
var icon = toolboxImg(118)
menuItem1 = m.add(ecM[i].id,ecM[i].text,drillCB ,icon.src,icon.dx,icon.dy,false,icon.disDx,icon.disDy,null,null,ecM[i].actionId)
}
else
menuItem1 = m.add(ecM[i].id,ecM[i].text,generateExpandCollapseCB,null,null,null,false,null,null,null,null,ecM[i].actionId)
if (ecM[i].children)
{
buildChildMenuItems(menuItem1, ecM[i])
}
(_ExpColChartZoneInfo)?_ChartExpandCollapseContextMenu = m:_expandCollapseContextMenu = m
}
}
else
{
m = currentContextualMenu;
}
var drillItem = m.getItemByID("drill")
if(drillItem)
drillItem.setText(_bDrillMode?"Stop Drill":"Start Drill")
}
if(_ExpColChartZoneInfo)
{
var chartSubMenu=(isInteractive)?m.getItemByActionId("chartHierarchicalNavig"):m.getItemByID("chartHierarchicalNavig");
if(chartSubMenu && chartSubMenu.sub)
updateHierarchicalNavSubMenuItems(chartSubMenu.sub,null)
}
else
{
var isExpCollapseCell = (_curExpandColInfo!=null)?true:false; 
var isHierachicalBlock = false; 
if (null != getBlockFromTableCell(elt))
isHierachicalBlock = getBlockFromTableCell(elt).hasHierarchy;
var tableSubMenu=(isInteractive)?m.getItemByActionId("tableHierarchicalNavig"):m.getItemByID("tableHierarchicalNavig");
tableSubMenu.setDisplay(isExpCollapseCell);
if(isExpCollapseCell)
{
var subTabHierarchy =  tableSubMenu.sub
if (subTabHierarchy.getItemByID("expandChildren"))
subTabHierarchy.getItemByID("expandChildren").show(isExpCollapseCell);
if (subTabHierarchy.getItemByID("expandDescendent"))
subTabHierarchy.getItemByID("expandDescendent").show(isExpCollapseCell);
if (subTabHierarchy.getItemByID("collapseChildren"))
subTabHierarchy.getItemByID("collapseChildren").show(isExpCollapseCell);
if (subTabHierarchy.getItemByActionId("symetric"))
subTabHierarchy.getItemByActionId("symetric").show(isExpCollapseCell);
if (subTabHierarchy.getItemByActionId("expandCollapseAll"))
subTabHierarchy.getItemByActionId("expandCollapseAll").show(isExpCollapseCell||isHierachicalBlock);
if (subTabHierarchy.getItemByID("drillFocus"))
subTabHierarchy.getItemByID("drillFocus").show(isExpCollapseCell);
if (subTabHierarchy.getItemByActionId("expandLevel"))
subTabHierarchy.getItemByActionId("expandLevel").show(isExpCollapseCell);
var canExpand = (_curExpandColInfo.action == "EXPAND");
var isLeaf = (null != _curExpandColInfo.ms) && ("." == _curExpandColInfo.ms);
subTabHierarchy.getItemByID("expandChildren").setDisabled(!canExpand || isLeaf);
subTabHierarchy.getItemByID("expandDescendent").setDisabled(!canExpand || isLeaf);
subTabHierarchy.getItemByID("collapseChildren").setDisabled(canExpand || isLeaf);
if (null != subTabHierarchy.getItemByID("symetric"))
{
var hasPreviousHier = false
if (!isLeaf) {
if (elt)
hasPreviousHier = hasPreviousHierarchy(elt)
else
{
setTimeout(function() {
if (elt.isRow) {
var n = elt.row
var objs = getRowsOrCols(elt, true).vars 
for (var i=0; i < n; i++) {
if ("HIERARCHY" == objs[i].kind) return true
}
}
if (elt.isCol && ("form" != elt.parent.parent.blockType)) {
var n = elt.col
var objs = getRowsOrCols(elt, false).vars 
for (var i=0; i < n; i++) {
if ("HIERARCHY" == objs[i].kind) return true
}
}
return hasPreviousHierInSection(elt.parent.parent)
return false
}, 500);
}
}
subTabHierarchy.getItemByID("symetric").setDisabled(isLeaf || !hasPreviousHier);
var symetricMenu = subTabHierarchy.getItemByID("symetric").sub
symetricMenu.getItemByID("symetricExpandChildren").setDisabled(!canExpand || isLeaf || !hasPreviousHier);
symetricMenu.getItemByID("symetricExpandDescendent").setDisabled(!canExpand || isLeaf || !hasPreviousHier);
symetricMenu.getItemByID("symetricCollapseChildren").setDisabled(canExpand || isLeaf || !hasPreviousHier);
}
var ec_drillSubMenu = subTabHierarchy.getItemByID("drillFocus").sub;
var canDrillUp = null  != _curExpandColInfo.mpid;
ec_drillSubMenu.getItemByID("ecDrillUp").setDisabled(!canDrillUp);
ec_drillSubMenu.getItemByID("ecDrillDown").setDisabled(isLeaf);
var expandMenu = subTabHierarchy.getItemByID("expandLevel").sub
expandMenu.beforeShowCB = getDefaultExpandedLevel
}
}
}
function hasPreviousHierarchy(elt) {
if (elt.isRow) {
var n = elt.row
var objs = getRowsOrCols(elt, true).vars 
for (var i=0; i < n; i++) {
if ("HIERARCHY" == objs[i].kind) return true
}
}
if (elt.isCol && ("form" != elt.parent.parent.blockType)) {
var n = elt.col
var objs = getRowsOrCols(elt, false).vars 
for (var i=0; i < n; i++) {
if ("HIERARCHY" == objs[i].kind) return true
}
}
return hasPreviousHierInSection(elt.parent.parent)
return false
}
function hasPreviousHierInSection(elt) {
if ((null == elt) || (null == elt.parent) || (null == elt.parent.parent)) return false
if ("section" != elt.parent.parent.className) return false
var section = elt.parent.parent
var objs = null
for (var i=0; i < section.axis.length; i++) {
if ("row" == section.axis[i].name) {  
kinds =  section.axis[i].kinds 
}
}
if ("HIERARCHY" == kinds[0]) return true
return hasPreviousHierInSection(section)
}
function getRowsOrCols(elt, isRow) {
var name = isRow?"col":"row"
var block =  elt.parent.parent
if ("form" == block.blockType) {
name = "row"
}
for (var i=0; i < block.axis.length; i++) {
if (name == block.axis[i].name) {  
return block.axis[i]
}
}
return null
}
function generateDrillMenu(action, m)
{
initDrillInfo(_bodrillMenuInfo, action, _bodrillMenuInfo.bid, _bodrillMenuInfo.pBid)
var text, menuItem, menuSubItem 
if (action == 'up') {
text = "Drill Up to"
menuItem = m.getItemByID("drillUp")
menuSubItem = m.getItemByID("drillUpSubMenu")
} else if (action == 'down') {
text = "Drill Down to"
menuItem = m.getItemByID("drillDown")
menuSubItem = m.getItemByID("drillDownSubMenu")
}
var len = 0, dimToName = null
if (_curDrillInfo != null) {
dimToName = _curDrillInfo.dimToName
len = dimToName.length
}
if (len == 0)
{
menuItem.setText(text)
menuItem.setDisabled(true)
menuItem.setDisplay(true)
if (menuSubItem) {
menuSubItem.setDisplay(false)
}
}
else if (len == 1) 
{
menuItem.setDisabled(false)
menuItem.setDisplay(true)
text = text + ' ' + dimToName[0] 
if (_curDrillInfo.outOfScope) {
text += ' (New Query)'
}
menuItem.setText(text)
if (menuSubItem) {
menuSubItem.setDisplay(false)
}
}
else 
{
menuItem.setDisplay(true)
menuItem.setDisabled(false)
var toNames = ' '
for (var i = 0; i < len; i++) {
toNames += dimToName[i] 
if (i < (len-1)) {
toNames +=  ", "
}
}
text += toNames
if (_curDrillInfo.outOfScope) {
text += ' (New Query)'
}
menuItem.setText(text)
if (menuSubItem) {
menuSubItem.setDisplay(false)
}
}
}
function initdrillDimensionMenu()
{
var m=this,mlen = m.items.length 
var menuHID = m.par.Hid, HID='', HName='', DName='', DimID=''
var db = _curDrillByInfo, dblen = db.length
if (dblen==0) return;
var dims = null
for (var i=0; i < dblen; i++)
{
HID = db[i].key
if (HID == menuHID)
{
dims = db[i].dimensions
break
}
}
var dimlen = dims.length 
if (dimlen > mlen) 
{
for (var i=mlen; i < dimlen; i++)
{
m.add('dDim'+i, "", drillCB);
}
}
var idxD=0
for (; idxD < dimlen; idxD++) {
DimID = dims[idxD].key
DName = dims[idxD].caption
var menuItem = m.getItem(idxD) 
menuItem.show(true)
menuItem.setText(DName)
menuItem.drillvalue = DimID
menuItem.drillHvalue = HID
}
if (idxD < mlen) 
{
for (; idxD < mlen; idxD++)
m.getItem(idxD).show(false)
}
}
_curDrillByInfo = null
drillByHMenu = null
drillDimMenu = null
function generateDrillByMenu(drillByItem)
{
if (!drillByItem) return
var db = _curDrillByInfo = initDrillByInfo(_bodrillMenuInfo.cid)
var len = (null != db)?db.length:0
var disableDrill = !isEnableUserRight(WS._usrEditDocumentFormatting)
if (disableDrill) {
drillByItem.setDisplay(true)
drillByItem.setDisabled(true)
return
}
if (len == 0)
{
drillByItem.setDisplay(true)
drillByItem.setDisabled(true)
return;
}
drillByHMenu = drillByItem.sub
if (null == drillByHMenu) {
drillByHMenu = new_MenuWidget({id:"drillByHMenu"})
drillByItem.attachSubMenu(drillByHMenu)
}
if (null == drillDimMenu) {
drillDimMenu = new_MenuWidget({id:"drillDimMenu", beforeShowCB:initdrillDimensionMenu})
}
var mHlen = drillByHMenu.items.length
if (len > mHlen) 
{
var countH = (len - mHlen) 
for (var i = mHlen; i <= countH; i++)
{
drillByHMenu.add('dbH'+i, "");
drillByHMenu.getItemByID('dbH'+i).attachSubMenu(drillDimMenu);
}
}
for (var idxH = 0; idxH < len; idxH++) 
{
var txt = db[idxH].caption
if (db[idxH].dpname) {
txt += "(" + db[idxH].dpname + ")"
}
drillByHMenu.getItem(idxH).setText(txt)
drillByHMenu.getItem(idxH).Hid = db[idxH].key
drillByHMenu.getItem(idxH).show(true)
}
mHlen = drillByHMenu.items.length
if (len < mHlen) 
{
for (var idxH = len; idxH < mHlen; idxH++) { 
drillByHMenu.getItem(idxH).show(false)
}
}
drillByItem.setDisabled(false)
drillByItem.setDisplay(true)
}
_firstOutOfScopeDrillTDC=true
function drillCB(id, checkTDC)
{
var disableDrill = !isEnableUserRight(WS._usrEditDocumentFormatting)
if (disableDrill)
return
var action=id?id:this.id
var checkTDC=checkTDC?true:false
switch(action)
{
case "drill":
_showDrillBar = !_bDrillMode?WS._showDrillBarPref:false;
drillNav()
break;
case "up":
case "drillUp":
initDrillInfo(_bodrillMenuInfo, "up", _bodrillMenuInfo.bid, _bodrillMenuInfo.pBid)
generateDrill()
break;
case "down":
case "drillDown":
initDrillInfo(_bodrillMenuInfo, "down", _bodrillMenuInfo.bid, _bodrillMenuInfo.pBid)
generateDrill()
break;
default:
if(id)  
return showAlertDialog("Drill action is not possible","Drill",2,null);
var dimID = this.drillvalue, hID=this.drillHvalue, sDrillAction , action=this.par.par.id 
if(action=='drillDownSubMenu') 
{
sDrillAction='down'
}
else if( action=='drillUpSubMenu') 
{
sDrillAction='up'
}
else  
{
sDrillAction='by'
}
initDrillInfo(_bodrillMenuInfo, sDrillAction, _bodrillMenuInfo.bid, _bodrillMenuInfo.pBid, dimID, hID)
generateDrill()
break
}
}
_drillSDKURL="executeDrillAction.jsp"
_drillTargetFrame=null;
_firstOutOfScopeDrillTDC=true
var _curDrillInfoStatic= null 
function generateDrill(checkTDC)
{
updateParentIdRefBid();
if (_curDrillInfo == null) return
var checkTDC = checkTDC?true:false
var drillInfo = _curDrillInfoStatic = _curDrillInfo
if (drillInfo.ambDrill)
{
frameNav("DlgFrame","language/"+_lang+"/html/ambiguousDrillDialog.html")
return
}
else
{
if (_firstOutOfScopeDrillTDC && _bTdcActivate && !checkTDC && _curDrillInfo.outOfScope)
{
showPromptDialog("This action will modify the query, and data changes can be tracked only when the query remains the same. If you modify the query, the reference data will be lost and changed data will not be visible until the next refresh. Do you want to continue?","Deactivate Data Tracking",1, "_firstOutOfScopeDrillTDC=false; generateDrill(true);")
return
}
}
if (_curDrillInfo.outOfScope && (WS._promptDrillOutScope=='Y') && !DS.bUseQueryDrill) {
   _drillTargetFrame="DlgFrame"
} else {
_drillTargetFrame= "_parent"
}
var newDrillURL = _drillSDKURL + urlParamsNoBID() + "&sDrillAction=yes"
var cancelKey="DL"+allUseDictionary.size()
var rf = getReportFrame(); 
var previousURL=(rf.Reportbloc)?rf.Reportbloc.location.href:rf.location.href
var iPos=previousURL.indexOf('?')
if (iPos>-1)
{
var urlBase=previousURL.substring(0,iPos)
var queryString=previousURL.substring(iPos+1)
queryString=removeQueryParameter(queryString, "sRequestNewReport")
iPos=urlBase.lastIndexOf('/')
urlBase=(iPos>-1)?urlBase.substring(0,iPos+1):""
previousURL=urlBase+"report"+_appExt+"?"+queryString
}
allUseDictionary.put(cancelKey,previousURL)
newDrillURL += "&sCancel=" + cancelKey
var FormStr = '<FORM ID="Form2SDKDRILL" NAME="Form2SDKDRILL" ACTION="' + newDrillURL +'" METHOD="POST" TARGET="' + _drillTargetFrame + '">' + 
'<INPUT TYPE="hidden" NAME="action" VALUE="'+ drillInfo.action + '"></INPUT>' + 
'<INPUT TYPE="hidden" NAME="block" VALUE="' + drillInfo.pBid + '"></INPUT>'
for (var i = 0; i < drillInfo.dimFrom.length; i++) {
FormStr += '<INPUT TYPE="hidden" NAME="from" VALUE="' + drillInfo.dimFrom[i] + '"></INPUT>';
}
for (var i = 0; i < drillInfo.filter.length; i++) {
FormStr += '<INPUT TYPE="hidden" NAME="filter" VALUE="' + convStr(drillInfo.filter[i]) + '"></INPUT>';
}
for (var i = 0; i < drillInfo.dimTo.length; i++) {
FormStr += '<INPUT TYPE="hidden" NAME="to" VALUE="' + drillInfo.dimTo[i] + '"></INPUT>';
}
for (var i = 0; i < drillInfo.hID.length; i++) {
FormStr +='<INPUT TYPE="hidden" NAME="hier" VALUE="' + drillInfo.hID[i] + '"></INPUT>';
}
FormStr +='</FORM>';
var fr=getReportFrame()
if (fr==null) return
var drillForm = fr.document.getElementById("Form2SDKDRILL");
if (drillForm!=null)
fr.document.body.removeChild(drillForm)
append(fr.document.body, FormStr, fr.document)
eventManager.notify(_EVT_DRILL_ACTION)
wt()
saveScrollingInfo()
drillForm = fr.document.getElementById("Form2SDKDRILL");
drillForm.submit();
}
_drillTooltip = null
_drillPreviousTextDecoration = null
_drillPreviousLayerStyle = null
_drillDownIconUrl = _img + "drillDown." + (_ie?"ico":"png")
function updateDrillOnMouseOverOrFocus(layer, useCustomTooltip, e)
{
var o = layer
if (!o) return
_curDrillInfo = null
_bodrill = o.getAttribute("drill")
if (_bodrill)
{
var bid = getElementOrParentBid(o)
var dataCtxt = isStructure?getDrillDataCtxtFromBid(bid):getDrillDataCtxt( getElementOrParentIdref(o))
if (!dataCtxt) return
var action = ''
if (o.tagName == "IMG") {
action = "up"
}
var tooltip=''
initDrillInfo(dataCtxt, action, bid, getBlockBid(bid, o))
if (_curDrillInfo == null) return
var dimToName = _curDrillInfo.dimToName
var len=dimToName?dimToName.length:0
if (len < 1) return
action = _curDrillInfo.action
if (action == 'up') {
o.style.cursor = _hand
tooltip="Drill Up to"
} else if (action == 'down') {
o.style.cursor = "url(" + _drillDownIconUrl + ")," + _hand
tooltip="Drill Down to"
}
tooltip += ' '
if (!_curDrillInfo.ambDrill) { 
for (var d = 0; d < len; d++) {
tooltip += dimToName[d]
if (d < (len - 1)) {
tooltip += ", "
}
}
}                           
  if (_curDrillInfo.outOfScope) {
  tooltip += ' ' + '(New Query)'
  }
if (useCustomTooltip)
{
var fr = getParentWindow(o), e = _ie?fr.event:e
setReportTooltipOffset(fr);
if (null == _drillTooltip) {
_drillTooltip = new_TooltipWidget({"id":"drillTooltip"})
}
if (tooltip != '') {
_drillTooltip.show(true,'<nobr style="padding:2px;">'+tooltip+'</nobr>',null,16,16,0,0,true,e)
} else {
_drillTooltip.show(false)
}
}
else {
layer.title = HTMLtoText(tooltip)
}
o.directDrill=true
_drillPreviousTextDecoration = o.style.textDecoration 
o.style.textDecoration = "underline " + _drillPreviousTextDecoration
_drillPreviousLayerStyle = o.style
} 
}
function hideDrillTooltip()
{
if (null != _drillTooltip) {
_drillTooltip.show(false)
}
}
function drillOverCB(e)
{
updateDrillOnMouseOverOrFocus(this, true, e)
}
function drillOutCB()
{
var o=this
if (_drillTooltip) {
_drillTooltip.show(false)
}
if (!o.directDrill) return
if (null != _drillPreviousLayerStyle) {
_drillPreviousLayerStyle.textDecoration = _drillPreviousTextDecoration
}
}
function getChildHierarchicalAction(curElement)
{
var action = null;
while (curElement !=null)
{
curElement = curElement.firstChild
if (curElement && curElement.attributes ) {
action = curElement.getAttribute("ms") ? curElement.getAttribute("ms") : null
}
}
return action; 
}
function isChartBlock(l)
{
if(l)
{
var plugin_name = l.getAttribute?l.getAttribute("plugin_name"):null
return "com.sap.webi.cvom" == plugin_name
}
return false
}
function resetExpColChartZoneInfo()
{
_ExpColChartZoneInfo = null;
_ExpColChartZoneInfoFromContextualMenu = null;
}
function initExpCollInfos(l)
{
var collapseAction = null;
var o = l; 
var ms = l.getAttribute ? l.getAttribute("ms") : null
if (ms != null )
{
o = l.parentNode; 
    while (o.tagName == "DIV" ||o.tagName == "SPAN")
o = o.parentNode; 
}
else   
{
ms  = getChildHierarchicalAction(l)
if (ms == null )
{
_curExpandColInfo = null; 
return;
}
else
{
if (l.tagName == "TR")   
o = o.firstChild
    }
}
resetExpColChartZoneInfo()
var idRef = getElementOrParentIdref(o)
var curMid = getElementOrParentMid(o)
var bid = getElementOrParentBid(o)
var mpid = getElementOrParentAtt(o, "mpid")
var maid = getElementOrParentAtt(o, "maid")
if (ms == "+") {
collapseAction = "EXPAND"
}
else if (ms == "-" || ms ==".") {
collapseAction = "COLLAPSE_ALL"
}
_curExpandColInfo = {"action":collapseAction, "mid":curMid,"idRef": idRef, "bid":bid, "mpid":mpid, "maid":maid, "ms":ms}
}
function getElementOrParentMid(layer) {
if (layer==null)
return null
var mid=layer.getAttribute ? layer.getAttribute("mid") : null
return mid ? mid : getElementOrParentMid(layer.parentNode)
}
function getElementOrParentAtt(layer, att) {
if (layer==null)
return null
var valAtt = layer.getAttribute ? layer.getAttribute(att) : null
return valAtt ? valAtt : getElementOrParentAtt(layer.parentNode, att)
}
function expandCollapseClickCB(e)
{
if (_ie) e=event
if (eventIsLeftButton(e,fr=getReportFrame()))
{
expandCollapseClickCBImplem(this)
}
simulateClick(e)
}
function expandCollapseClickCBImplem(layer)
{
if (isEnableUserRight(WS._usrEditDocumentFormatting))
{
initExpCollInfos(layer);
var p = urlParamsNoBID()
p += "&sExpCollAction=" + _curExpandColInfo.action + "&refId=" + _curExpandColInfo.idRef+ "&bid=" + _curExpandColInfo.bid + "&mid=" + _curExpandColInfo.mid
wt()
setReportUrl("processExpandCollapse" + _appExt + p)
}
}
function doBlockExpandCollapse(action)
{
var actionID = null
var expandLevel=null
switch(action)
{
case "expandChildren":
case "chart_expandChildren":
actionID ="EXPAND"
break;
case "expandDescendent":
case "chart_expandDescendent":
actionID ="EXPAND_ALL"
break;
case "collapseChildren":
case "chart_collapseChildren":
actionID ="COLLAPSE_ALL"
break;
case "symetricExpandChildren":
case "chart_symetricExpandChildren":
actionID ="EXPAND_SYMMETRIC"
break;
case "symetricExpandDescendent":
case "chart_symetricExpandDescendent":
actionID ="EXPAND_ALL_SYMMETRIC"
break;
case "symetricCollapseChildren":
case "chart_symetricCollapseChildren":
actionID ="COLLAPSE_ALL_SYMMETRIC"
break;
case "expandAllHierarchies":
case "chart_expandAllHierarchies":
actionID ="RESET_EXPAND"
break;
case "collapseAllHierarchies":
case "chart_collapseAllHierarchies":
actionID ="RESET_COLLAPSE"
break;
case "ecDrillUp":
case "chart_ecDrillUp":
actionID ="FOCUSOUT"
break;
case "ecDrillDown":
case "chart_ecDrillDown":
actionID ="FOCUSIN"
break;
case "expandLevelNone":
case "chart_expandLevelNone":
actionID ="EXPAND_TO_LEVEL"
expandLevel="none"
setSelExpandLevelReading();
break;
case "expandLevel1":
case "chart_expandLevel1":
actionID ="EXPAND_TO_LEVEL"
expandLevel=1
setSelExpandLevelReading();
break;
case "expandLevel2":
case "chart_expandLevel2":
actionID ="EXPAND_TO_LEVEL"
expandLevel=2
setSelExpandLevelReading();
break;
case "expandLevel3":
case "chart_expandLevel3":
actionID ="EXPAND_TO_LEVEL"
expandLevel=3
setSelExpandLevelReading();
break;
case "expandLevel4":
case "chart_expandLevel4":
actionID ="EXPAND_TO_LEVEL"
expandLevel=4
setSelExpandLevelReading();
break;
case "expandLevelMore":
setSelExpandLevelReading();
var url = "language/"+_lang+"/html/expandMoreLevelDlg.html?fromChart_ExpandLevel="+false
return frameNav("DlgFrame",url)
break;
case "chart_expandLevelMore":
setSelExpandLevelReading();
var url = "language/"+_lang+"/html/expandMoreLevelDlg.html?fromChart_ExpandLevel="+true
return frameNav("DlgFrame",url)
break;
default:
if(id)  
return showAlertDialog("Expand Collapse Error","",2,null); 
break
}
(_ExpColChartZoneInfo)?doChartExpandCollapse(actionID,null,expandLevel):doExpandCollapse(actionID,null,expandLevel)
}
function setSelExpandLevelReading()
{
var tableSubMenu = (_ExpColChartZoneInfo)?_ChartExpandCollapseContextMenu.getItemByID("chartHierarchicalNavig"):_expandCollapseContextMenu.getItemByID("tableHierarchicalNavig")
var subTabHierarchy =  tableSubMenu.sub
var expandMenu = (_ExpColChartZoneInfo)?subTabHierarchy.getItemByID("chart_expandLevel").sub:subTabHierarchy.getItemByID("expandLevel").sub
var nc=expandMenu.menuItemsCount();
for (var i=0; i<nc; i++)
{
var  menuitem=expandMenu.getItem(i);
if (!menuitem.isSeparator)
menuitem.check(false);
}
}
function getDefaultExpandedLevel()
{
var url =  _root + "ajaxIncDefaultExpandLevel" + _appExt
url += urlParamsNoBID()
url += "&sExpCollAction=" + _curExpandColInfo.action + "&bid=" + _curExpandColInfo.bid + "&mid=" + _curExpandColInfo.mid + "&refId=" + _curExpandColInfo.idRef
wt();
ajaxUpdater({"url":url, "postCB":getDefaultExpandedLevelCB, "ajaxErrorCB":manageAjaxError})
}
function getDefaultExpandedLevelChart()
{
var url =  _root + "ajaxIncDefaultExpandLevel" + _appExt
url += urlParamsNoBID()
url += "&sExpCollAction=" + _ExpColChartZoneInfoFromContextualMenu.action + "&bid=" + _ExpColChartZoneInfoFromContextualMenu.bid + "&mid=" + _ExpColChartZoneInfoFromContextualMenu.mid + "&refId=" + _ExpColChartZoneInfoFromContextualMenu.idRef
url += "&sObjectId="+_ExpColChartZoneInfoFromContextualMenu.objectId;
wt();
ajaxUpdater({"url":url, "postCB":getDefaultExpandedLevelChartCB, "ajaxErrorCB":manageAjaxError})
}
function getDefaultExpandedLevelCB(jsonObj)
{
if (jsonObj!=null)
{
DS.defaultExpandedLevel=jsonObj.defaultExpandedLevel;
if (isInteractive)
{
var expandLevel0 = workbenchW.getAction("expandLevelNone");
var expandLevel1 = workbenchW.getAction("expandLevel1");
var expandLevel2 = workbenchW.getAction("expandLevel2");
var expandLevel3 = workbenchW.getAction("expandLevel3");
var expandLevel4 = workbenchW.getAction("expandLevel4");
var expandLevelMore = workbenchW.getAction("expandLevelMore");
if (DS.defaultExpandedLevel==null) 
{
expandLevel0.check(true);
}
expandLevel1.check(1==DS.defaultExpandedLevel);
expandLevel2.check(2==DS.defaultExpandedLevel);
expandLevel3.check(3==DS.defaultExpandedLevel);
expandLevel4.check(4==DS.defaultExpandedLevel);
expandLevelMore.check(DS.defaultExpandedLevel>=5);
}
else
{
var m=_expandCollapseContextMenu;
var tableSubMenu=m.getItemByID("tableHierarchicalNavig");
var subTabHierarchy =  tableSubMenu.sub
var expandMenu = subTabHierarchy.getItemByID("expandLevel").sub
var nc=expandMenu.menuItemsCount();
for (var i=0; i<nc; i++)
{
var  menuitem=expandMenu.getItem(i);   
if (menuitem.isShown)
{
if (i!=5)   
menuitem.check(i==DS.defaultExpandedLevel);
}
}
if (DS.defaultExpandedLevel==null)   
{
var  menuitem=expandMenu.getItem(0);
menuitem.check(true);
}
if (DS.defaultExpandedLevel>=5)   
{
var  menuitem=expandMenu.getItem(6);
menuitem.check(true);
}
}
}
hideWt();
}
function getDefaultExpandedLevelChartCB(jsonObj)
{
if (jsonObj!=null)
{
DS.defaultExpandedLevel=jsonObj.defaultExpandedLevel;
if (isInteractive)
{
var expandLevel0 = workbenchW.getAction("chart_expandLevelNone");
var expandLevel1 = workbenchW.getAction("chart_expandLevel1");
var expandLevel2 = workbenchW.getAction("chart_expandLevel2");
var expandLevel3 = workbenchW.getAction("chart_expandLevel3");
var expandLevel4 = workbenchW.getAction("chart_expandLevel4");
var expandLevelMore = workbenchW.getAction("chart_expandLevelMore");
if (DS.defaultExpandedLevel==null) 
{
expandLevel0.check(true);
}
expandLevel1.check(1==DS.defaultExpandedLevel);
expandLevel2.check(2==DS.defaultExpandedLevel);
expandLevel3.check(3==DS.defaultExpandedLevel);
expandLevel4.check(4==DS.defaultExpandedLevel);
expandLevelMore.check(5==DS.defaultExpandedLevel);
}
else
{
var m=_ChartExpandCollapseContextMenu;
var tableSubMenu=m.getItemByID("chartHierarchicalNavig");
var subTabHierarchy =  tableSubMenu.sub
var expandMenu = subTabHierarchy.getItemByID("chart_expandLevel").sub
var nc=expandMenu.menuItemsCount();
for (var i=0; i<nc; i++)
{
var  menuitem=expandMenu.getItem(i);   
if (menuitem.isShown)
{
if (i!=5)   
menuitem.check(i==DS.defaultExpandedLevel);
}
}
if (DS.defaultExpandedLevel==null)   
{
var  menuitem=expandMenu.getItem(0);
menuitem.check(true);
}
if (DS.defaultExpandedLevel>=5)   
{
var  menuitem=expandMenu.getItem(6);
menuitem.check(true);
}
}
}
hideWt();
}
function generateExpandCollapseCB(id, checkTDC)
{
wt();
var action=id?id:this.id
var checkTDC=checkTDC?true:false
doBlockExpandCollapse(action,id)
}
function requestNewReport(name,sPageMode,sReportMode,reportID)
{
var rep = DS.arrReports[DS.arrReports.length]=newReportInfo(name,sPageMode, sReportMode,"NaN")
rep.drillBar=(sReportMode=="Analysis")?WS._showDrillBarPref:false;
rep.reportID=reportID;
eventManager.notify(_EVT_REP_DUPLICATED)
eventManager.notify(_EVT_REP_DATAOK)
}
function updateUseQueryDrill(b)
{
bUseQueryDrill = b;
}
function filldrillFilterMenu()
{
var p=getReportFrame().parent 
if (p==null) return
if (p.arrHierarchy==null)
{
setTimeout("filldrillFilterMenu()", 100);
return
}
var arrH=p.arrHierarchy, arrD=p.arrDimension, arrFreeDim=p.arrFreeDimension, arrFreeDtl=p.arrFreeDetail, arrLinkDimension=p.arrLinkDimension
var FHLen=drillFilterMenu.items.length, lenH=arrH.length
 for (var i=0; i < lenH; i++)
 {
var cptD=0
FDLen = drillFilterDimMenu.items.length
for (var j=0; j < arrD.length; j++) 
{
      if (i == arrD[j][4]) 
      {
if (cptD >= FDLen)
{
drillFilterDimMenu.add('dfd'+cptD, arrD[j][0], filterDrillCB);
}
cptD++
      }            
   }
   if (i >= FHLen)
   {
drillFilterMenu.add('dfh'+i, arrH[i][0]);
drillFilterMenu.getItemByID('dfh'+i).attachSubMenu(drillFilterDimMenu);
   }         
 }
var lenFreeDimDtl = arrFreeDim.length + arrFreeDtl.length + arrLinkDimension.length;
if (lenFreeDimDtl > 0)
{
FHLen=drillFilterMenu.items.length 
if(lenH >= FHLen)
{
drillFilterMenu.add('dfh'+lenH, 'others'); 
drillFilterMenu.getItemByID('dfh'+i).attachSubMenu(drillFilterDimMenu);
}
FDLen=drillFilterDimMenu.items.length;
if (lenFreeDimDtl > FDLen)
{
for (var j=FDLen; j<lenFreeDimDtl; j++) 
{
drillFilterDimMenu.add('dfd'+j, "", filterDrillCB); 
}
}
}
}
function initdrillFilterMenu()
{
var p=getReportFrame().parent 
if (p==null) return
var arrH=p.arrHierarchy,arrD=p.arrDimension
var FHLen=drillFilterMenu.items.length, FDLen=drillFilterDimMenu.items.length
var len=arrH.length
for (var i=0; i<len; i++)
{     
drillFilterMenu.getItem(i).show(true)
drillFilterMenu.getItem(i).setText(arrH[i][0])
drillFilterMenu.getItem(i).hierID=arrH[i][1]
   }    
  var arrFreeDim=p.arrFreeDimension,arrFreeDtl=p.arrFreeDetail, arrLinkDimension=p.arrLinkDimension
  if (arrFreeDim.length>0 || arrFreeDtl.length>0 || arrLinkDimension.length>0) 
  {
drillFilterMenu.getItem(len).show(true)
drillFilterMenu.getItem(len).setText("Others")
drillFilterMenu.getItem(len).hierID='others'
len++
  }
 for (var i=len; i<FHLen; i++)
 {
drillFilterMenu.getItem(i).show(false)
 }   
}
function initdrillFilterDimMenu()
{    
  var fr=getReportFrame()
  if (fr==null) return
  var p=fr.parent,arrH=p.arrHierarchy,arrD=p.arrDimension
var FHLen=drillFilterMenu.items.length, FDLen=drillFilterDimMenu.items.length
var arrFreeDim=p.arrFreeDimension,arrFreeDtl=p.arrFreeDetail, arrLinkDimension=p.arrLinkDimension
var HID=this.par.hierID, cptD=0
if (HID=='others')
{
for (var j=0; j<arrFreeDim.length; j++) 
{
drillFilterDimMenu.getItem(cptD).show(true)
drillFilterDimMenu.getItem(cptD).setText(arrFreeDim[j][0])
drillFilterDimMenu.getItem(cptD).dimID=arrFreeDim[j][1]
cptD++
     }
    for (var j=0; j<arrFreeDtl.length; j++) 
{
drillFilterDimMenu.getItem(cptD).show(true)
drillFilterDimMenu.getItem(cptD).setText(arrFreeDtl[j][0])
drillFilterDimMenu.getItem(cptD).dimID=arrFreeDtl[j][1]   
cptD++   
    }
for (var j=0; j<arrLinkDimension.length; j++) 
{
drillFilterDimMenu.getItem(cptD).show(true)
drillFilterDimMenu.getItem(cptD).setText(arrLinkDimension[j][0])
drillFilterDimMenu.getItem(cptD).dimID=arrLinkDimension[j][1]   
cptD++   
    }
}
else
{
for (var j=0; j<arrD.length; j++) 
{
    if (HID == arrD[j][3]) 
    {
drillFilterDimMenu.getItem(cptD).show(true)
drillFilterDimMenu.getItem(cptD).setText(arrD[j][0])
drillFilterDimMenu.getItem(cptD).dimID=arrD[j][1]
cptD++
    }            
 } 
   }    
   for (var j=cptD; j<FDLen; j++) 
{
drillFilterDimMenu.getItem(j).show(false)
}
}
function getDrillBarFrame()
{
var f=getReportFrame()
if (f==null) return null
f=f.parent
if (f==null) return null
if (_bDrillMode || _bReportDrillLite) 
f=f?f.frames[0]:null
else
f=null
return f
}
function filterDrillCB()
{
var DimID=this.dimID
getDrillBarFrame().AddFilter(DimID)
}
function showDrillFilterMenu(x,y)
{
drillFilterMenu.show(true,x,y)
_currContextMenu=drillFilterMenu
}
function debugdrillfilter()
{
var fr=getReportFrame(),p=fr.parent,arrH=p.arrHierarchy,arrD=p.arrDimension
var s=''
for (var i=0; i<arrH.length; i++)
{
s+='H = '+arrH[i][0]+ arrH[i][1] +' ('
for (var j=0; j<arrD.length; j++) 
{
          if (i == arrD[j][4]) 
          {
s+=arrD[j][0]+ ' , '
          }                      
       }   
       s+=' )'+'\n'             
 }
 var arrFreeDim=p.arrFreeDimension,arrFreeDtl=p.arrFreeDetail
if((arrFreeDim.length >0) && (arrFreeDtl.length>0) )
s+='arrFreeDim= '+arrFreeDim.length +' arrFreeDtl= '+arrFreeDtl.length
 alert(s)
}
function showExpandCollapseContextMenu(bid,x,y, previousLayerFocus)
{
var pos = workbenchW.getPerspective().getContentFrameCoordinates();
x=x+pos.x
y=y+pos.y
var elt = findByBID(doc,bid);
initExpandCollapseContextMenu(null, elt)
m=(_ExpColChartZoneInfo)?_ChartExpandCollapseContextMenu:_expandCollapseContextMenu
m.setPreviousLayerFocus(previousLayerFocus)
m.show(true,x,y)
_currContextMenu=m
}
function showDrillContextMenu(bid,x,y, previousLayerFocus)
{
var pos = workbenchW.getPerspective().getContentFrameCoordinates();
x=x+pos.x
y=y+pos.y
initdrillContextMenu()
m=_drillContextMenu
m.setPreviousLayerFocus(previousLayerFocus)
m.show(true,x,y)
_currContextMenu=m
}
function setHelp()
{
var section="context.htm?contextid=on_report_analysis_root"
var subPath="webintelligence/html_report/html/default.htm"
if (!isInteractive)
{
section="context.htm?contextid=viewing_drill_root"
subPath="webintelligence/viewing/html/default.htm"
}
if (_showQueryPanel)
{
section="context.htm?contextid=html_query_root"
subPath="webintelligence/html_query/html/default.htm"
}
subHelpObj = initHelpSection(subPath);
setHelpSection(subHelpObj, section);
}
_dontCloseDoc = false 
_askConfirmationBeforeClosingDoc = false;
_closedDocConfirmed = false
function beforeUnloadCB(e)
{
if (_ie)
e=event
if (_askConfirmationBeforeClosingDoc && !_closedDocConfirmed && (isEnableUserRight(DS._usrSaveAsDoc) || isEnableUserRight(DS._usrSaveDoc)) && isDocModified()) {
e.returnValue = "You will lose any unsaved modifications to this document.";
}
}
function beforeCloseTab()
{
if (_askConfirmationBeforeClosingDoc && (isEnableUserRight(DS._usrSaveAsDoc) || isEnableUserRight(DS._usrSaveDoc)) && isDocModified()) {
bConfirmed = window.confirm("You will lose any unsaved modifications to this document.")
if (bConfirmed)
_closedDocConfirmed=true
return bConfirmed
}
else {
return true
}
}
function isDocModified() 
{
var ret = ((arrState && (arrState.length > 1) && (curState > 0)) || (isInteractive && _isQPModified));      
return ret;
}
function autosave()
{
_askConfirmationBeforeClosingDoc = false;
var baseURL = _curDoc.location.href
var iPos=baseURL.indexOf("AnalyticalReporting/");
if (iPos >= 0)
{
baseURL=baseURL.substring(0,iPos);
baseURL+="../../OpenDocument/";
}
var restoreDocURL = baseURL+"opendoc/openDocument"+_appExt;
restoreDocURL+="?iDocID=" + DS.restoreId + "&sType=wid"
restoreDocURL+="&sLogonAsApp=true"
restoreDocURL+="&sOutputFormat=H" 
restoreDocURL+="&sWindow=Same"
parent.getApplicationTopWindow().location.href = restoreDocURL
}
_showInfoAutosave = WS._canAutosave && getXtraNeededAutosaveRights() && !WS._infoAutosaveCheck
function showInfoAutosave()
{
_showInfoAutosave = false 
frameNav("ThirdDlgFrame","language/"+_lang+"/html/infoAutosaveDialog.html")
}
function moveToPage(dir)
{
setFollowObjectInfo(null);
var saveCurIPageMax = _curIPageMax;
var p=urlParams(true,true,null,null,null,null,null,dir,true)
if (p!="")
{
p+="&nbPage="+DS.nbPage
p+="&sUndoEnabled=false"
if (DS.strReportMode == "Viewing")
setReportUrl("report"+_appExt+p,true)
else
{
var f=workbenchW.getPerspective().getContentFrameWindow();
frameNav("Reportbloc","viewReport"+_appExt+p,true,f);
}
_curIPageMax = saveCurIPageMax;
}
}
function moveToSlot(dir)
{
setFollowObjectInfo(null);
var vPageSlot=DS.pageSlots.curVSlotIdx,hPageSlot=DS.pageSlots.curHSlotIdx;
var saveCurIPageMax = _curIPageMax;
var p=urlParams(true,true,null,null,null,null,null,null,true)
var rep=DS.arrReports[getReportIdxFromId(DS.iReportID)]
if (rep!=null)  
{
rep.scrollSlotH=0
rep.scrollSlotV=0;
}
if (dir == "top")
{
vPageSlot = DS.pageSlots.curVSlotIdx - 1;
if (rep!=null)
{
rep.scrollSlotH = reportBody.scrollLeft;
rep.scrollSlotV = reportBody.scrollHeight;
}
}
else if (dir == "bottom")
{
vPageSlot =  DS.pageSlots.curVSlotIdx + 1;
if (rep!=null)
{
rep.scrollSlotH = reportBody.scrollLeft;
}
}
else if (dir == "left")
{
hPageSlot =  DS.pageSlots.curHSlotIdx - 1;
if (rep!=null)
{
rep.scrollSlotV = reportBody.scrollTop;
rep.scrollSlotH = reportBody.scrollWidth;
}
}
else if (dir == "right") 
{
hPageSlot =  DS.pageSlots.curHSlotIdx + 1;
if (rep!=null)
{
rep.scrollSlotV = reportBody.scrollTop;
}
}
if (p!="")
{
p+="&iVSlot="+vPageSlot
p+="&iHSlot="+hPageSlot
p+="&sUndoEnabled=false"
p+="&nbPage="+DS.nbPage
setReportUrl("report"+_appExt+p,true)
}
_curIPageMax = saveCurIPageMax;
}
function smartNavig(dir)
{
var info = getReportSCrollInfo()
if (!info)  return
reportBody = info.reportBody, reportWin = info.reportWin
if ((dir == "top") && (!info.isTop))
{
reportWin.scrollTo(reportBody.scrollLeft, Math.max(0, reportBody.scrollTop - winHeight(reportWin)));
updateSmartPageCB()
}
else if ((dir == "bottom") && (!info.isBottom))
{
reportWin.scrollTo(reportBody.scrollLeft, reportBody.scrollTop + winHeight(reportWin));
updateSmartPageCB()
}
else if ((dir == "left") && (!info.isLeft))
{
reportWin.scrollTo(Math.max(0, reportBody.scrollLeft - winWidth(reportWin)), reportBody.scrollTop);
updateSmartPageCB()
}
else if ((dir == "right") && (!info.isRight))
{
reportWin.scrollTo(reportBody.scrollLeft + winWidth(reportWin), reportBody.scrollTop);
updateSmartPageCB()
}
else
{
moveToSlot(dir); 
}
}
function getReportSCrollInfo()
{
var reportWin = getReportFrame()
var reportBody = null
try {
reportBody = reportWin.document.body
} catch (err) {
reportBody = null
}
if (!reportBody)  return null
return {reportWin:reportWin, 
reportBody:reportBody, 
isTop:(reportBody.scrollTop == 0), 
isBottom:((reportBody.scrollTop + winHeight(reportWin)) >= reportBody.scrollHeight), 
isLeft:(reportBody.scrollLeft == 0), 
isRight:((reportBody.scrollLeft + winWidth(reportWin)) >= reportBody.scrollWidth)}
}
function updateSmartPageCB()
{
var info = getReportSCrollInfo();
if (!info) return
if (_bShowPageNavigation)
{
var isFirstVSlot = (DS.pageSlots.curVSlotIdx == 0)
var isFirstHSlot = (DS.pageSlots.curHSlotIdx == 0)
var isLastVSlot = (DS.pageSlots.isLastVSlot)
var isLastHSlot = (DS.pageSlots.isLastHSlot)
workbenchW.getAction("smartTop").setDisabled(info.isTop && isFirstVSlot)
workbenchW.getAction("smartBottom").setDisabled(info.isBottom && isLastVSlot)
workbenchW.getAction("smartLeft").setDisabled(info.isLeft && isFirstHSlot)
workbenchW.getAction("smartRight").setDisabled(info.isRight && isLastHSlot)
}
else
{
workbenchW.getAction("smartTop").setDisabled(info.isTop)
workbenchW.getAction("smartBottom").setDisabled(info.isBottom)
workbenchW.getAction("smartLeft").setDisabled(info.isLeft)
workbenchW.getAction("smartRight").setDisabled(info.isRight)
}
}
function updatePageWidgetsCB()
{
updateSmartPageCB();
{
var pageNumber = ""
if (!isNaN(DS.nbPage))
{
pageNumber = "Page %1 of %2";
pageNumber = pageNumber.replace("%2", DS.nbPage);
}
else
{
pageNumber = "Page %1 of %2";
if(_curIPageMax==null || DS.iPage>_curIPageMax)
_curIPageMax=DS.iPage
pageNumber = pageNumber.replace("%2", _curIPageMax+"+");
}
pageNumber = pageNumber.replace("%1", DS.iPage);
workbenchW.getAction("pageNumberStatus").setText(pageNumber);
}
if (_bShowPageNavigation) {
workbenchW.getAction("firstIcn").setDisabled(DS.isFirstPage)
workbenchW.getAction("previousIcn").setDisabled(DS.isFirstPage)
workbenchW.getAction("nextIcn").setDisabled(DS.isLastPage)
workbenchW.getAction("lastIcn").setDisabled(DS.isLastPage)
var s = ''
if (!isNaN(DS.nbPage)) 
s = "/" + DS.nbPage
workbenchW.getAction("maxPage").setValue(s)
workbenchW.getAction("pageNumber").setValue(DS.iPage)
}
else 
{
showPageNavigIcons(DS.strPageMode != null && !isPDF);
var w = window;
var idx = findInMenu(w.pal1, "pageLab")
if (idx != -1)
{
if (idx != 0)
{
if (w.pal1.items[idx - 1].isSeparator == true) 
w.pal1.items[idx - 1].setDisplay(false)
}
}
}
}
function findInMenu(menu,widgetID)
{
if ((menu==null)|| (widgetID==null))
return -1;
var items=menu.items, itemsLen = items.length
for (var i = 0; i < itemsLen; i++)
{
var item = items[i]
if (item.id == widgetID) 
return i;
}
return -1
}
function setZoomCB(evt,data)
{
var idx=(data!=null)?parseInt(data):null
if (idx==null)
idx=getReportIdxFromId(DS.iReportID);
var zoom = DS.arrReports[idx].zoom;
workbenchW.getAction("zoomCombo").valueSelect(zoom);
}
function checkZoomCB()
{
var zoomCombo = workbenchW.getAction("zoomCombo")
var usrVal=zoomCombo.getSelection().value
if(usrVal =="whole" || usrVal =="width")
return true
var len=usrVal.length
if (usrVal[len-1]=='%')
usrVal=usrVal.substring(0,len-1)
var val=parseFloat(usrVal)/100
if (isNaN(val) || (val < 0) || (val > 5))
{
var zoom=DS.arrReports[getReportIdxFromId(DS.iReportID)].zoom
zoomCombo.valueSelect(zoom)
return false
}
return true
}
function applyZoom()
{
var cont=getPageContainer()
if (cont == null) return
var st=cont.style
var zoomCombo = this;
var usrVal=zoomCombo.getSelection().value
if(usrVal =="whole" || usrVal =="width") 
{
var docw = cont.offsetWidth+(DS.strPageMode == "Page"? 20:0)
var doch = cont.offsetHeight+(DS.strPageMode == "Page"? 20:0)
var fr=workbenchW.getPerspective().getContentFrameWindow();
var winw = winWidth(fr)
var winh = winHeight(fr)
var zoomw = Math.floor((winw*100)/docw);
var zoomh = Math.floor((winh*100)/doch);
if(usrVal =="width")
usrVal = zoomw;
else
usrVal = Math.min(zoomw,zoomh);
zoomCombo.valueSelect(usrVal)
}
var zoomCent = parseFloat(usrVal)
var zoom = zoomCent/100
if((zoomCent+"%") != usrVal)
zoomCombo.text.setValue((zoomCent+"%"));
if (_ie && !_ie9R) {
st.zoom=zoom
}
else if (_ie9R) {
st.msTransform ='scale('+zoom+')';
st.msTransformOrigin ='top left';
}
else if (_webKit){
st.zoom=zoom;
st.webkitTransformOrigin='top left';
} else if (null != st.MozTransform) {
st.MozTransform='scale('+zoom+')';
st.MozTransformOrigin='top left';
} else {
eventManager.notify(_EVT_ZOOM_CHANGED,zoomCent);
var repInfo=DS.arrReports[getReportIdxFromId(DS.iReportID)];
wt();
_reportPage="report"+_appExt;
var p=urlParams(true,true,null,null,null,repInfo.pageMode,repInfo.repMode,repInfo.curPage);
setReportUrl(_reportPage+p);
return;
}
if (_foldPanelVisible)
{
var fr=workbenchW.getPerspective().getContentFrameWindow();
var frFoldPanel=fr.frames['FoldPanel'];
if (fr && typeof(frFoldPanel)!="undefined" && typeof(frFoldPanel.zoomOutline)!="undefined")
{
frFoldPanel.zoomOutline(zoom);
}
}
if (isInteractive)
{
_feedbackManager.setZoom(zoom)
_feedbackManager.unselect()
restoreSelection()
}
eventManager.notify(_EVT_ZOOM_CHANGED, zoomCent)
}
function initZoomCombo(zoomCombo)
{
zoomCombo.add("Page Width","width")
zoomCombo.add("Whole Page","whole")
zoomCombo.addSeparator();
zoomCombo.add("10%","10")
zoomCombo.add("25%","25")
zoomCombo.add("50%","50")
zoomCombo.add("75%","75")
zoomCombo.add("100%","100",true)
zoomCombo.add("150%","150")
zoomCombo.add("200%","200")
zoomCombo.add("500%","500")
}
_curDrillInfo=null
function viewClickCB(e) 
{
var o=this
var bid=getElementOrParentBid(o),fr=getReportFrame()
if (fr==null) return
if (_ie)
e = fr.event 
var focusTD = null
if (!isInteractive)
{
    var focusTableCell = getTableCellFromLayer(o)
if (focusTableCell) {
focusTD = setTableCellFocusable(focusTableCell, true)
}
    }
e.cancelBubble=true
_bodrill=null
setFollowObjectInfo(o);
var enableDrill = isEnableUserRight(WS._usrEditDocumentFormatting)
if (_bDrillMode && enableDrill)
{
if (eventIsLeftButton(e,fr))
{
_bodrill=o.getAttribute("drill")
if (_bodrill && _curDrillInfo && ("" != _curDrillInfo.action)) { 
if (isInteractive) escapeFormatPainter();
simulateClick(e)
generateDrill()
return _webKit?true:false
}
}
else
{
_bodrill=o.getAttribute("drill")
if (_bodrill && _curDrillInfo) {
}
updateDrillOnMouseOverOrFocus(findDrillLayer(o), false)
}
}
if (isInteractive)
{
interactiveClickCB(e,o,bid,fr);
}
var IEFocusBug = isInteractive && _ie && _feedbackManager.isResizing()
if (focusTD && !IEFocusBug)
{
safeSetFocus(focusTD)
}
simulateClick(e)
if (!_webKit && !_ffDD)
return false
}
function getDrillDataCtxt(idref) {
if (!idref) return null
var ctxts = getReportFrame().JSONDATA.drillctxs
for (var i=0; i < ctxts.length; i++) {
if (idref == ctxts[i].href) {
return ctxts[i].data
}
}
}
function getDrillDataCtxtFromBid(bid) {
if (!bid) return null
var ctxts = getReportFrame().JSONDATA.drillctxs
for (var i=0; i < ctxts.length; i++) {
if (bid == ctxts[i].bid) {
return ctxts[i].data
}
}
}
function initDrillInfo(dataCtxtStuct, actionType, bid, pBid, dimID, hID) {
var infos = getReportFrame().JSONDATA.drilldict[0].drillinfo 
_curDrillInfo = {"action":actionType, "bid":bid, "pBid":pBid, "dimFrom": new Array, "dimTo": new Array, "dimToName": new Array, "hID": new Array, "hName": new Array, "outOfScope": false, "filter": new Array}
var drillBy = ("by" == actionType)
if (drillBy) {
_curDrillInfo.dimTo[0] = dimID
_curDrillInfo.hID[0] = hID
}
var dataCtxtAr = null, dcil = 1
if (dataCtxtStuct.length) {
dcil = dataCtxtStuct.length
dataCtxtAr = dataCtxtStuct
} else {
dataCtxtAr = new Array
dataCtxtAr[0] = dataCtxtStuct
}
var menuDrillBy = false
if ('' == actionType) { 
for (var dci=0; dci < dcil; dci++) {
if ('down' == actionType) {
break
}
var cid = dataCtxtAr[dci].cid
var drillstruct = getDrillStructFromCid(infos, cid)
if (null == drillstruct) return
for (var j = 0; j < drillstruct.length; j++) {
if ('down' == drillstruct[j].type) {
actionType = 'down'
break
}
if ('up' == drillstruct[j].type) {
actionType = 'up'
break
}
if ('by' == drillstruct[j].type) {
menuDrillBy = true
break
}
}
}
_curDrillInfo.action = actionType 
}
var actionInit = false, outOfScope = false
for (var dci = 0; dci < dcil; dci++) {
var dataCtxt = dataCtxtAr[dci]
var drillstruct = getDrillStructFromCid(infos, dataCtxt.cid)
if (null == drillstruct) return
var drillpath = drillstruct[0].drillpath, dpL = drillpath.length
if ((dcil > 1) && (dpL > 1)) continue 
_curDrillInfo.cid = dataCtxt.cid 
var cid = dataCtxt.cid
if (dataCtxt.cell_values) {
if (dataCtxt.cell_values.length == 1) {
_curDrillInfo.filter[_curDrillInfo.filter.length] = (dataCtxt.cell_values[0]).toJSON().slice(1,-1); 
}
else {
var cv = dataCtxt.cell_values, cvl = cv.length
for (var cvi = 0; cvi < cvl; cvi++) {
_curDrillInfo.filter[_curDrillInfo.filter.length] = (cv[cvi]).toJSON().slice(1,-1); 
}
} 
} else if (dataCtxt.filter) { 
if (dataCtxt.filter.length == 0) {
_curDrillInfo.filter = dataCtxt.filter
}
else {
var cv = dataCtxt.filter, cvl = cv.length
for (var cvi = 0; cvi < cvl; cvi++) {
_curDrillInfo.filter[_curDrillInfo.filter.length] = cv[cvi]
}
}
} 
if (drillBy) {
_curDrillInfo.cid = dataCtxtStuct.cid
var from = drillstruct[0].from
var fromL = _curDrillInfo.dimFrom.length
_curDrillInfo.dimFrom[fromL] = from.key
actionInit = true
continue
}
for (var j = 0; j < drillstruct.length; j++) {
if (actionType != drillstruct[j].type) 
continue
var drillpath = drillstruct[j].drillpath, dpL = drillpath.length
_curDrillInfo.ambDrill = (dpL > 1)
actionInit = true 
var from = drillstruct[j].from
var fromL = _curDrillInfo.dimFrom.length
_curDrillInfo.dimFrom[fromL] = from.key
for (var dpi = 0; dpi < dpL; dpi++) {
_curDrillInfo.hID[fromL + dpi] = drillpath[dpi].key
_curDrillInfo.hName[fromL + dpi] = drillpath[dpi].caption
if (drillpath[dpi].dpname) {
if (!_curDrillInfo.DPName) {
_curDrillInfo.DPName = new Array
} 
_curDrillInfo.DPName[fromL + dpi] = drillpath[dpi].dpname
}
var dims = drillpath[dpi].dimensions
for (var di = 0; di < dims.length; di++) {
_curDrillInfo.dimTo[_curDrillInfo.dimTo.length] = dims[di].key
_curDrillInfo.dimToName[_curDrillInfo.dimToName.length] = dims[di].caption
}
if (!drillpath[dpi].inscope) {
outOfScope = true
}
}
}
}
if (outOfScope) _curDrillInfo.outOfScope = outOfScope 
if (!actionInit && !menuDrillBy) _curDrillInfo = null
}
function getDrillStructFromCid(infos, cid) {
for (var i = 0; i < infos.length; i++) {
if (cid == infos[i].cid) { 
return infos[i].drillstruct
}
}
return null
}
function initDrillByInfo(cid) {
var infos = getReportFrame().JSONDATA.drilldict[0].drillinfo 
for (var i=0; i < infos.length; i++) {
if (cid != infos[i].cid) continue
var drillstruct = infos[i].drillstruct 
for (var j=0; j < drillstruct.length; j++) {
if ("by" != drillstruct[j].type) continue
return drillstruct[j].drillpath
}
}
return null
}
function simulateClick(e)
{
fr=getReportFrame()
if (fr&&fr.document&&fr.document.onmousedown&&(fr.document.onmousedown!=releaseSelection)){
fr.document.onmousedown(e)
}
else{
var topwindow=getTopAccessibleFrame(fr)
if (topwindow && topwindow.document && topwindow.document.onmousedown && (topwindow.document.onmousedown!=releaseSelection)){
topwindow.document.onmousedown(e)
}
}
}
function getparentBID(o)
{
var bid=o.getAttribute("bid")
if(bid) 
{
return o
}
else
{
if(o.parentNode)
return getparentBID(o.parentNode)
else return null
}
}
function getPScale(l)
{
if(l == null)
{
var elts=getSelectedElts(), elt=elts[0];
var layers = bidTable.get(elt.bid);
l = layers[0];
}
var pscale=l.getAttribute?l.getAttribute("pscale"):1;
if(pscale!=null) 
{
return pscale
}
else
{
if(l.parentNode)
return getPScale(l.parentNode)
else return 1
}
}
_useParentContextMenu=false
function contextMenu(e)
{
if (_saf)
this.onmousedown(e)
incContextMenu(this,e)
return false
}
_bodrillMenuInfo=null
function getBlockBid(bid, l) {
while (null != l) {
var blockBid = l.getAttribute ? l.getAttribute("bid") : null
if (blockBid && (bid != blockBid)) {
return blockBid
}
l = l.parentNode 
}
}
function incContextMenu(l,e)
{
if (!isEnableUserRight(WS._usrShowRightClickMenu))
return
var w= getReportFrame()
if (w==null) return
if (_ie) {
e=w.event
}
var x = _saf ? (absxpos(e) - getScrollX(w)):absxpos(e)
var y = _saf ? (absypos(e) - getScrollY(w)) : absypos(e)
escapeFormatPainter()
hideDrillTooltip()
incIncContextMenu(l, x, y)
e.cancelBubble=true
return false
}
function incIncContextMenu(l, x, y)
{
_bodrillMenuInfo = null
if (_bDrillMode && (null != _curDrillInfo)) {
_bodrillMenuInfo = _curDrillInfo
}
initExpCollInfos(l);
var bid = getElementOrParentBid(l)
if (isInteractive) {
showContextMenu(bid, x , y, l)
} else {
if (isEnableUserRight(WS._usrEditDocumentFormatting)) {
var boDrill = l.getAttribute?l.getAttribute("drill"):null
if ((boDrill != null)  || (_bodrillMenuInfo!= null)){
showDrillContextMenu(bid, x , y, l)
}
else if (_curExpandColInfo != null   || _ExpColChartZoneInfo != null)
{
showExpandCollapseContextMenu(bid, x , y, l)
} else {
return false
}
}
}
}
function clickIconChartCB()
{
var o=this, id = o.getAttribute?o.getAttribute("id"):"", tmpAr = id.split("_")
if (tmpAr.length <= 0) return
bid = tmpAr[1]
var url = _root+"processTurnToTable"+_appExt
url += urlParamsNoBID()
url += "&tableType=vTable"
url += "&sTargetBid=" + bid
url += "&sAction=turnTo"
wt()
setTimeout('setReportUrl("' + url + '",true)',1);
}
function repairToolbar(toolbar)
{
if (toolbar==null)
return
var lastIsSep=true 
var index=-1
var items=toolbar.items,itemsLen=items.length
for (var i =0; i < itemsLen; i++)
{
var item=items[i]
if(item&&item.isWidget)
{
if (item.isSeparator==true)
{
if(lastIsSep)
{
item.setDisplay(false)
}
else
{
index=i
item.setDisplay(true)
}
lastIsSep=true
}
else if(item.isDisplayed()) 
{
lastIsSep=false
index=-1
}
}
}
if(lastIsSep && index >-1) 
{
items[index].setDisplay(false)
}
}
function initPageNumberTextField()
{
var layer = this.layer
addEvent(layer, "keydown", pageNumberKeyDown)
addEvent(layer, "blur", pageNumberHide)
}
function editInPlacePageNumber(src)
{
var widget=workbenchW.getAction("pageNumber").items[0];
var st=widget.css, l=src.layer;
st.width=""+ (convertWidth(l.offsetWidth )-6)+"px"
st.display=""
pageNumberShowHide(true);
widget.select()
}
function pageNumberKeyDown(e)
{
if (_ie)
e=event
var key=_ie?e.keyCode:e.which
if (key==13) 
{
var val = parseInt(getWidget(this).getValue());
if ( isNaN(val) || (val < 1) || (!isNaN(DS.nbPage) && val > DS.nbPage) )
{
 setTimeout('showAlertDialog("Invalid page number.","Error",0)',1);
pageNumberHide()
}
else if ( val != DS.iPage )
{
pageNumberShowHide(false);
wt()
moveToPage(val)
}
}
else if (key==27) 
{
pageNumberHide()
}
eventCancelBubble(e)
}
function pageNumberShowHide(show)
{
workbenchW.getAction("pageNumber").setDisplay(show)
workbenchW.getAction("pageNumberStatus").setDisplay(!show)
}
function pageNumberHide()
{
pageNumberShowHide(false);
workbenchW.getAction("pageNumber").setValue(DS.iPage);
}
function showHideFindBarCB(show)
{
var findBar = workbenchW.getPerspective().getFindBar();
workbenchW.getPerspective().showFindBar(show);
if(show)
findBar.textField.focus();
else
findBar.clean();
}
function resetFindBarCB()
{
var pers = workbenchW.getPerspective();
if(pers.isFindBarVisible())
pers.getFindBar().initRange=null; 
}
_openDoc_reportFrameURL = null;
function openDocumentCB(targetURL, srcFrame)
{
var strWindow = 'Same';
var iPos = targetURL.indexOf('?');
if (iPos >= 0)
{
var strQueryString = targetURL.substring(iPos+1);  
strWindow = getQueryParamValue(strQueryString,'sWindow');
}
if (strWindow == 'Same' && isInIVNewWindow())
{
parent.parent.location = targetURL;
return;
}
var url = restoreReportPageBeforeOpenDoc(_openDoc_reportFrameURL);
if (srcFrame == 'Report')
Report.location.replace(url);
else if (srcFrame == 'Reportbloc')
Report.Reportbloc.location.replace(url);
if (strWindow == 'New')
{
windowProps = "fullscreen=yes,location=no,scrollbars=yes,menubars=no,toolbars=no,resizable=yes";
if (parent.ieFixWindowProps)
windowProps = parent.ieFixWindowProps(windowProps);
var windowName = "opendocumentWindow";
var dtemp = new Date();
windowName += dtemp.getTime();
setTimeout("window.open('"+targetURL.replace(/\'/g,"%27")+"','"+windowName+"','"+windowProps+"')",10);
}
else if (WS.infoviewOpenDocFrame && parent.parent.frames[WS.infoviewOpenDocFrame])
parent.parent.frames[WS.infoviewOpenDocFrame].location = targetURL;
else
parent.location = targetURL;
}
newObserverOneEvent(_EVT_PAGE_LOADED,getReportFrameURLForOpenDoc);
function getReportFrameURLForOpenDoc()
{
var fr = getReportFrame()
if (fr)
_openDoc_reportFrameURL = fr.location.href;
}
function restoreReportPageBeforeOpenDoc(url)
{
var restoredURL = updateQueryParameter(url, "sEntry", DS.strEntry);
restoredURL = removeQueryParameter(restoredURL, "sUndoEnabled");
restoredURL += "&sUndoEnabled=false";
var token = "/viewer/";
var iPos = restoredURL.indexOf(token);
if (iPos >= 0)
{
iPos += token.length;
var iPosA = restoredURL.indexOf("?", iPos);
var curPage = "";
if (iPosA >= 0)
curPage = restoredURL.substring(iPos, iPosA);
if (curPage != "report.jsp" && curPage != "viewReport.jsp")
restoredURL = restoredURL.substring(0, iPos) + "report.jsp" + restoredURL.substring(iPosA);  
}
return restoredURL;
}
function viewReportUnloadCB(doc) {
if (_currWorkbench) {_currWorkbench.removeKeyboardListener(doc)};
if (_feedbackManager) {_feedbackManager.unload()};
if (_mapDict) {_mapDict=null};
if (_curChartRegionCoords) {_curChartRegionCoords=null;}
if (_curChartDynAreaCoords) {_curChartDynAreaCoords=null;}
}
retType = {
table:0,
tableCellHeader:1,
tableCell:2,
freeCell:3,
xElement:4,
section:5,
row:6
}
function JITAttachKeyboard()
{
if (isInteractive)
return;
var frame = getReportFrame()
var body = frame.document.body
if (frame.__isAttachKeyboard != true)
{
frame.__isAttachKeyboard = true
var arr = window.focusableLayers = []
resetIdRefTable();
parseFocusableElements(body, arr)
}
}
function preventDefaultKeyb(e)
{
if (_ie)
{
e = getReportFrame().event
}
if (e.preventDefault) e.preventDefault()
if (e.stopPropagation) e.stopPropagation()
e.cancelBubble=true
e.returnValue=false
}
function getParentTableCell(layer, nbIter)
{
if (layer==null) {
return null
}
if (layer.getAttribute) {
var t = layer.getAttribute("ret")
if (t==retType.tableCell || t==retType.tableCellHeader) {
return layer
}
}
if (nbIter == null) {
nbIter = 0
}
else {
if (++nbIter>10) {
return null
}
}
return getParentTableCell(layer.parentNode, nbIter)
}
function parseFocusableElements(layer, arr)
{
if (layer.getAttribute)
{
var ret = layer.getAttribute("ret")
 var index = arr.length
if (ret)
{
ret = parseInt(ret)
switch (ret)
{
case retType.table:
var obj = arr[index] = {ret:ret, index:index, layer:layer}
obj.parent = arr
parseTableFocusableElements(layer, obj)
var idref = layer.getAttribute("idref");
if(idref)
registerIdRef(idref,layer);
return
case retType.xElement:
case retType.section:
break
case retType.freeCell:
var obj = arr[arr.length] = {ret:ret, index:index, layer:layer}
obj.parent = arr
layer.tabIndex = 0
layer.onkeydown = freeCellKeyDown
if (layer.onmousedown == null)
layer.onmousedown = freeCellMouseDown
return
}
}
}
var c=layer.childNodes
if (c)
{
var l=c.length
for (var i=0; i<l; i++)
parseFocusableElements(c[i], arr)
}
}
function parseTableFocusableElements(layer, obj)
{
var rows = obj.rows = []
var trs = layer.rows
if (trs)
{
var l = trs.length
for (var i=0; i<l; i++)
{
var tr = trs[i]
var row = rows[i] = {ret:retType.row, index:i}
row.parent=obj
parseRowFocusableElements(tr, row)
}
}
}
function parseRowFocusableElements(tr, row)
{
var tds = tr.cells
var cells = row.cells = []
if (tds)
{
var l = tds.length
for (var i=0; i<l; i++)
{
var td = tds[i]
var cell = row.cells[i] = {ret:retType.tableCell, index:i, layer:td}
cell.parent = row
if (cell.index==0 && cell.parent.index==0)
{
safeSetFocus(setTableCellFocusable(cell, false))
}
td.onkeydown = tableCellKeyDown
if (td.onmousedown == null)
td.onmousedown = tableCellMouseDown
td.setAttribute("focustableindex", cell.parent.parent.index)
td.setAttribute("focustablerowindex", cell.parent.index)
td.setAttribute("focustablecellindex", cell.index)
}
}
}
function freeCellKeyDown(e)
{
var frame = getReportFrame()
if (_ie)
{
e = frame.event
}
var k = e.which || e.keyCode;
var layer = this
switch(k)
{
case 13: 
case 32: 
break;
case 109: 
case 107: 
expandCollapseFromKey(layer, k)
break
case 121:
if (e.shiftKey) 
{
showContextMenuFromKey(layer, frame)
break
}
return
default:
return;
}
if (e.preventDefault) e.preventDefault()
if (e.stopPropagation) e.stopPropagation()
e.cancelBubble=true
e.returnValue=false
}
function expandCollapseFromKey(layer, k)
{
var info = findExpandCollapseInfos(layer)
if (info)
{
if ( (k == 109 && info.ms == "-") || 
     (k == 107 && info.ms == "+") )  
{
initExpCollInfos(info.layer)
expandCollapseClickCBImplem(info.layer)
}
}
}
function freeCellMouseDown(e)
{
window.__currFocusLay = this
setTimeout("safeSetFocus(__currFocusLay)",1)
var focusTD = getElementOrChildLayerWithBid(this);
selectCellInViewing(focusTD,false);
if (_ie)
{
e = getReportFrame().event
e.cancelBubble=true
if (e.stopPropagation) e.stopPropagation()
}
}
function tableCellMouseDown(e)
{
var fr = getReportFrame()
if (fr==null)
return true
var sX = getScrollX(fr), sY = getScrollY(fr)
var focusTD = setTableCellFocusable(getTableCellFromLayer(this), true);
safeSetFocus(focusTD);
if (_ie) {
winScrollTo(sX, sY, fr)
}
selectCellInViewing(focusTD,true);
if (_ie)
{
e = fr.event
e.cancelBubble=true
if (e.stopPropagation) e.stopPropagation()
}
}
function getTableCellFromLayer(layer)
{
if (layer && layer.getAttribute && window.focusableLayers)
{
var arr = window.focusableLayers
var table = arr[layer.getAttribute("focustableindex")]
if (table==null) return null
var rows = table.rows
var y    = layer.getAttribute("focustablerowindex")
var row  = rows[y]
if (row==null) return null
var cells = row.cells
var x     = layer.getAttribute("focustablecellindex")
return cells[x]
}
return null
}
function setTableCellFocusable(cell, setFocus)
{
if (cell)
{
var table     = cell.parent.parent
var currFocus = table.currentFocuslayer
var td        = cell.layer
table.currentFocuslayer = cell.layer
td.tabIndex=0
if (setFocus)
{
updateDrillOnMouseOverOrFocus(findDrillLayer(td), false)
} else {
td = null
}
if (currFocus)
currFocus.tabIndex=-1
return td
}
return null
}
function tableCellKeyDown(e)
{
var frame = getReportFrame()
if (_ie)
{
e = frame.event
}
var k = e.which || e.keyCode;
var layer = this
traceLog("KEY=" + k)
switch(k)
{
case 37: 
getTableFocusableElement(layer, -1, 0)
break
case 38: 
getTableFocusableElement(layer, 0, -1)
break
case 39: 
getTableFocusableElement(layer, 1, 0)
break
case 40: 
getTableFocusableElement(layer, 0, 1)
break
case 13: 
case 32: 
break;
case 109: 
case 107: 
expandCollapseFromKey(layer, k)
break
case 121:
if (e.shiftKey) 
{
showContextMenuFromKey(layer, frame)
break
}
return
default:
return
}
if (e.preventDefault) e.preventDefault()
if (e.stopPropagation) e.stopPropagation()
e.cancelBubble=true
e.returnValue=false
}
function showContextMenuFromKey(layer, frame)
{
var drillLayer = findDrillLayer(layer)
if (drillLayer) layer = drillLayer
else
{
var info = findExpandCollapseInfos(layer)
}
var pos = getPos(layer)
incIncContextMenu(layer, pos.x - getScrollX(frame) + 10, pos.y - getScrollY(frame) + 10)
}
function findExpandCollapseInfos(layer)
{
if (layer.getAttribute)
{
var ms = layer.getAttribute("ms")
if (ms)
return {layer:layer, ms:ms}
}
var c=layer.childNodes
if (c)
{
var l=c.length
for (var i=0; i<l; i++)
{
var ret = findExpandCollapseInfos(c[i])
if (ret) return ret
}
}
return null
}
function findDrillLayer(layer)
{
if (layer.getAttribute && layer.getAttribute("drill"))
return layer
var c=layer.childNodes
if (c)
{
var l=c.length
for (var i=0; i<l; i++)
{
var ret = findDrillLayer(c[i])
if (ret) return ret
}
}
return null
}
function getTableFocusableElement(layer, dx, dy)
{
var cell = getTableCellFromLayer(layer)
if (cell)
{
var row   = cell.parent
var table = row.parent
var rows  = table.rows
var cells = row.cells
var y = Math.max(0, Math.min(rows.length-1,  row.index  + dy))
row = table.rows[y]
if (row==null) return
cells = row.cells
var x = Math.max(0, Math.min(cells.length-1, cell.index + dx))
safeSetFocus(setTableCellFocusable(rows[y].cells[x], true))
}
}
function setFollowObjectInfo(layer, xtraInfo)
{
var forceBid=null; 
if(layer == null)
{
cleanFollowObjectInfo();
}
else
{
var infoLayer = getElementOrParentLayerWithBid(layer);
var isFreezeElement = infoLayer?infoLayer.getAttribute("isFreeze"):null;
if(infoLayer == null || isFreezeElement) 
{
cleanFollowObjectInfo();
}
else
{
if(xtraInfo==null)
{
_curIdRef = infoLayer.getAttribute("idref");
_curIdRefBid =infoLayer.getAttribute("bid");
if(infoLayer.getAttribute("isSection")=="1") 
{
var elt=findByBID(doc,_curIdRefBid);
if (elt && elt.children && elt.children[0].className=="bag")
        {
            var bag=elt.children[0];
forceBid = bag.bid;
}
}
_curUIRef = getUIRefFromLayer(infoLayer,forceBid);
}
else
{
if(xtraInfo.curUIRef) 
_curUIRef = xtraInfo.curUIRef;
}
}
}
traceLog("==> setFollowObjectInfo : "+_curUIRef);
}
function cleanFollowObjectInfo()
{
_curIdRef = null;
_curIdRefBid = null;
_curUIRef = null;
_curDataPath = null;
}
function getUIRefFromLayer(layer, forceBid) {
var infoLayer = getElementOrParentLayerWithBid(layer)
if (null == infoLayer) return null;
_currentOutline = getReportFrame().JSONDATA.outline
var bid = forceBid? forceBid:infoLayer.getAttribute("bid");
_curDataPath=[]; 
getDataContextFromLayer(infoLayer, _curDataPath);
var dataCtxtStrAr = new Array()
if (null != _curDataPath)
{
for (var i=0; i < _curDataPath.length; i++)
{
var d = _curDataPath[i] 
dataCtxtStrAr.push(':' + d.id + '="' + d.v+'"');
} 
}
_currentOutline = null
var UIRef = "UIREF:V=1:RID=" + DS.iReportID + ":BID=" + bid + dataCtxtStrAr.join('');
return UIRef;
}
function getElementOrParentLayerWithBid(layer)
{
if (layer==null)
return null
if (layer.getAttribute && "pageContainer" == layer.getAttribute("id")) return null
var bid=layer.getAttribute ? layer.getAttribute("bid") : null
return bid ? layer : getElementOrParentLayerWithBid(layer.parentNode)
}
function getElementOrChildLayerWithBid(layer) 
{
if (layer==null)
return null
var bid=layer.getAttribute ? layer.getAttribute("bid") : null
var ret = null;
if(bid == null)
{
var arr = layer.childNodes;
if(arr && arr.length>0)
{
for(var i=0; i< arr.length; i++)
{
ret = getElementOrChildLayerWithBid(arr[i]);
if(ret!=null)
break;
}
}
}
else
ret = layer;
return ret; 
}
function getDataContextFromLayer(layer, dataCtxtar) {
if (null == layer) return
var bid = getElementOrParentBid(layer);
var tag = layer.tagName 
if (tag == "TD" || tag == "TH") { 
var cid = layer.parentNode.getAttribute("cid"), r=null, c=null, idx = null
var isCol = (null != cid)
var col = layer.getAttribute("c")
var tableLayer = getElementOrParentLayerWithBid(layer.parentNode)
var idref = tableLayer.getAttribute("idref")
if (!isCol && col) { 
cid = getCidFromCol(layer, col)
} else if (col) { 
getDatapath(idref, getCidFromCol(layer, col), idx, false, dataCtxtar)
}
if (null != cid) {
getDatapath(idref, cid, idx, isCol, dataCtxtar)  
getDataContextFromLayer(tableLayer, dataCtxtar) 
} else {
getDataContextFromLayer(getElementOrParentLayerWithBid(layer.parentNode), dataCtxtar)
}
} else if (tag == "TABLE") {
getDataContextFromLayer(getElementOrParentLayerWithBid(layer.parentNode), dataCtxtar)
} else {
var sectionLayer = getSectionLayer(layer, bid)
if (null != sectionLayer) {
var idref = getElementOrParentIdref(sectionLayer.parentNode.parentNode);
if (!idref) return dataCtxtar;
var cid = sectionLayer.parentNode.getAttribute("cid")
if (cid)
{
getDatapath(idref, cid, 0, true, dataCtxtar)
} 
}
getDataContextFromLayer(getElementOrParentLayerWithBid(layer.parentNode), dataCtxtar)
}
return dataCtxtar
}
 function getCidFromCol(layer, col) {
col = parseInt(col)
var cols = layer.parentNode.parentNode.parentNode.childNodes[1].childNodes
for (var i = 0; i < cols.length; i++) {
if (col == parseInt(cols[i].getAttribute("c"))) {
return parseInt(cols[i].getAttribute("cid"))
}
}
return null
}
_currentOutline = null
function getDataContext(elt, layer, container) {
_currentOutline = getReportFrame().JSONDATA.outline
var dataCtxtar = new Array();
if (isTableCell(elt) && !container)
{
var blockType = elt.parent.parent.blockType
if (blockType == "xTable")
{
var datapath2 = new Array();
getDatapathFromIdref(layer, true, datapath2);
datapath2.each(function (item) { dataCtxtar.push(item) });
datapath2.clear()
getDatapathFromIdref(elt, layer, false, datapath2);
datapath2.each(function (item) { dataCtxtar.push(item) });
} else {
getDatapathFromIdref(layer, (blockType == "vTable"), dataCtxtar);
}
} else {
getDatapathFromIdref(container?layer.parentNode.parentNode.parentNode.parentNode:layer, true, dataCtxtar);
}
_currentOutline = null
return dataCtxtar
}
function getDatapathFromIdref(layer, isRow, ctxtAR) {
var bid = getElementOrParentBid(layer);
var elt = findByBID(doc, bid)
if (isTableCell(elt))
{
var idref = getElementOrParentIdref(layer.parentNode.parentNode);
if (!idref) return
var index = isRow ? parseInt(layer.getAttribute("c")):parseInt(layer.parentNode.getAttribute("r"))
var cid = ""
if (isRow) {
cid = parseInt(layer.parentNode.getAttribute("cid"))
} else {
var col = parseInt(layer.getAttribute("c"))
var cols = layer.parentNode.parentNode.parentNode.childNodes[1].childNodes
for (var i=0; i < cols.length; i++) {
if (col == parseInt(cols[i].getAttribute("c"))) {
cid = parseInt(cols[i].getAttribute("cid"))
break
}
}
}
if (null == cid) return
getDatapath(idref, cid, index, isRow, ctxtAR)
} else if (isSectionFn(elt)) {
var idref = getElementOrParentIdref(layer.parentNode.parentNode);
if (!idref) return
var cid = parseInt(_ie?layer.parentNode.parentNode.getAttribute("cid"): layer.parentNode.getAttribute("cid"))
if (!cid) return
var index = 0
getDatapath(idref, cid, index, true, ctxtAR)
}
var parent = getParentContainer(elt.parent) 
if (null != parent) {
var cn = parent.className
if ("section" == cn) { 
getDatapathFromIdref(getSectionLayer(layer.parentNode, parent.bid), isRow, ctxtAR)
}
}
}
function getDatapath(idref, cid, idx, isRow, ctxtAR) {
for (var i = 0; i < _currentOutline.length; i++) {
if (idref == _currentOutline[i].ref) {
var outline = _currentOutline[i], ctx = isRow?outline.rctx:outline.cctx, cl = (ctx!=null)?ctx.length:0;
for (var j = 0; j < cl; j++) {
if (ctx[j].id == cid) {
if (ctx[j].datapath) {
var datapath = ctx[j].datapath, dl = datapath.length
for (var k = 0; k < dl; k++) {
ctxtAR.push(datapath[k])
}
}
break
}
}
break
}
}
}
function getSectionLayer(l, bid) {
if (l==null || bid==null) {
return null
}
var currBid = l.getAttribute?l.getAttribute("bid"):null
if (currBid == bid)
{
var isSect = (null != l.getAttribute("isSection"))
if (isSect)
{
return l
}
} else {
l = getSectionLayer(l.parentNode, bid)
if (l != null) {
return l
}
}
return null
}
function restoreSelectionInViewing()
{
var fr=getReportFrame()
var canRestoreIdRef = false;
var layer = null;
if (selectedIdRef != null) {
selectedIdRef.each(function(pair) {
var idref = pair.key;
layer = getLayerByIdRef(idref, null);
if(layer)
{
selectLayer(layer,true);
canRestoreIdRef = true;
}
else
selectedIdRef.unset(idref);
});
}
if(doc==null && canRestoreIdRef)
{
wt();
var url =  _root + "ajaxWomForViewing" + _appExt
url += urlParamsNoBID();
ajaxUpdater({"url":url, "postCB":updateWomForViewing, "ajaxErrorCB":manageAjaxError});
}
if(canRestoreIdRef && _foldPanelVisible==1)
{
_currentSelTableLayer = getElementOrParentLayerWithBid(layer.parentNode);
_currentSelTableIdref = ( _currentSelTableLayer!=null)?_currentSelTableLayer.getAttribute("idref"):null;
}
}
function selectionChangedInViewing(fromSelection)
{
eventManager.notify(_EVT_SELECTION_CHANGES_VIEWING, fromSelection)
}
function selectCellInViewing(layer, isTableCell)
{
unselectCellInViewing(); 
var infoLayer = getElementOrParentLayerWithBid(layer);
if(infoLayer == null) return;
var idref = infoLayer.getAttribute("idref");
var bid = infoLayer.getAttribute("bid");
if(idref!=null)
{
_currentSelTableLayer = isTableCell?getElementOrParentLayerWithBid(infoLayer.parentNode):null;
_currentSelTableIdref = ( _currentSelTableLayer!=null)?_currentSelTableLayer.getAttribute("idref"):null;
selectedIdRef.set(idref,bid); 
selectLayer(infoLayer,true); 
if(doc==null)
{
var url =  _root + "ajaxWomForViewing" + _appExt
url += urlParamsNoBID();
ajaxUpdater({"url":url, "postCB":updateWomForViewing, "ajaxErrorCB":manageAjaxError});
}
else
{
selectionChangedInViewing(true); 
}
}
}
function updateWomForViewing(jsObj)
{
doc = jsObj;
setParentPointer(doc);
selectionChangedInViewing(true); 
hideWt();
}
function setParentPointer(obj, par)
{
if (par != null) 
{
obj.parent = par
}
var children = obj.children;
if (children)
{
var len = children.length;
for (var i=0; i<len; i++)
{
setParentPointer(children[i],obj);
}
}
}
function unselectCellInViewing()
{
if (selectedIdRef != null)
{
selectedIdRef.each(function(pair) {
var idref = pair.key;
var layer = getLayerByIdRef(idref, null);
selectedIdRef.unset(idref);
if(layer)
selectLayer(layer,false);
});
}
}
function getSelectedEltInViewing()
{
var elt = null;
if (selectedIdRef != null)
{
selectedIdRef.each(function(pair) {
var bid = pair.value;
elt=findByBID(doc,bid);
});
}
return elt;
}
function updateFoldUnfoldCB(evt,data)
{
if(!isReadingMode()) return; 
if(doc != null )
{
if (_foldPanelVisible == 1) 
{
_isTableSelectedForFold = !(data==false); 
var elt = getSelectedEltInViewing();
self.frames['Report'].frames['FoldPanel'].changeFoldPanelForTables(null,_foldPanelVisible,_isTableSelectedForFold,null,doc,elt);
} 
}
}
function updateFreezeCB(evt,data)
{
if(!isReadingMode()) return; 
if(data == false || doc == null ) 
updateFreezeHeaderToolbar(null);
if(doc != null )
{
var elt = getSelectedEltInViewing();
updateFreezeHeaderToolbar(elt);
}
}
function updateFreezeInfoCB()
{
_selectedFreezeBids = null;
var fr = getReportFrame();
if(fr && fr.JSONDATA && fr.JSONDATA.outline)
{
var outline = fr.JSONDATA.outline;
  for( var i=0; i<outline.length; i++)
{
var ol = outline[i];
 var fh = ol.freeze;
 if(fh)
 {
 var freezeInfo = { bid:ol.bid,
bFreezeHHeader:fh.hheader?fh.hheader:false,
bFreezeVHeader:fh.vheader?fh.vheader:false, 
freezeRowIndex:fh.row?fh.row:0, 
freezeColIndex:fh.col?fh.col:0};
updateFreezeBids(freezeInfo);
 }
}
}
}
function updateFreezeHeaderToolbar(elt)
{
if(elt == null)
_currWorkbench.getAction("freezeHeaders").setDisabled(true);
else
{
var right= isEnableUserRight(WS._usrEditDocumentFormatting)
var canShowHeader = (allowFreezeHeader() && isTableCell(elt));
_currWorkbench.getAction("freezeHeaders").setDisabled(!(canShowHeader && right));
traceLog(elt.bid +" "+elt.row +" "+ elt.col + "  "+ elt.parent.parent.blockType);
}
} 
function isReadingMode()
{
return (!isInteractive && !isPDF);
}
function allowFreezeHeader()
{
return (isReadingMode() && (DS.strPageMode=='QuickDisplay'));
}
function freezeHeaderScrollCB()
{
if(!allowFreezeHeader() || _selectedFreezeBids == null || _selectedFreezeBids.size()==0) return;
 var z=getZoom()/100; 
 var fr = getReportFrame();
 var body = fr.document.body;
 var outline = fr.JSONDATA.outline;
 var scrollTop = Math.round(body.scrollTop/z)-1;
 var scrollLeft = Math.round(body.scrollLeft/z)-1;
 for( var i=0; i<outline.length; i++)
 {
 var ol = outline[i];
 var ref = ol.ref, bid = ol.bid;
var freezeInfo = _selectedFreezeBids.get(bid); 
if(freezeInfo)
{
var l=ol.layer;
if(l==null)
{
l=idRefTable.get(ref);
if(l==null)
 l= getLayerByIdRef(ref, null);
ol.layer=l;
}
if(l)
{
freeze(l,ol,{top:scrollTop,left:scrollLeft},freezeInfo);
}
}
 }
}
function getBorderSpacing(l)
{
var borderSpacing = new Array(0,0);
if (l && l.style && ('borderSpacing' in l.style))
{
borderSpacing = l.style.borderSpacing.split(" ");
for(var i =0; i< borderSpacing.length;i++)
{
borderSpacing[i] = parseInt(borderSpacing[i]);
}
}
if (borderSpacing.length==1)
{
borderSpacing = new Array(0,0);
}
return borderSpacing;
}
function getHVSpacing(l)
{
var HVSpacing = new Array(0,0);
var cellSpacing =  parseInt(l.cellSpacing);
var borderSpacing = getBorderSpacing(l);
HVSpacing[0] = isNaN(cellSpacing)? borderSpacing[0]:cellSpacing;  
HVSpacing[1] = isNaN(cellSpacing)? borderSpacing[1]:cellSpacing;  
return HVSpacing;
}
function freeze(l,ol,scroll,freezeInfo)
{
var fr = getReportFrame();
var isRowFreeze = (freezeInfo.bFreezeHHeader || freezeInfo.freezeRowIndex>0); 
var isColFreeze = (freezeInfo.bFreezeVHeader || freezeInfo.freezeColIndex>0); 
var pos = getPos(l);
var scrollTop = scroll.top;
var scrollLeft = scroll.left;
var topBorderWidth = parseInt(getCurrentStyle(l, "border-top-width"));
var leftBorderWidth = parseInt(getCurrentStyle(l, "border-left-width"));
var cellSpacing =  parseInt(l.cellSpacing);
var borderSpacing = getHVSpacing(l);
var tableHeaderTop = pos.y + topBorderWidth + borderSpacing[1];
var tableLeft = pos.x; 
var tableTop = pos.y;
var tableHeaderLeft = pos.x  + leftBorderWidth + borderSpacing[0];
traceLog("scrollLeft "+ scrollLeft +" pos.x : "+ pos.x+ "leftBorderWidth:"+leftBorderWidth + " cellSpacing:" +cellSpacing + " tableHeaderLeft"+tableHeaderLeft);
var tableWidth = ol.cband.w;
var tableRight = tableLeft+tableWidth;
var tableHeight = ol.rband.h;
var tableBottom = tableTop+tableHeight;
if((tableTop>(scrollTop + winHeight(fr))) || 
(tableBottom<scrollTop ) || 
(tableLeft>(scrollLeft + winWidth(fr))) || 
(tableRight<scrollLeft )) 
return;
var freezeHeader, divId, divHeader, freezeIndex;
if(isRowFreeze) 
{
freezeHeader = (freezeInfo.bFreezeHHeader);
if(freezeHeader || freezeInfo.freezeRowIndex > 0)
{
if(freezeInfo.freezeRowIndex > ol.rband.ed)
freezeIndex = ol.rband.ed+1;
else
freezeIndex = freezeInfo.freezeRowIndex;
var rband = freezeHeader?findBandInfo(ol.rband, tableHeaderTop, scrollTop,true):ol.rband;
processFreeze(fr,l,ol,true,freezeHeader?null:freezeIndex,rband,scrollTop,tableHeaderTop, tableBottom);
}
}
if(isColFreeze)
{
freezeHeader = (freezeInfo.bFreezeVHeader);
if(freezeHeader || freezeInfo.freezeColIndex >0)
{
if(freezeInfo.freezeColIndex > ol.cband.ed)
freezeIndex = ol.cband.ed+1;
else
freezeIndex = freezeInfo.freezeColIndex;
var cband = freezeHeader?findBandInfo(ol.cband, tableHeaderLeft, scrollLeft,false):ol.cband;
processFreeze(fr,l,ol,false,freezeHeader?null:freezeIndex,cband,scrollLeft,tableHeaderLeft, tableRight);
}
}
showHideFreezeHeaderIntersection(fr,l,ol);
}
function resizeCellHeight(node, height, k)
{
if (!node || typeof(node)=="undefined")return 0;
var hFromKToEndOFHeader = 0; 
for (var j=k;j<height.length;j++)
{
hFromKToEndOFHeader = hFromKToEndOFHeader + height[j];
}
if(node.childNodes)
{
 var len = node.childNodes.length;
 for(var i=0; i<len;i++)
 {
var rowSpan = parseInt(node.childNodes[i].getAttribute("rowSpan"));
if (rowSpan && typeof(rowSpan)!="undefined" && rowSpan > 1)
{
if(node.childNodes[i].style 
&& node.childNodes[i].style.height 
&& typeof(node.childNodes[i].style.height!="undefined")
&& parseInt(node.childNodes[i].style.height) > hFromKToEndOFHeader)
{
node.childNodes[i].style.height = hFromKToEndOFHeader;
}
}
 }
}
}
function getFreezeHeaderHeight(l,startIndex,endIndex)
{
if (!l || typeof(l)=="undefined")return 0;
var height= new Array;
var i = 0;
for(var j=startIndex; j<endIndex; j++)
{
height[i] = getMinHeight(l.rows[j]);
i++;
}
return height;
}
function getMinHeight(node)
{
if (!node || typeof(node)=="undefined")return 0;
var minHeight = 0;
if(node.childNodes)
{
 var len = node.childNodes.length;
 for(var i=0; i<len;i++)
 {
if (node.childNodes[i].style && node.childNodes[i].style.height && typeof(node.childNodes[i].style.height)!="undefined")
{
if (minHeight == 0)
{
minHeight = parseInt(node.childNodes[i].style.height);
}
else if (parseInt(node.childNodes[i].style.height) < minHeight)
{
minHeight = parseInt(node.childNodes[i].style.height);
}
}
 }
}
return minHeight;
}
function processFreeze(fr,l,ol,isRow,index,band,scrollPos,tablePos,tableLimit)
{
var freezeHeader = (index == null);
var divFreezeZone = getFreezeDiv(fr,freezeHeader,isRow,ol);
var tableFreezeZone = divFreezeZone?divFreezeZone.childNodes[0]:null;
var freezeZoneHW=0;
if(freezeHeader)
{
freezeZoneHW=(isRow?(band?band.hdh:0):(band?band.hdw:0));
}
else 
{
freezeZoneHW=(isRow?(tableFreezeZone?tableFreezeZone.offsetHeight:0):(tableFreezeZone?tableFreezeZone.offsetWidth:0));
}
var freezeZonePos = Math.min(Math.max(tablePos, scrollPos), Math.max(tablePos, (tableLimit - freezeZoneHW)));
var doFreeze = ((scrollPos>tablePos) && (band!=null))
if(doFreeze)
{
var startHeaderIdx = band.bg;
var changeHeaderHTML = false;
var nbHeader = freezeHeader?parseInt(band.hd):index;
if(divFreezeZone == null)
{
var divId = getFreezeDivId(freezeHeader,isRow,ol.ref); 
divFreezeZone =  fr.document.createElement('div');
divFreezeZone.id = divId;
divFreezeZone.style.position = "absolute";
divFreezeZone.className=(_ie&& !_ie9R)?"shadowie":"shadow";
setFreezeDiv(isRow,ol,divFreezeZone);
divFreezeZone.userData={bandBG:startHeaderIdx,bandED:nbHeader, firstDraw:true, isHeader:freezeHeader};
var sis = l.nextSibling;
l.parentNode.insertBefore(divFreezeZone,sis);
tableFreezeZone =  fr.document.createElement('table');
changeHeaderHTML = true; 
}
else
{
if((startHeaderIdx != divFreezeZone.userData.bandBG) || (nbHeader != divFreezeZone.userData.bandED))
{
divFreezeZone.userData={bandBG:startHeaderIdx,bandED:nbHeader,firstDraw:freezeHeader?false:true, isHeader:freezeHeader}; 
changeHeaderHTML = true; 
divFreezeZone.userData.changeHTML = true; 
tableFreezeZone.parentNode.removeChild(tableFreezeZone);
tableFreezeZone =  fr.document.createElement('table');
if(!freezeHeader)
{
divFreezeZone.style.width = "auto";
divFreezeZone.style.height = "auto"
}
}
}
if(changeHeaderHTML)
{
var trHeader = null;
setSelectionBeforeAfterCloning(false);
if(isRow)
{
var colgroup = l.getElementsByTagName ("colgroup")[0];
if(colgroup!=null)
{
tableFreezeZone.appendChild(colgroup.cloneNode(true));
}
var headerHeight = getFreezeHeaderHeight(l,startHeaderIdx,nbHeader+startHeaderIdx);
var k = 0;
for(var j=startHeaderIdx; j<(nbHeader+startHeaderIdx); j++)
{
trHeader = l.rows[j].cloneNode(true);
iterCustomizeAttributes(trHeader,l.rows[j],fr);
resizeCellHeight(trHeader, headerHeight, k);
k++;
tableFreezeZone.appendChild(trHeader);
}
}
else
{
var nbCols = ol.cband.ed;
var startRow = parseInt(ol.rband.bg);
var endRow = parseInt(ol.rband.ed);
var trNbCols = 0, colIndex=0;
var colgroups = ol.layer.getElementsByTagName ("colgroup");
if (colgroups!=null)
{
var colgroup = colgroups[0];
}
for(var j=startRow; j<=endRow; j++)
{
trHeader = l.rows[j].cloneNode(true);
trNbCols = trHeader.childNodes.length-1;
var lastCol=false
for(var k=trNbCols; k>=0; k--)
{
var item = trHeader.childNodes[k];
colIndex = k;
if(nbCols!=trNbCols) 
{
colIndex = parseInt(item.getAttribute("c")); 
}
if(colIndex>=(nbHeader+startHeaderIdx) || colIndex<startHeaderIdx)
{
trHeader.removeChild(item);
}
else
{
if (index!=null)
{
if (!lastCol)
{
lastCol=true;
if(colgroup!=null)
{
var colspan = parseInt(item.getAttribute("colspan"));
if (colspan>1)
{
item.colSpan=index-colIndex;
var orgWidth=0;
for(var i=0;i<index-colIndex;i++)
{
var width = colgroup.childNodes[colIndex+i].getAttribute("width");
if (width != null)
{
orgWidth=orgWidth+parseInt(width)
}
else
{
var style=colgroup.childNodes[colIndex+i].getAttribute("style");
if (style != null)
{
var styleArr=style.split(':');
var styleWidth=styleArr[1];
orgWidth=orgWidth+parseInt(styleWidth)
}
}
}
if (item.style.width)
{
if (colspan!=index-colIndex)
item.style.width=orgWidth;
if (item.firstChild.style.width)
item.firstChild.style.width=item.style.width;
}
}
}
}
}
}
}
iterCustomizeAttributes(trHeader,l.rows[j],fr);
tableFreezeZone.appendChild(trHeader);
}
}
setSelectionBeforeAfterCloning(true);
if (isNaN(parseInt(l.cellSpacing)))
{
tableFreezeZone.style.borderSpacing = l.style.borderSpacing;
}else
{
tableFreezeZone.cellSpacing=l.cellSpacing;
}
tableFreezeZone.cellPadding=l.cellPadding;
tableFreezeZone.className=l.className; 
tableFreezeZone.style.border="none";
if(_ie)
{
divFreezeZone.innerHTML = tableFreezeZone.outerHTML;
tableFreezeZone = divFreezeZone.childNodes[0]
}
else 
divFreezeZone.appendChild(tableFreezeZone);
customizeAttributes(tableFreezeZone,ol,fr);
}
var topBorderWidth = parseInt(getCurrentStyle(l, "border-top-width"));
var leftBorderWidth = parseInt(getCurrentStyle(l, "border-left-width"));
if(!_ie)
{
if(topBorderWidth==1) topBorderWidth=0;
if(leftBorderWidth==1) leftBorderWidth=0;
}
var bgc = getCurrentStyle(l, "background-color");
var bgi = getCurrentStyle(l, "background-image");
if((bgc=="transparent" || bgc=="rgba(0, 0, 0, 0)") &&  bgi=="none")
{
divFreezeZone.style.backgroundColor="white";
}
var relativePos = (freezeZonePos-tablePos)+ parseInt(isRow?l.style.top:l.style.left);
if(isRow)
{
divFreezeZone.style.top = ""+ (relativePos+topBorderWidth) +"px";
divFreezeZone.style.left = ""+ (parseInt(l.style.left)+ leftBorderWidth) +"px";
}
else
{
divFreezeZone.style.top = ""+ (parseInt(l.style.top)+topBorderWidth) +"px";
divFreezeZone.style.left = ""+(relativePos+leftBorderWidth) +"px";
}
divFreezeZone.style.visibility=_show;
if(changeHeaderHTML && divFreezeZone.userData.firstDraw) 
{
var borderSpacing = getHVSpacing(l);
if(isRow)
{
var divH = parseInt(tableFreezeZone.offsetHeight)-parseInt(borderSpacing[1]);
if(divH>0)
divFreezeZone.style.height=""+divH+"px";
}
else
{
var divW = parseInt(tableFreezeZone.offsetWidth)-parseInt(borderSpacing[0]);
if(divW)
divFreezeZone.style.width=""+divW+"px";
}
divFreezeZone.style.overflow="hidden";
}
traceLog("bid:"+ol.bid+" freeze:"+divFreezeZone.style.top + ":" +divFreezeZone.style.left);
}
else
{
if(divFreezeZone)
{
divFreezeZone.style.visibility=_hide;
}
}
}
function showHideFreezeHeaderIntersection(fr,l,ol)
{
var showFreezeIntersection = (ol.divRow!=null && ol.divCol!=null);
var divFreezeIntersection= getFreezeDiv(fr,null,null,ol,true);
if(showFreezeIntersection)
{
var rowHeader = ol.divRow;
var colHeader = ol.divCol;
var divHeader = (ol.divCol.userData.isHeader?ol.divCol:ol.divRow);
var changeHeaderHTML=false;
var firstDrawHTML=false;
showFreezeIntersection = (rowHeader.style.visibility==_show && colHeader.style.visibility==_show);
if(showFreezeIntersection)
{
if(divFreezeIntersection==null) 
{
var divId = getFreezeDivId(null,null,ol.ref,true); 
divFreezeIntersection =  fr.document.createElement('div');
divFreezeIntersection.id = divId;
divFreezeIntersection.style.position = "absolute";
divFreezeIntersection.className=(_ie&& !_ie9R)?"shadowie":"shadow";
divFreezeIntersection.style.backgroundColor= divHeader.style.backgroundColor;
var sis = l.nextSibling.nextSibling.nextSibling;
l.parentNode.insertBefore(divFreezeIntersection,sis);
setFreezeDiv(null,ol,divFreezeIntersection,true);
firstDrawHTML = true;
}
if(rowHeader.userData.changeHTML || colHeader.userData.changeHTML)
{
changeHeaderHTML = true;
rowHeader.userData.changeHTML = false;
colHeader.userData.changeHTML = false;
}
if(firstDrawHTML || changeHeaderHTML )
{
var tableIntersection = null;
if(changeHeaderHTML) 
{
tableIntersection = divFreezeIntersection.childNodes[0];
if(tableIntersection)
divFreezeIntersection.removeChild(tableIntersection);
}
var tableFreezeZone = divHeader.childNodes[0];
tableIntersection = tableFreezeZone.cloneNode(true);
if(divHeader==rowHeader && _ie9R)
{
var startIdx = colHeader.userData.bandBG;
var endIdx = colHeader.userData.bandED;
var rows = tableIntersection.rows;
var len=rows.length;
for(var i=0; i<len; i++)
{
var trHeader = rows[i];
var trNbCols = trHeader.childNodes.length-1;
for(var k=trNbCols; k>=0; k--)
{
var item = trHeader.childNodes[k];
if(k>=endIdx || k<startIdx)
{
trHeader.removeChild(item);
}
}
}
}
divFreezeIntersection.appendChild(tableIntersection);
customizeAttributes(tableIntersection,ol,fr);
}
if(divFreezeIntersection)
{
divFreezeIntersection.style.height=rowHeader.style.height;
divFreezeIntersection.style.width=colHeader.style.width;
divFreezeIntersection.style.top = rowHeader.style.top;
divFreezeIntersection.style.left = colHeader.style.left;
divFreezeIntersection.style.visibility=_show;
divFreezeIntersection.style.overflow="hidden";
}
}
}
if(!showFreezeIntersection && divFreezeIntersection!=null)
divFreezeIntersection.style.visibility=_hide;
}
function getFreezeDivId(isFreezeHeader,isRow,ref,isIntersection)
{
var prefix = isFreezeHeader?(isRow?"freezeRowHeader":"freezeColHeader"):(isRow?"freezeRow":"freezeCol");
if(isIntersection)
prefix="freezeInter";
var s=prefix+"_";
var c=null;
for(var i=0; i<ref.length; i++)
{
c=ref.charAt(i); 
s+=c;
if(c != c.toLowerCase() ) 
{
s+="_";
}
}
return s; 
}
function getFreezeDiv(fr,isFreezeHeader,isRow,ol,isIntersection)
{
var divHeader = null;
if(isIntersection)
{
divHeader = ol.divInter;
}
else if(isRow && ol.divRow || !isRow&& ol.divCol)
{
divHeader=isRow?ol.divRow:ol.divCol;
}
return divHeader;
}
function setFreezeDiv(isRow,ol, divHeader,isIntersection)
{
if(isIntersection)
{
ol.divInter=divHeader;
}
else
{
if(isRow)
ol.divRow=divHeader;
else
ol.divCol=divHeader;
}
}
function findBandInfo(band, posStart, posScroll, isRow)
{
if(band==null  || posStart>posScroll || (posStart + (isRow?band.h:band.w))< posScroll) 
return null;
var hasHeader = isRow?(band.hdh!=null):(band.hdw!=null); 
var goodBand = hasHeader?band:null; 
var sumBandHW=0;
var subBand = isRow?band.rband:band.cband;
if(subBand && !hasHeader)
{
var b,subb,bhw;
for(var i=0; i<subBand.length;i++)
{
b = subBand[i];
hasHeader= (b.hd !=null) ; 
if(((posStart +sumBandHW ) < posScroll) && ((posStart +sumBandHW + (isRow?b.h:b.w) ) > posScroll)) 
{
goodBand = hasHeader?b:goodBand;
subb=isRow?b.rband:b.cband;
if(subb)
{
bhw = isRow?(b.hdh?b.hdh:0):(b.hdw?b.hdw:0);
b = findBandInfo(b, (posStart+bhw+sumBandHW), posScroll, isRow);
if(b!=null)
goodBand = b;
} 
break;
} 
sumBandHW += isRow?b.h:b.w;
}
}
return goodBand;
}
function hideFrozenHeaders(freezeInfo)
{
 var fr = getReportFrame(); 
 var outline = fr.JSONDATA.outline;
for( var i=0; i<outline.length; i++)
 {
 var ol = outline[i];
var hideHHeader = (ol.bid == freezeInfo.bid && freezeInfo.bFreezeHHeader==false && freezeInfo.freezeRowIndex==0 );
var hideVHeader = (ol.bid == freezeInfo.bid && freezeInfo.bFreezeVHeader==false && freezeInfo.freezeColIndex==0);
var hideInter = (hideHHeader || hideVHeader);
var ref = ol.ref;
var divheader =  null, divId;
if(hideHHeader)
{
divheader = getFreezeDiv(fr,true,true,ol);
if(divheader)
divheader.style.visibility=_hide;
}
if(hideVHeader)
{
divheader =  getFreezeDiv(fr,true,false,ol);
if(divheader)
divheader.style.visibility=_hide;
}
if(hideInter && ol.divInter)
ol.divInter.style.visibility=_hide;
}
}
function customizeAttributes(tableFreezeZone,ol,fr)
{
tableFreezeZone.setAttribute("bid",ol.bid);
addBOEvents(tableFreezeZone,null,fr);
}
function iterCustomizeAttributes(node,l,fr)
{
if(node == null) return;
var layer = null; 
if(node.getAttribute)
{
var bid = node.getAttribute("bid");
if(bid)
{
node.setAttribute("isFreeze",true);
}
var idref = node.getAttribute("idref");
if(idref)
{
layer = getLayerByIdRef(idref,l);
var drillinfo = layer.getAttribute("drill"); 
if(drillinfo)
node.setAttribute("drill",drillinfo);
var datapath = layer.getAttribute("datapath"); 
if(datapath)
{
node.setAttribute("datapath",datapath);
node.onmousemove=fr.bif_table_mmove;
node.onmouseout=fr.bif_table_mout;
node.onclick=fr.bif_table_clickCB;
node.onmousedown = fr.bif_stopSelectingCB;
node.oncontextmenu = fr.bif_stopSelectingCB;
node.onmouseup = fr.bif_stopSelectingCB;
node.selBid=layer.selBid;
node.blkBid=layer.blkBid;
node.boname=layer.boname;
}
}
}
if(node.childNodes)
{
 var len = node.childNodes.length;
 for(var i=0; i<len;i++)
 {
 iterCustomizeAttributes( node.childNodes[i],(layer?layer:l),fr);
 }
}
}
function setSelectionBeforeAfterCloning(sel)
{
if (selectedIdRef != null)
{
selectedIdRef.each(function(pair) {
var idref = pair.key;
var layer = getLayerByIdRef(idref, null);
if(layer)
selectLayer(layer,sel);
});
}
}
_selectedFreezeBids=null;
function updateFreezeBids(freezeInfo)
{
if(_selectedFreezeBids == null)
_selectedFreezeBids=new Hash;
if(freezeInfo && freezeInfo.bid)
{
var bid = freezeInfo.bid;
var tableInfo = getFreezeInfoFromBid(bid);
if(tableInfo) 
_selectedFreezeBids.unset(bid)
 if(containsFreezeInfo(freezeInfo))
 _selectedFreezeBids.set(bid,freezeInfo);
}
}
function containsFreezeInfo(freezeInfo)
{
return (freezeInfo.bFreezeHHeader || freezeInfo.bFreezeVHeader || freezeInfo.freezeColIndex>0 || freezeInfo.freezeRowIndex>0);
}
function getFreezeInfoFromBid(bid)
{
var tableInfo = null;
if(_selectedFreezeBids!=null)
{
_selectedFreezeBids.each(function(item) {
  if(item.key == bid)
{
tableInfo = item.value;
throw $break;
}
});
}
return tableInfo;
}
function processFreezeHeader(bid,freezeInfo)
{
if(freezeInfo == null)
freezeInfo =  getFreezeInfoFromBid(bid);
var p = urlParamsNoBID()+"&sBid="+bid;
p+="&bFreezeHHeader="+freezeInfo.bFreezeHHeader;
p+="&bFreezeVHeader="+freezeInfo.bFreezeVHeader;
p+="&freezeIndex="+((freezeInfo.freezeColIndex>0)?freezeInfo.freezeColIndex:freezeInfo.freezeRowIndex);
frameNav("DlgFrame", _root + "processFreezeHeader" + _appExt + p);
}
function beforeShowFreezeMenuCB()
{
var m=this;
var block = getBlock(getSelectedEltInViewing());
var isVTable = isVerticalTable(block);
var isHTable = isHorizontalTable(block);
var isXTable = isCrossTable(block);
var freezeInfo = getFreezeInfoFromBid(block.bid);
var bFreezeHHeader = freezeInfo?freezeInfo.bFreezeHHeader:false;
var bFreezeVHeader = freezeInfo?freezeInfo.bFreezeVHeader:false;
var bFreezeIndex = (freezeInfo?(isVTable?freezeInfo.freezeColIndex:(isHTable?freezeInfo.freezeRowIndex:0)):0);
var hHeaderItem = m.getItemByActionId("freezeHHeader");
var vHeaderItem = m.getItemByActionId("freezeVHeader");
hHeaderItem.check(bFreezeHHeader);
vHeaderItem.check(bFreezeVHeader);
hHeaderItem.show(isVTable || isXTable);
vHeaderItem.show(isHTable || isXTable );
var title = m.getItemByID("freezeTitle");
var sm=null;
if(title == null) 
{
title = m.insertTitle(2,"freezeTitle","Freeze Left Columns");
title.init();
}
title.show(!isCrossTable(block));
title.setText(isVerticalTable(block)?"Freeze Left Columns":"Freeze Top Rows");
for(var i=0;i<6;i++)
{
sm=m.getItemByActionId("freeze"+i);
sm.show(!isXTable);
sm.check(i==bFreezeIndex);
}
}
function setReportTooltipOffset(fr)
{
var borderPos = workbenchW.getPerspective().getContentFrameCoordinates(), outlineW = 0, outlineH = 0;
var dx = borderPos.x - (_saf ? getScrollX(fr) : 0) , dy = borderPos.y - (_saf ? getScrollY(fr) : 0);
if ("1" == _foldPanelVisible) {
var fufFrame = self.frames['Report'].frames['FoldPanel'];
outlineW = fufFrame._foldPanelWidth;
outlineH = fufFrame._foldHorPanelHeight;
}
setTooltipOffset(dx + outlineW, dy + outlineH);
}
toRefreshObs=newObserverTwoEvents(_EVT_TO_REFRESH_DOCUMENT,_EVT_PAGE_LOADED,toRefreshDocument);
function parseReport() 
{
if(!_ie) return;
var nbOfLink = 0
var fr = getReportFrame();
var curDoc = fr.document;
var elemLinks = curDoc.getElementsByTagName('a');
for (i = 0; i < elemLinks.length; i++) {
var elem = elemLinks[i];
var href = elem.href;
var isOpenDocLink = false;
if (href.indexOf('openDocument.jsp') >= 0) {
elem.setAttribute('weblink',href);
isOpenDocLink = true;
}
else if (href.indexOf('javascript:void(0)') >= 0) {
href = elem.href;
isOpenDocLink = true;
}
if (isOpenDocLink && href != null && href != '') {
if(elem.addEventListener)
elem.addEventListener("click",submitOpenDocForm); 
else
elem.onclick=submitOpenDocForm;
nbOfLink++;
}
}
if(nbOfLink)
{
var form = fr.document.createElement("form");
form.setAttribute('method','post');
form.setAttribute('id','openDocForm');
form.setAttribute('name','openDocForm');
fr.document.body.appendChild(form);
}
}
function submitOpenDocForm()
{
var elem=this
if (elem != null) {
var href = elem.getAttribute('weblink');
if (href != null) {
var sWindow = '';
var iPos = href.indexOf('?');
var openDocURL = href;
var iPos2 = openDocURL.indexOf('/BOE');
openDocURL = openDocURL.substring(0, iPos2) + '/BOE/OpenDocument/opendoc/openDocument.jsp';
var qs = href.substring(iPos + 1);
var arr = qs.split('&');
var html = '';
for (var i=0; i<arr.length; i++) {
var param = arr[i];
var key = '', val = '';
iPos = param.indexOf('=');
if (iPos >= 0) {
key = param.substring(0, iPos);
val = param.substring(iPos + 1);
}
else {
key = param;
}
html += '<input type="hidden" name="' + decodeURIComponent(key.replace(/\+/g, '%20')) + '" value="' + decodeURIComponent(val.replace(/\+/g, '%20')) + '" />';
if (key == 'sWindow') {
sWindow = val;
}
}
var fr = getReportFrame();
var form = fr.document.getElementById('openDocForm');
form.setAttribute('action',openDocURL);
form.innerHTML = html;
if (sWindow == 'Same') {
 if (parent.WS.infoviewOpenDocFrame != null) {
 form.target = "infoviewOpenDocFrame";
 }
 else {
 form.target = "_parent";
 }
}
else {
form.target = "_blank";
}
form.submit();
e = fr.event;
if (e.preventDefault) e.preventDefault();
if (e.stopPropagation) e.stopPropagation();
e.cancelBubble=true;
e.returnValue=false;
}
}
}
