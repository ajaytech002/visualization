/*
=============================================================
WebIntelligence(r) Report Panel
Copyright(c) 2001-2005 Business Objects S.A.
All rights reserved

Use and support of this software is governed by the terms
and conditions of the software license agreement and support
policy of Business Objects S.A. and/or its subsidiaries. 
The Business Objects products and technology are protected
by the US patent number 5,555,403 and 6,247,008

=============================================================
*/_previousFoldPanelWidth=null;
_deltaFoldPanelWidth=0;
_previousFoldPanelHeight=null;
_deltaFoldPanelHeight=0;
subHelpObj=null
_initialTabMaxL=null
leftPaneX=0
leftPaneY=0
_reportIdxSrc=null
_isCustomView        = false;
_bshowCVOnLoad       = false;
_isTableSelectedForFold = false;
_copyElemCN   = null
_srcReport    = null
_arrayReports = new Array
_changeReport = false
_paste        = false
_typeBlock  = null 
_typeFormat = null
_usrRMSect = null
_iRMSectTimeoutID = null
_currentSectMsCell = null
_elementBID = new Array
_IsRow = new Array
_arrRMSecElts = new Array
_hCalc = null
_vCalc = null
_isDoc = null
_isBHCheck = null
_isBFCheck = null
_isBHHCheck = null
_isBHFCheck = null
_isBVHCheck = null
_isBVFCheck = null
bidTable=new Hash
selectedBid=new Hash
selectedChartArea=null
_lastSelectedBIDArr=new Array
_keyboardMode = new KeyboardMode();
applyBid= null
_selectedBlockType=null
_targetCopyBid = null
_formatPainterBid = null
_isSingleActionFormatPainter=true
_setFocusToViewer=false
oldSelCell=null
_minResWidth=4
_minResHeight=4
_fcDlgSelectedPane=0 
_ftDlgSelectedPane=0 
_fchartDlgSelectedPane=0  
_fchartDlgSelectedPaneValue=null  
_fchartDlgSelectedAxis='c'  
_fsectDlgSelectedPane=0 
_frDlgSelectedPane=0 
_sortDlgSelectedPane=null
_breakBlockBID=null
_breakBlockID=null
_breakCellBid = null
_breakCellExp = null
_sAxisName=null
_brkCurTab=null
_breakBtnDefaultAction=null
_sortMenuDefaultAction=null
_sortBlockID=null
_sortCellBid = null
_tableBid=null
_rankBlockID=null
_rankCellBid = null
_docGeneralBranchExp = true
_docStatisticsBranchExp = true
_docOptionsBranchExp = true
_dataOptionsBranchExp = true
_parametersBranchExp = true
_queriesBranch = true
_arrQueriesBranch = new Array
_objectsBranch = true
_arrObjectsBranch = new Array
_varsDocBranchExp = false
_formulaeDocBranchExp = false
_elemDDBranchExp = true
_tableElemsBranchExp = true
_chartElemsBranchExp = true
_arrChartElemsBranchExp = new Array(false,false,false,false,false)
_cellsElemBranchExp = true
_formCellsElemBranchExp = true
_pnCellsElemBranchExp = false
_resultObjsBranchExp = true
_varsBranchExp = false
_formulaeBranchExp = true
_availableObjectsOrder = "alpha"
editFilterID=null
editFilterReload=false
_currentFilter=null
_isQPModified=false;
_formatDlgBackgroundImg=new Array;
_cellNone=0
_cellRight=1
_cellBottom=2
_cellContent=3
_cellTop=4
_cellLeft=5
_cellTopLeft=6
_cellTopRight=7
_cellBottomLeft=8
_cellBottomRight=9
BD_NONE = 0
BD_THIN = 1
BD_MEDIUM = 2
BD_THICK = 3
AL_LEFT = 0
AL_CENTER = 1
AL_RIGHT = 2
AL_TOP = 0
AL_BOTTOM = 2
_currColorCombo=null
_currColorCB=null
_labFil=new Array;
_labFil[EQUAL]="Equal to";
_labFil[NOT_EQUAL]="Not Equal to";
_labFil[GREATER]="Greater than";
_labFil[GREATER_OR_EQUAL]="Greater than or Equal to";
_labFil[LESS]="Less than";
_labFil[LESS_OR_EQUAL]="Less than or Equal to";
_labFil[BETWEEN]="Between";
_labFil[NOT_BETWEEN]="Not Between";
_labFil[IN_LIST]="In List";
_labFil[NOT_IN_LIST]="Not In List"
_labFil[IS_NULL]="Is Null"
_labFil[NOT_IS_NULL]="Is not Null"
_labFil[LIKE]="Matches pattern"
_labFil[NOT_LIKE]="Different from pattern"
_labFil[BOTH]="Both"
_labFil[EXCEPT]="Except"
_labFilSymbol=new Array;
_labFilSymbol[EQUAL]="=";
_labFilSymbol[NOT_EQUAL]="!=";
_labFilSymbol[GREATER]=">";
_labFilSymbol[GREATER_OR_EQUAL]=">=";
_labFilSymbol[LESS]="<";
_labFilSymbol[LESS_OR_EQUAL]="<=";
_labOperand=new Array;
_labOperand[AND]="And";
_labOperand[OR]="Or";
_labOperand[BEGINPROMPT]="prompt(\'";
_labOperand[ENDPROMPT]="\')";
_labOperand[OBJECT]="Object";
_labOperand[BASEON]="Based on";
_labOperand[FOREACH]="For Each";
_labOperand[ANY]="Any";
_labOperand[ALL]="All";
_labRankTop="TOP";
_labRankBottom="BOTTOM";
_labRankPercTop="% TOP";
_labRankPercBottom="% BOTTOM";
_labDataType=new Array;
_labDataType[_date]="Date";
_labDataType[_num]="Number";
_labDataType[_txt]="Text";
_labDataType[_dateTime]="Date time";
_objKindTable = new Hash({
"DIMENSION":_ObjType.dim,
"MEASURE":_ObjType.measure,
"ATTRIBUTE":_ObjType.attribute,
"HIERARCHY":_ObjType.hierarchy,
"LEVEL":_ObjType.level
});
_thickness = new Array("None", "Thin", "Medium", "Thick")
_attachH = new Array("None", "Left side of ...", "Right side of ...")
_attachV = new Array("None", "Top side of ...", "Bottom side of ...")
_posH = new Array('Left', 'Center', 'Right')
_posV = new Array('Top', 'Middle', 'Bottom')
_IMG_NORMAL = 0
_IMG_STRETCH = 1
_IMG_TILE = 2
_IMG_HORIZONTAL_TILE = 3
_IMG_VERTICAL_TILE = 4
_dispImg = new Array('Normal', 'Stretch', 'Tile', 'Horizontal Tile', 'Vertical Tile')
var fntSizes=["6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "20", "22", "24", "30", "36", "44"]
_fitToWHArrLen=10;
_fitToWHArr=["automatic", 
            "1 "+"Page", 
            "2 "+"pages",
            "3 "+"pages",
            "4 "+"pages",
            "5 "+"pages", 
            "6 "+"pages",
            "7 "+"pages", 
            "8 "+"pages", 
            "9 "+"pages",
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
_fitToScalingArrLen=14;
_fitToScalingArr=["10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%", "150%", "200%", "300%", "400%",
                10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 300, 400];
var _palettesAr =[   {"id":"corporate", "name":"Corporate"}
    ,{"id":"no","name":"Legacy"}
    ,{"id":"SAP Standard 2011", "name":"Default"}
    ,{"id":"spectrum", "name":"Spectrum"}
    ,{"id":"basic", "name":"Basic"}
    ,{"id":"hue3", "name":"Hue 3"}
,{"id":"hue2", "name":"Hue 2"}
,{"id":"hue1", "name":"Hue 1"}
    ,{"id":"orange", "name":"Orange"}
,{"id":"red", "name":"Red"}
,{"id":"blue", "name":"Blue"}
,{"id":"green", "name":"Green"}
,{"id":"violet", "name":"Violet"}
,{"id":"black&white", "name":"Black and White"}
]
_palettesHashIdName = new Hash({
"corporate" : "Corporate",
    "no" : "Legacy",
"orange" :"Orange",
"red" : "Red",
"blue" :"Blue",
"basic" : "Basic",
"green" : "Green",
"violet" :"Violet",
"hue3" : "Hue 3",
"hue2" : "Hue 2",
"SAP Standard 2011" : "Default",
"hue1" : "Hue 1",
"black&white" : "Black and White",
"spectrum" : "Spectrum"
});
_insertCursorX = 500
_insertCursorY = 500
_insertRow = 0
_insertContainerBid = null
ChartDialogLayout = { "Insert":0, "InsertFull":1, "TurnTo":2, "Edit":3, "TableTurnTo":4}
var _formatCellDlgTab =
{
    general: 0,    
    number:1,
    alignment:2,
    font:3,
    border:4,
    appearance: 5,
    layout:6
};
var _formatTableDlgTab =
{
    general: 0,
    border:1,
    appearance: 2,  
    layout: 3
};
var _formatSectionDlgTab =
{
    general: 0,    
    appearance: 1,  
    layout: 2
};
var _formatReportDlgTab =
{
    general: 0,
    border: 1,
appearance: 2,
layout: 3
}
var _formatReportHdrFtrDlgTab =
{   
    border: 0,
appearance: 1,
layout: 2
}
var  _pageSizeLabelArr =[
    "A4", 
    "A3", 
    "A2", 
    "A1", 
    "A0", 
    "Letter", 
    "6 3/4 Envelope", 
    "A5", 
    "A6", 
    "B4", 
    "B4 (JIS)", 
    "B5", 
    "B5 (JIS)", 
    "Envelope #9", 
    "Envelope C5", 
    "Envelope C6", 
    "Envelope DL", 
    "Executive", 
    "German legal fanfold", 
    "German STD fanfold", 
    "Japanese Envelope Chou #3", 
    "Japanese Envelope Chou #4", 
    "Ledger/Tabloid", 
    "Legal"
];
var  _pageHashSizeId = new Hash({
"A4":"A4",
"A3":"A3",
"A2":"A2",
"A1":"A1",
"A0":"A0",
"Letter":"LETTER",
"6 3/4 Envelope":"SIX_3_4_ENVELOPE",
"A5":"A5",
"A6":"A6",
"B4":"B4",
"B4 (JIS)":"B4_JIS",
"B5":"B5",
"B5 (JIS)":"B5_JIS",
"Envelope #9":"ENVELOPE_9",
"Envelope C5":"ENVELOPE_C5",
"Envelope C6":"ENVELOPE_C6",
"Envelope DL":"ENVELOPE_DL",
"Executive":"EXECUTIVE",
"German legal fanfold":"GERMAN_LEGAL_FANFOLD",
"German STD fanfold":"GERMAN_STD_FANFOLD",
"Japanese Envelope Chou #3":"JAPANESE_ENVELOPE_CHOU_3",
"Japanese Envelope Chou #4":"JAPANESE_ENVELOPE_CHOU_4",
"Ledger/Tabloid":"LEDGER_TABLOID",
"Legal":"LEGAL"
});
var _pageSizeWHPortraitCM = [
{w:20.98 ,h:29.673},
{w:29.673,h:41.961},
{w:41.961,h:59.345},
{w:59.345,h:83.923},
{w:83.923,h:118.692},
{w:21.57 ,h:27.914},
{w:9.191 ,h:16.485},
{w:14.786,h:20.98},
{w:10.49 ,h:14.786},
{w:24.977,h:35.268},
{w:25.676,h:36.366},
{w:17.584,h:24.977},
{w:18.183,h:25.676},
{w:9.791 ,h:22.479},
{w:16.185,h:22.879},
{w:11.389,h:16.185},
{w:10.99 ,h:21.979},
{w:18.398,h:26.645},
{w:21.57 ,h:32.989},
{w:21.57 ,h:30.452},
{w:11.989,h:23.478},
{w: 8.992,h:20.481},
{w:27.914,h:43.14},
{w:21.57 ,h:35.527}
];
var _pageSizeWHPortraitINCH = [
   {w: 8.26 ,h:11.682},
   {w:11.682,h:16.52 },
   {w:16.52 ,h:23.364},
   {w:23.364,h:33.041},
   {w:33.041,h:46.729},
   {w: 8.492,h:10.99},
   {w: 3.619,h:6.49},
   {w: 5.821,h:8.26},
   {w: 4.13 ,h:5.821},
   {w: 9.834,h:13.885},
   {w:10.109,h:14.318},
   {w: 6.923,h: 9.834},
   {w: 7.159,h:10.109},
   {w: 3.855,h: 8.85},
   {w: 6.372,h: 9.007},
   {w: 4.484,h: 6.372},
   {w: 4.327,h: 8.653},
   {w: 7.243,h:10.49},
   {w: 8.492,h:12.988},
   {w: 8.492,h:11.989},
   {w: 4.72 ,h: 9.243},
   {w: 3.54 ,h: 8.063},
   {w:10.99 ,h:16.984},
   {w: 8.492,h: 13.987}
];
var _pageSizeWHPortrait= (WS._unitIsInch)?_pageSizeWHPortraitINCH:_pageSizeWHPortraitCM;   
__unvCUID="";
__unvNAME="";
_IFarr={};
if (!isEnableUserRight(WS._usrEditDocumentFormatting)){
WS._usrEnableTrackDataChanges = "none"
}
function updateActionsUponWSUserRight()
{
    var arr=[
    {actionId:"filterBtn", right:isEnableUserRight(WS._usrCreateEditReportFilter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"editFilter", right:isEnableUserRight(WS._usrCreateEditReportFilter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"removeFilter", right:isEnableUserRight(WS._usrCreateEditReportFilter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"filterSubMenu", right:isEnableUserRight(WS._usrCreateEditReportFilter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"addSumMenu", right:isEnableUserRight(WS._usrCreateEditCalculation), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"calcCount", right:isEnableUserRight(WS._usrCreateEditCalculation), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"addCalculationMenu", right:isEnableUserRight(WS._usrCreateEditCalculation), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertControlMenu", right:isEnableUserRight(WS._usrCreateEditInputControls), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"appliedFormattingRulesMenu", right:isEnableUserRight(WS._usrCreateEditAlerter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"appliedFormattingRulesSubMenu", right:isEnableUserRight(WS._usrCreateEditAlerter), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"breakBtn", right:isEnableUserRight(WS._usrCreateEditBreak), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"breakSubMenu", right:isEnableUserRight(WS._usrCreateEditBreak), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"sortMenu", right:isEnableUserRight(WS._usrCreateEditSort), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"sortSubMenu", right:isEnableUserRight(WS._usrCreateEditSort), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"sendto", right:isEnableUserRight(WS._usrPublishDoc), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"preferences", right:isEnableUserRight(WS._usrEditPreferences), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertVertTableMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertHoriTableMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertCrossTableMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertFormMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertBlankCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertCellMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertSection", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertColumnChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertLineChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertPieChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}    
    ,{actionId:"insertBarChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertPointChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertOtherChartMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}    
    ,{actionId:"addReport", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"duplicateReport", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"deleteReport", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}    
    ,{actionId:"insertRowOrColumnMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}    
    ,{actionId:"paste", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertAReportEltInPageHFSubMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertAReportElementSubMenu", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertIntoTable", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"removeReportElement", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}    
    ,{actionId:"deleteCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"deleteSectionCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertIntoTable.OverTextDimCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertIntoTable.OverMeasureCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"deleteTableCell", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertRow", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
    ,{actionId:"insertCol", right:isEnableUserRight(WS._usrInsertDuplicate), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"trackStatus", right:isEnableUserRight(WS._usrEnableTrackDataChanges), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"tdcActivate", right:isEnableUserRight(WS._usrEnableTrackDataChanges), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"tdcOptions", right:isEnableUserRight(WS._usrEnableTrackDataChanges), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"tdcShowChanges", right:isEnableUserRight(WS._usrEnableTrackDataChanges), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"tdcShowChanges2", right:isEnableUserRight(WS._usrEnableTrackDataChanges), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"variableCreation", right:isEnableUserRight(WS._usrUseFormula ), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"formulaEditor", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"formulaText", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"formulaText", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"formulaOK", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"formulaCancel", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"newVariable", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"editFormula", right:isEnableUserRight(WS._usrUseFormula), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"switchToInteractive", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"structureView", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"designModeMenu", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillLite", right:isEnableUserRight(WS._usrEditDocumentFormatting && WS._usrCreateEditReportFilter), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillMenu", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drill", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"snapshot", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillDown", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillUp", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillBy", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillSubMenu", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"expandChildren", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"expandDescendent", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"collapseChildren", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"symetric", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"expandCollapseAll", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"drillFocus", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"expandCollapseSubMenu", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"foldUnfold", right:isEnableUserRight(WS._usrEditDocumentFormatting), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"findText", right:true, disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"newDocument", right:isEnableUserRight(WS._usrCreateDoc), disabledIfNoRight:true, hideIfNoRight:false}
];
updateActionsWithUserRight(arr);
}
function updateActionsUponDSUserRight()
{   
    var arr=[
{actionId:"exportMenu", right:isEnableUserRight(_usrDownloadDocMenu), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"export", right:isEnableUserRight(_usrDownloadExcelOrPDF), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"savePDF", right:isEnableUserRight(DS._usrDownloadPDF), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveXLS", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveXLSX", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveTXT", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveCSVOp", right:isEnableUserRight(DS._usrDownloadCSV), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveCSVReport", right:isEnableUserRight(DS._usrDownloadCSV), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveCSVReports", right:isEnableUserRight(DS._usrDownloadCSV), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveReportPDF", right:isEnableUserRight(DS._usrDownloadPDF), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveReportXLS", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveReportXLSX", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveReportTXT", right:isEnableUserRight(DS._usrDownloadExcel), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveBtn", right:(isEnableUserRight(DS._usrSaveAsDoc) || isEnableUserRight(DS._usrSaveDoc)), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"saveAs", right:isEnableUserRight(DS._usrSaveAsDoc), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"save", right:isEnableUserRight(DS._usrSaveDoc), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"print", right:isEnableUserRight(DS._usrDownloadPDF), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"printOptions", right:isEnableUserRight(DS._usrDownloadPDF), disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"editDP", right:(isEnableUserRight(DS._usrEditQuery) && !DS.disableQueryPanel) , disabledIfNoRight:true, hideIfNoRight:false}
        ,{actionId:"refreshDPMenu", right:isEnableUserRight(DS._usrRefreshDoc) , disabledIfNoRight:true, hideIfNoRight:false}   
        ,{actionId:"refreshAll", right:isEnableUserRight(DS._usrRefreshDoc) , disabledIfNoRight:true, hideIfNoRight:false}
,{actionId:"mergeDimensions", right:isEnableUserRight(DS._usrCreateMergeDimension), disabledIfNoRight:true, hideIfNoRight:false}
];
updateActionsWithUserRight(arr);
}
function updateActionsWithUserRight(arr)
{
for (var i=0; i<arr.length; i++)
{
var rightInfo=arr[i];
var action=_currWorkbench.getAction(rightInfo.actionId);
if (action) 
{     
var right= rightInfo.right;  
action.setUserRight(right, rightInfo.disabledIfNoRight, rightInfo.hideIfNoRight);
}
}
}
interactivePers = workbenchW.addPerspective({
name:"Interactive Mode",
value:"interactivePers",
naviBarVisible: viewPers.isNaviBarVisible(),
statusBarVisible:viewPers.isStatusBarVisible(),
leftPaneVisible: viewPers.isLeftPaneVisible(),
leftGrabVisible: viewPers.isLeftGrabVisible(),
leftPaneAndBarVisible: viewPers.isleftPaneAndBarVisible(), 
menuPaletteVisible:false,
toolboxBarVisible:true,
toolboxBarId:"interactiveToolbox",
menuBarVisible:false,
mainPalVisible:false,
formulaBarVisible:true, 
initTabBarCB:viewingFillTabMenu, 
paneChangeCB:viewPaneCB, 
showLeftPaneCB:viewShowLeftPaneCB,
tabCB:viewTabCB,
statusBarId:"status",
contentFrameId:"Report",
leftPaneId:"leftPaneW",
floatPaletteVisible:true,
floatPaletteId:"floatPal",
tabsDblclickCB:interactiveTabsDblClickCB,
showHideFindBarCB:showHideFindBarCB,
getReportFrameCB:getReportFrame
});
apply_customization(interactivePers, "interactiveperspective");
function fillInteractivePerspectiveUI()
{
if (window.fillInteractivePerspectiveUIDone != true)
{
window.fillInteractivePerspectiveUIDone = true
commonFillPerspectives()
interactiveCreateObservers()
interactiveCreateToolboxBar()
interactiveCreateSortMenu(interactivePers);
new_InteractiveContextMenus(interactivePers)
var intContextMenu = interactivePers.getToolbarMenu();
interactivePerspectivePaletteMenu(intContextMenu);
interactivePers.setContextMenu(intContextMenu);
workbenchW.getAction("formulaText").setDisabled(true);
workbenchW.getAction("variableCreation").setDisabled(true);
workbenchW.getAction("formulaEditor").setDisabled(true);
workbenchW.getAction("formulaOK").setDisabled(true);
workbenchW.getAction("formulaCancel").setDisabled(true);
interactivePers.getNaviBar().getMenu().fill(webi.interactive.reportTabMenu);
interactivePers.getFormulaBar().fill(webi.interactive.bars.formulaToolbar);
interactivePers.getFormulaBar().resizeCB=formulaBarResizeCB;
interactivePers.getFormulaBar().initCB=formulaBarInitCB;
workbenchW.getAction("showFormulaBar").check(true);
var unitLabelWidget = workbenchW.getAction("pageHFHeightUnit")
if (null != unitLabelWidget) {
unitLabelWidget.setText(_unitLabel)
} 
}
updateActionsUponWSUserRight();
updateActionsUponDSUserRight();
}
function interactiveCreateToolboxBar()
{
var toolboxBar = interactivePers.getToolboxBar()
toolboxBar.getLeftToolbox().fill(webi.interactive.leftToolbox)
toolboxBar.getLeftTransverseGroup().fill(webi.interactive.leftTransverseGroup)
toolboxBar.getMidToolbox().fill(webi.interactive.midToolbox)
toolboxBar.getRightZone().fill(webi.interactive.topRightZone)
}
function interactiveBeforeAddWidget(actionId, prms)
{
switch(actionId)
{
case "bordersBtn":
prms.beforeShowCB = beforeShowBordersCB
break
case "layeringBtn":
prms.beforeShowCB = initLayeringMenu
break
case "alignBtn":
prms.beforeShowCB = initAlignmentMenu
break
case "bgColor":
case "borderColor":
case "fontColor":
prms.defaultActionOnIcon=true
prms.curColorAsActionColor=false
prms.lastUsedColorsAr=WS._lastUsedColorsAr
break;
case "formatPainter":
prms.allowDblClick=true
prms.dblclickCB=formatPainterDblClickCB
break
case "sortBut":
prms.attachMenuCB=attachSortMenu
break
case "formulaText":
prms.cancelCB=resetFormula
break;
case "rankingBtn":
prms.beforeShowCB = initRankingMenu
break;
        case "reportName":
prms.keyUpCB=reportNameKeyUpCB
prms.blurCB=setReportNameToolbox
break;
        case "fitToWidth":
prms.beforeShowCB=initScaling
            prms.changeCB=fitToPageWidthCB;
            prms.checkCB=fitToPageCheckCB;
            break;
        case "fitToHeight":
prms.beforeShowCB=initScaling
            prms.changeCB=fitToPageHeightCB;
            prms.checkCB=fitToPageCheckCB;
            break;
        case "toScaling":
prms.beforeShowCB=initScaling
            prms.changeCB=fitToScalingChangeCB;
            prms.checkCB=fitToScalingCheckCB;
            break;
        case "docLinkMenu":
        case "insertLinkMenu":
prms.beforeShowCB = initHyperlinkMenu;
break;
        case "pageOrientationMenu":
prms.beforeShowCB = initPageFormatMenu;
break;
        case "pageHeaderHeight":
prms.beforeShowCB = initHeaderFooterHeight;
break;
        case "topMarginField":
prms.beforeShowCB = initPageMargins;
break;
        case "hideMenu":
            prms.beforeShowCB = beforeShowBlockHideMenuInToolbox;
            break;
        case "sectionHideMenu":
            prms.beforeShowCB = beforeShowSectionHideMenuInToolbox;
            break;  
        case "simpleHideMenu":
            prms.beforeShowCB = beforeShowFreeCellHideMenuInToolbox;
            break;
        case "widthField":
prms.beforeShowCB = initFormatSizePadding;
break;
        case "refreshDPMenu":
prms.beforeShowCB = initRefreshDPMenu;
break;
        case "purgeDPMenu":
prms.beforeShowCB = initPurgeDPMenu;
break;
}
}
CurrentBlock = Class.create({
initialize: function() 
    { 
this.subItemsCount = 0
},
resetSubItemsCount: function()
{
this.subItemsCount = 0
},
hasDualPalettes:function()
{
var elts=getSelectedElts()
elt = (elts && elts.length > 0)?elts[0]:null
var bGraph;
if(elt)
{
 bGraph = ( !isTableCell(elt) && isGraph(elt))
 if(bGraph)
 {
 var bExist = typeof( elt.hasDualPalettes) != "undefined"
if( bExist )
return  elt.hasDualPalettes;
 }
}
return false
},
updateBlockSortSubMenuItems: function(m, elt,bReportCellWithoutAxis)
{
 if(!m)
    {
   var elts=getSelectedElts()
elt = (elts && elts.length > 0)?elts[0]:null
    }
    if ((!m || !this) && !elt ) return;
var bGraph = ( !isTableCell(elt) && isGraph(elt))
var sortChartSubMenu=(m)?m.getItemByActionId("sortChartSubMenu"):(this); 
var sub = (this)?this:sortChartSubMenu.sub
var sub = (m)?sortChartSubMenu.sub:this
var theCurrBlk = (this.theCurrentBlock)?this.theCurrentBlock:_CurrentBlock
if (isSectionFn(elt) || isCellInSection(elt)) {
theCurrBlk.cleanChartSortSubMenu(sub)
theCurrBlk.setCellSubMenuDisplay(sub,true)  
return;
}
    if (sub)
    {
        var subMenu=sub;
theCurrBlk.cleanChartSortSubMenu(subMenu)
if(!bReportCellWithoutAxis) 
bReportCellWithoutAxis = isReportCellWithoutAxis(elt)
if(isTableFn(elt) || isGraphBlock(elt) || bReportCellWithoutAxis)
{
theCurrBlk.setCellSubMenuDisplay(subMenu,false)
var block = elt
if(elt && elt.className != "block" && bReportCellWithoutAxis)
{
block = elt.parent.parent
}
var arr = theCurrBlk.getBlkObjForSort(block)
var bNeedTitle = theCurrBlk.bNeedSetAxisTitleForSortSubMenu(block);
if(arr != null)
{
if(bNeedTitle)
{
for(var i=0;i<arr.length;i++)
{
var len = arr[0].length +1 
var deb = (i==0)?0:len
theCurrBlk.insertTitle(subMenu,i,deb,bGraph)
deb = (i==0)?1:len+1
theCurrBlk.setAxisObj(arr[i],subMenu,deb)
}
   }
   else
   theCurrBlk.setAxisObj(arr,subMenu,0)
   }
}
else
theCurrBlk.setCellSubMenuDisplay(subMenu,true)   
}
},
cleanChartSortSubMenu: function(subMenu)
{
var nbObj = (subMenu.items)?(subMenu.items.length)- 6 :(subMenu.menuItemsCount())-3;
this.resetSubItemsCount();
for (var n=0; n<nbObj; n++)
subMenu.remove(0);
},
setCellSubMenuDisplay: function(subMenu,bDisabled)
{
if(subMenu && subMenu.items)
{
var len = subMenu.items.length
for(var i=0;i<len-3;i++)
{
subMenu.items[i].setDisplay(bDisabled)
}
}
},
getBlkObjForSort:function(elt)
{
if ((null == elt) || !isBlock(elt)) return null;
var arr = new Array
var arrAxis = isGraph(elt)? elt.groups: elt.axis
var len =arrAxis.length;
var bNeedTitle = this.bNeedSetAxisTitleForSortSubMenu(elt);
var theAxis = null;
for(var i=0;i<len;i++)
{
if(bNeedTitle && i != 2)
{
theAxis = new Array
}
var axis = arrAxis[i]
var vars = axis.vars
var sorts = (i != 2)?axis.sorts:arrAxis[1].sorts
if(typeof(vars)== "undefined")
continue;
var len1 = vars.length
for(var j=0;j<len1;j++)
{
 this.setObjSort(vars[j],sorts,i,arr,theAxis)
}
if(bNeedTitle)
{
theAxis.sort(this.mySortFuncUsingListOrder);
if(i != 2)
arr[arr.length]= theAxis
else
arr[arr.length-1]= theAxis
}
}
if(!bNeedTitle)
arr.sort(this.mySortFuncUsingListOrder);
return arr
},
bNeedSetAxisTitleForSortSubMenu: function(elt)
{
if(elt)
{
if(isGraph(elt) && elt.groups)
{
return elt.groups.length > 1
}
else if(elt.axis)
{
for(var i=0;i<elt.axis.length;i++)
{
var axis = elt.axis[i]
var vars = axis.vars
if(typeof(vars)== "undefined")
return false
}
return true
}
}
return false;
},
insertTitle: function(subMenu,axisIdx,deb,bGraph)
{
var i = (axisIdx == 0)?1:2
var titleName = (bGraph)?("Sort" + " " + i):(axisIdx == 0)?"Columns":"Rows";
subMenu.insertTitle(deb,null,titleName);
},
setObjSort:function(obj,sorts,axisIdx,arr,theAxis)
{
if ((null == sorts && axisIdx!=2) ||(null == obj)|| (null == arr)) return ;
var len = sorts.length;
var qualif = (typeof(obj.qualification)== "undefined")?obj.kind:obj.qualification
var tab = (theAxis != null)?theAxis:arr
var BOObj = tab[tab.length] =new_BOObj({
id:obj.id,
name:obj.name,
kind:qualif
})
    BOObj.axisIdx = axisIdx
BOObj.hidden = obj.hidden
BOObj.bBody  = (axisIdx == 2)
for(var i=0;i<len;i++)
{
if(sorts[i].id == obj.id)
{
var sortKind = (typeof(sorts[i].sortKind)== "undefined")?sorts[i].kind:sorts[i].sortKind
BOObj.hasSort = true
BOObj.sortKind = sortKind
BOObj.sortIdx = i
BOObj.listOrder = i
return;
}
}
BOObj.hasSort = false
BOObj.sortIdx = -1
BOObj.listOrder = 100
},
mySortFuncUsingListOrder:function(v1,v2)
{
if ((v1.listOrder!=v2.listOrder))
return (v1.listOrder<v2.listOrder?-1:1);
if (v1.listOrder == v2.listOrder) 
{ 
if ((v1.kind!=v2.kind))
return (v1.kind<v2.kind?-1:1);
return (v1.name<v2.name?-1:1)
}
},
resetObjName40:function(text)
{
text = text ? text : ''
var words = text.split('')
var s=[]
if (words&&words.length>0)
{
var len=words.length
for (var i = 0; i < len; i++) {
if (s.length == 36 )
break
var w = words[i]
s[s.length] = words[i]
}
var pointPoint = ''
if(text.length > s.length)
pointPoint = " ..."
text = s.join('') + pointPoint
}
return text
},
setAxisObj: function(arr,subMenu,deb)
{
for(var i=0;i<arr.length;i++)
{
var img = null;
if(arr[i].kind)
img = this.getKindImg(arr[i].kind)
var userData ={ 
id :arr[i].id,
hasSort  : arr[i].hasSort,
sortKind : arr[i].sortKind,
axisIdx  : arr[i].axisIdx,
hidden   : arr[i].hidden,
bBody    : arr[i].bBody
   }
if(arr[i].hasSort)
{
img = this.getSortKindImg(arr[i].kind,arr[i].sortKind)
}
var imgSrc = imgDx = imgDy = null
if(img)
{
imgSrc = img.src
imgDx = img.dx
imgDy = img.dy
}
var objName = this.resetObjName40(arr[i].name)
var itemMenu = subMenu.insertCheck(i+deb,this.subItemsCount++,objName,null,imgSrc,imgDx,imgDy,null,null,null,null,null,userData);
var sub = _interactiveMenusSingleton.get("chartMiniSortSubMenu")
itemMenu.attachSubMenu(sub)
sub.beforeShowCB = this.beforeShowChartMiniSortSubMenu
}
},
getMiniSortSubMenuSelSort: function(userData)
{
var hasSort =userData.hasSort
if(hasSort)
{
var sortKind =  userData.sortKind
var selSort = 0
if(sortKind =="asc")
 selSort = 1
else
selSort = 2
}
else
selSort = 0
return selSort
},
beforeShowChartMiniSortSubMenu:function()
{
var theCurrBlk = (this.theCurrentBlock)?this.theCurrentBlock: _CurrentBlock
var selSort = theCurrBlk.getMiniSortSubMenuSelSort(this.par.userData)
setSelSort(selSort,null,null,true)
theCurrBlk.setSortUserData(this.par.userData)
},
 setSortUserData: function(userData)
{
var noSortBis =  workbenchW.getAction("noSortBis")
var ascendingSortBis =  workbenchW.getAction("ascendingSortBis")
var descendingSortBis =  workbenchW.getAction("descendingSortBis")
noSortBis.userData = userData
ascendingSortBis.userData = userData
descendingSortBis.userData = userData
},
getKindImg: function(qualif)
{
var kind = _objKindTable.get(qualif)
return _kindIconArr[kind];
},
getSortKindImg: function(qualif,sortKind )
{
var kind = _objKindTable.get(qualif)
var index = -1
switch(kind)
{
case _dim :
(sortKind == "asc" || sortKind == "ASC")?index = 380+1: index = 380+2   
break;
case _dtl :
(sortKind == "asc" || sortKind == "ASC")?index = 383+1: index = 383+2   
break;
case _msr :
(sortKind == "asc" || sortKind == "ASC")?index = 386+1: index = 386+2   
break;
case _hchy :
(sortKind == "asc" || sortKind == "ASC")?index = 394+1: index = 394+2   
break;
case _lvl :
(sortKind == "asc" || sortKind == "ASC")?index = 397+1: index = 397+2   
break;
}
return (index != -1)?toolboxImg(index):null;
},
getAxisNameForSort:function(elt,userData)
{
if( !isTableCell(elt) && isGraph(elt))
{
return (userData.axisIdx==0)?"sortGroup0":"sortGroup1"
}
return (userData.axisIdx==0)?"col":"row"
},
addOrRemoveSortForMiniSubMenu: function(iAction,userData)
{
wt()
var elts = getSelectedElts();
var blockID = elts[0].bid
var axisName = this.getAxisNameForSort(elts[0],userData)
var p = urlParams(true)
p += '&sExpSel='+userData.id
p += '&blockID='+ blockID
p += (userData.bBody)?'&bBody=true':''
if (p != "") 
frameNav("Report", "ajaxIncManageSortsDlg" + _appExt + p + "&iAction=" + iAction + "&sFrom=Report&sRedirect=report&sAxisName=" + axisName, true);
},
isHierarchicalChart: function()
{
if(_currMapDict && _currMapDict.data && _currMapDict.data.metadata && _currMapDict.data.metadata.contexts )
{
var l = _currMapDict.data.metadata.contexts.length
for (var i = 0; i < l; i++)
{
var bidContext = _currMapDict.data.metadata.contexts[i]
if(bidContext &&  bidContext.valuecontext &&  bidContext.valuecontext.length > 0 )
{
for (var j = 0; j < l; j++)
{
if( typeof(bidContext.valuecontext[j]) != 'undefined'   &&  typeof(bidContext.valuecontext[j].mid) != 'undefined')
return true;
}
}
else
continue
}
}
return false
},
isHierarchicalTable: function(elt)
{
if(elt)
{
var l = elt.axis.length
for (var i = 0; i < l; i++)
{
if(elt.axis[i].vars)
{
var ll = elt.axis[i].vars.length
for (var j = 0; j < ll; j++)
{
var kind = elt.axis[i].vars[j].kind
if(kind)
{
if(kind == "HIERARCHY")
return true
}
}
}
}
}
return false
},
updateLinkingItem:function(m, elt)
{
var linkingItem = m.getItemByActionId("navigationBlock")
if(isGraph(elt))
{
linkingItem.setDisabled(_CurrentBlock.isHierarchicalChart())
}
else
{
linkingItem.setDisabled(_CurrentBlock.isHierarchicalTable(elt))
}
}
})
_CurrentBlock = new CurrentBlock()
function interactiveAfterAddWidget(actionId, widget)
{
switch(actionId)
{
case "fontSize":
for (var i=0;i<fntSizes.length;i++)
widget.add(fntSizes[i],fntSizes[i])
break
        case "fitToWidth":
        case "fitToHeight":
        {
            for (var i=0; i<_fitToWHArrLen; i++)
widget.add(_fitToWHArr[i], _fitToWHArr[i+_fitToWHArrLen]);
            break;
        }
        case "toScaling":
        {
            for (var i=0; i<_fitToScalingArrLen; i++)
widget.add(_fitToScalingArr[i], _fitToScalingArr[i+_fitToScalingArrLen]);
            break;
        }       
        case "pageFormat":
        {
            for (var i=0;i<_pageSizeLabelArr.length;i++)
widget.add(_pageSizeLabelArr[i])
            break;
        } 
        case "changeNumberFormat":        
        {       
            if (DS.formatNumericArr && DS.formatNumericArr[0])                
                DS.formatNumericArr[0].template="Default";                
            if (DS.formatDateArr && DS.formatDateArr[0])    
                DS.formatDateArr[0].template="Default";
            break;
        }
case "paletteMenu":
var m = widget.getMenu()
m.beforeShowCB = updatePalettesList
for (var j = 0; j < _palettesAr.length; j++) {
var id = _palettesAr[j].id
m.addCustomCheck({"id":id,"text":_palettesAr[j].name, "cb":selectPalIdCB, "src":_root+_img + escape(id) + ".png"})
}
m.addCustom({"id":"custom","text":"Custom...", "cb":selectPalIdCB})
break;
case "dualPaletteMenu":
var m = widget.getMenu()
m.beforeShowCB = updatePalettesList
for (var j = 0; j < _palettesAr.length; j++) {
var id = _palettesAr[j].id
m.addCustomCheck({"id":id,"text":_palettesAr[j].name, "cb":selectPalIdCB, "src":_img + escape(id) + ".png"})
}
m.addCustom({"id":"custom","text":"Custom...", "cb":selectPalIdCB})
break;
case "sortMenu":
var m = widget.getMenu()
m.beforeShowCB = _CurrentBlock.updateBlockSortSubMenuItems
break
case "insertCellMenu":
var m = widget.getMenu()
m.asyncBeforeShowCB = updatePredefinedList;
var itemPrompt=m.getItemByActionId("insertCellPrompt")
var promptMenu = itemPrompt.sub
if (null == promptMenu) 
{
promptMenu = new_MenuWidget({id:"promptSubmenu", beforeShowCB:initPromptMenu})
itemPrompt.attachSubMenu(promptMenu)
}
break
}
}
function initPromptMenu()
{
var m=this,mlen = m.items.length 
var db = DS.promptInfoListPredefined, dblen = db.length
var promptName=null;
var dpName=null;
var dpID=null;
if (mlen==0)
{
m.add("insertCellPromptSummary", "", predefinedPromptSummaryCB); 
m.getItem(0).show(true)
m.getItem(0).setText("Summary")
}
mlen = m.items.length
if (dblen+1 > mlen) 
{
for (var i=mlen; i < dblen+1; i++)
{
m.add('predefinedPrompt'+i, "", predefinedPromptCB);
}
}
var idxD=0
for (; idxD < dblen; idxD++) 
{
promptName = DS.promptInfoListPredefined[idxD].name
dpName = DS.promptInfoListPredefined[idxD].dpName
dpID = DS.promptInfoListPredefined[idxD].dpID
var menuItem = m.getItem(idxD+1) 
menuItem.show(true)
menuItem.setText(promptName + " ("+ dpName + ")")
menuItem.userData.id=DS.promptInfoListPredefined[idxD].id
menuItem.userData.dpName=dpName
menuItem.userData.dpID=dpID
}
if (idxD+1 < mlen) 
{
for (; idxD+1 < mlen; idxD++)
m.getItem(idxD+1).show(false)
}
}
function updatePredefinedList(cb)
{
if (DS.promptInfoListPredefined == null)
{
fetchPromptList(function(jsonObj) {
fillPredefinedPromptCB(jsonObj);
cb();
});
}
else
cb();
}
function fetchPromptList(postCB)
{
var url =  _root + "ajaxIncQuickPrompts" + _appExt
url += urlParamsNoBID()
ajaxUpdater({"url":url, "postCB":postCB, "ajaxErrorCB":manageAjaxError})
}
function getPromptList()
{
fetchPromptList(fillPredefinedPromptCB);
}
function fillPredefinedPromptCB(jsonObj)
{
if (jsonObj!=null)
{
DS.promptInfoListPredefined=jsonObj.promptInfoListPredefined;
}
}
function predefinedPromptCB()
{
var o=this;
var  cellType="";
cellType=cellType?cellType:"PromptParameter[" + o.userData.dpID + ";" + o.userData.id +"]";
simulateDragDropAction("cell",cellType);
}
function predefinedPromptSummaryCB()
{
var  cellType="";
cellType=cellType?cellType:"PromptSummary";
simulateDragDropAction("cell",cellType);
}
function updatePalettesList()
{
var o =this;
if(!WS.hasCorporatePalette)
o.getItem(0).setDisplay(false) 
o.getItem(1).setDisplay(false)
var elts = getSelectedElts();
var elt = elts?elts[0]:null;
var isDualPalette=("dualPaletteMenu" == o.container.actionId); 
var item=null;
for(var i=0; i<o.items.length;i++)
{
o.getItem(i).check(false);
}
if(elt && elt.colorPalettes)
{
var pals = elt.colorPalettes;
var pal = pals[isDualPalette?pals.length-1:0];
if(pal)
{
var customIdx = _palettesAr.length;
item = o.getItem(customIdx);
if(item && item.isCustom && item.id!=pal.paletteId) 
{
o.remove(customIdx);
}
item = o.getItemByID(pal.paletteId);
if(!item && pal.isCustom )
{
item=o.insertCustomCheck(customIdx,{"id":pal.paletteId,"text":pal.paletteName, "cb":selectPalIdCB,"src":_root+_img + "custom_palette" + ".png"});
item.isCustom=true;
}
if(pal.isCustom )
{
item.setText(pal.paletteName);
}
if(item)
{
item.check(true);
}
}
}
}
function selectPalIdCB()
{
wt()
var o=this;
var pal2=("dualPaletteMenu" == o.par.container.actionId);;
var hasDualPalettes=false;
if("dualPaletteMenu" != o.par.container.actionId  && _CurrentBlock && _CurrentBlock.hasDualPalettes())
{
hasDualPalettes = true;
}
if (o.id=="custom") 
{
var url = "language/"+_lang+"/html/editorPaletteDialog.html";
url +="?comeFrom=toolbox";
url +="&pal2=" + pal2;
url += "&hasDualPalettes="+hasDualPalettes;
frameNav('DlgFrame', url)
}
else
{
var p = urlParamsNoBID()
if (p=="") return
p += "&sBid=" + getChartBid()
p += "&palId=" + escape(o.id)
p += "&pal2=" + pal2;
p += "&hasDualPalettes="+hasDualPalettes;
setReportUrl(_root + "processFormatChartToolbar"+_appExt+p,true);
}
}
function interactiveLoadCB()
{
ajaxPrintFormatNumbers(printFormatNumbersPostCB);
if (workbenchW.getPerspective("interactivePers").htmlWritten != true)
{
var fontName = workbenchW.getAction("fontName")
var count=DS.allFonts.length
for (var i = 0; i < count; i++) {
fontName.add(DS.allFonts[i], DS.allFonts[i])
}
preloadImg(_img+"preselectionPattern.png")
preloadImg(_img+"bullet.png")
preloadImg(_img+"line.png")
preloadImg(_img+"corner.png")
preloadImg(_img+"square.png")
}
}
function ajaxPrintFormatNumbers(postCB)
{
if (DS.formatDateArr == null || DS.formatNumericArr == null)
{
var url =  _root + "ajaxIncPrintFormatNumbers" + _appExt
url += urlParamsNoBID(null,null,null,null,null,null,true)
ajaxUpdater({"url":url, "postCB":postCB, "ajaxErrorCB":manageAjaxError});
}
else
postCB();
}
function printFormatNumbersPostCB(jsonObj)
{
if (jsonObj != null)
{
DS.formatDateArr=jsonObj.formatDateArr;
DS.formatNumericArr=jsonObj.formatNumericArr;
}
}
function new_InteractiveContextMenus(pers)
{
if (window._interactiveMenusSingleton == null)
{
var o = {}
o.add = function (value)
{
var m = o[value] = pers.addMenu({value:value,beforeShowCB:o.initMenu})
m.fill(webi.interactive[value])
}
o.initMenu = function()
{
switch (o.value)
{
case "chartMenu":
break;
case "tableMenu":
break;
case "chartRegionMenu":
break;
                case "reportMenu":
                    break;
                case "sectionMenu":
                    break;
                case "sectionCellMenu":
                    break;
                case "freeCellMenu":
                    break;
                case "tableCellMenu":
                    break;
                case "multiReportEltsMenu":
                    break;
                case "pageHeaderMenu":
                    break;
                case "pageFooterMenu":
                    break;
                case "multiCellsMenu":
                    break;
}
}
o.get = function (value)
{
return this[value]
}
o.add("chartMenu");
o.add("tableMenu");
o.add("chartRegionMenu");
        o.add("reportMenu");
        o.add("sectionMenu");
        o.add("sectionCellMenu");
o.add("freeCellMenu");
        o.add("tableCellMenu");
        o.add("multiReportEltsMenu");
        o.add("pageHeaderMenu");
o.add("pageFooterMenu");
        o.add("multiCellsMenu");
o.add("chartMiniSortSubMenu");
}
window._interactiveMenusSingleton = o;
}
function initFormatChartContextMenu(m,areaDefid, elt)
{
if (null == m) 
m =_interactiveMenusSingleton.get("chartRegionMenu");
if(areaDefid == null) return;
var idx = 0
switch (areaDefid)
{
case 'title':
idx = 1;
break;
case 'legend':
idx = 2;
break;
case 'legend/title':
idx = 3;
break;
case 'xaxis':
idx = 4;
break;
case 'xaxis/title':
idx = 5;
break;
case 'yaxis':
idx = 6;
break;
case 'yaxis/title':
idx = 7;
break;
case 'plotarea':
idx = 8;
break;
}
var formatChartMenu  = webi.interactive['formatChartRegionMenu'];
var formatChartActionId = formatChartMenu[idx].actionId;
var CtxtMenuChartItem = null;
var formatChartActionIdx = -1; 
var userData = new Object();
userData.areaDefid=areaDefid;
var icon = toolboxImg(414);
var hasFormatChartActionId = false;
var seriesColorsId = "seriesColors";
var seriesColorsItem = m.getItemByActionId(seriesColorsId);
if(seriesColorsItem!=null)
{
seriesColorsItem.setDisplay(idx == 8 || idx == 2);
if(elt!=null)
{
var isGhost = window.isGhost(elt.bid);
var keepItem = seriesColorsItem.sub.getItemByActionId("keepCurrentColors");
var clearItem = seriesColorsItem.sub.getItemByActionId("clearSeriesColors");
if(keepItem)
keepItem.setDisabled(isGhost);
if(clearItem)
clearItem.setDisabled(elt.hasColorAssignment==null || !elt.hasColorAssignment);
}
}
var formatDataSeriesId = "formatDataSeries";
var formatDataSeriesItem = m.getItemByActionId(formatDataSeriesId);
if(formatDataSeriesItem!=null)
{
formatDataSeriesItem.setDisplay(_currColorAsmChartZoneInfo!=null);
}
for(var i=0; i<formatChartMenu.length; i++)
{
CtxtMenuChartItem = m.getItemByID(formatChartMenu[i].actionId);
if(CtxtMenuChartItem)
{
if (CtxtMenuChartItem.id == formatChartActionId)
hasFormatChartActionId = true;
else
{
m.removeByID(CtxtMenuChartItem.id);
formatChartActionIdx = CtxtMenuChartItem.menuIndex;
}
}
}
if(!hasFormatChartActionId)
m.insert(formatChartActionIdx,formatChartActionId,formatChartMenu[idx].text,formatChartCB,icon.src,icon.dx,icon.dy,null,icon.disDx,icon.disDy,null,null,userData);
}
function formatChartCB()
{
wt();
var userData = this.getUserData();
var url = "language/"+_lang+"/html/applyFormatChartDialog.html";
if (userData.areaDefid) url += "?areaId=" + userData.areaDefid 
frameNav('DlgFrame', url);
}
function showTurnIntoSubMenuItems(arrMenuItem, indexNotShow)
{
    for (var i=0; i<arrMenuItem.length; i++)
    {
        var show=(i==indexNotShow)?false:true;
        arrMenuItem[i].show(show);
    }
}
function updateTurnIntoSubMenuItems(m, blockType, actionId)
{
    if (!m) return;
    var turnIntoMenuItem=m.getItemByActionId(actionId);
    if (turnIntoMenuItem && turnIntoMenuItem.sub)
    {
        var subMenu=turnIntoMenuItem.sub;
        var arrMenuItem=[subMenu.getItemByActionId("turntoVTable"),
                        subMenu.getItemByActionId("turntoHTable"),
                        subMenu.getItemByActionId("turntoXTable")
                        ];
        var indexNotShow=-1;
        switch (blockType)
        {
            case "vTable":
                indexNotShow=0;
                break;
            case "hTable":
                indexNotShow=1;
                break;
            case "xTable":    
                indexNotShow=2;
                break;
            case "form":
                break;
        }
        showTurnIntoSubMenuItems(arrMenuItem, indexNotShow);
    }
}
function getHideSubMenuItem(m, actionId1, actionId2)
{
    var hideSubMenuItem=m.getItemByActionId(actionId1);
    if (hideSubMenuItem && hideSubMenuItem.sub)
    {
        var subMenu=hideSubMenuItem.sub;
        var hiddenMenuItem=subMenu.getItemByActionId(actionId2);
        return hiddenMenuItem;               
    }
    return null;
}
function updateHideSubMenuItems(m, elt, actionId1, actionId2)
{
    if (!m || !elt) return;
    var hiddenMenuItem=getHideSubMenuItem(m, actionId1, actionId2);                   
    if (hiddenMenuItem)
    {
        hiddenMenuItem.setDisabled((isTableCell(elt)?elt.parent.parent.hidden:elt.hidden)?false:true);
    }            
}
function updateShowHideSubMenuItem(m, elt, actionId1)
{
    var showMenuItem=getHideSubMenuItem(m, actionId1, "showElement");                   
    var hideMenuItem=getHideSubMenuItem(m, actionId1, "hideElement"); 
    if (hideMenuItem)
    {
        hideMenuItem.setDisplay(!elt.isHide);
    }
    if (showMenuItem)
    {
        showMenuItem.setDisplay(elt.isHide);
    }
}
function isPageHeader(elt)
{
    if (!elt) return false;
    var cn=elt.className;
    var b=(cn=="pageHeader") || (cn=="report" && elt.children && elt.children[0] && elt.children[0].className=="pageHeader");
    return b;
}
function isHierarchicalObj()
{
return (_ExpColChartZoneInfo != null)
}
function updateHierarchicalNavSubMenuItems(m,id)
{
if(m)
{
var hierNav = null
var subMenu = null
var bHierarchicalObj = isHierarchicalObj()
var bHierarchicalBlock = _CurrentBlock.isHierarchicalChart()
if(id)
{
hierNav = m.getItemByActionId(id);
hierNav.setDisplay((bHierarchicalObj || bHierarchicalBlock))
subMenu = hierNav.sub
}
else
subMenu = m
if(bHierarchicalObj)
{
if(subMenu && _ExpColChartZoneInfo) 
{
var isLeaf = ("." == _ExpColChartZoneInfo.msign) &&  (null != _ExpColChartZoneInfo.mid);
var canExpand = ("+" == _ExpColChartZoneInfo.msign)?true:false;
var canCollapse = ("-" == _ExpColChartZoneInfo.msign)?true:false;
var canDrillUp = (null  != _ExpColChartZoneInfo.mpid);
subMenu.getItemByID("chart_expandChildren").setDisabled(!canExpand);
subMenu.getItemByID("chart_expandDescendent").setDisabled(!canExpand);
subMenu.getItemByID("chart_collapseChildren").setDisabled(!canCollapse);
subMenu.getItemByID("chart_symetric").setDisabled(!(canExpand || canCollapse));
var symetricSubMenu = subMenu.getItemByID("chart_symetric").sub;
symetricSubMenu.getItemByID("chart_symetricExpandChildren").setDisabled(!canExpand);
symetricSubMenu.getItemByID("chart_symetricExpandDescendent").setDisabled(!canExpand);
symetricSubMenu.getItemByID("chart_symetricCollapseChildren").setDisabled(!canCollapse);
if (subMenu.getItemByID("chart_drillFocus") != null)
{
subMenu.getItemByID("chart_drillFocus").setDisabled(false);
var ec_drillSubMenu = subMenu.getItemByID("chart_drillFocus").sub;
ec_drillSubMenu.getItemByID("chart_ecDrillUp").setDisabled(!canDrillUp);
ec_drillSubMenu.getItemByID("chart_ecDrillDown").setDisabled(isLeaf);
}
subMenu.getItemByID("chart_expandLevel").setDisabled(false);
var expandMenu = subMenu.getItemByID("chart_expandLevel").sub
expandMenu.beforeShowCB = getDefaultExpandedLevelChart
}
}
else if(bHierarchicalBlock) 
{
subMenu.getItemByID("chart_expandChildren").setDisabled(true);
subMenu.getItemByID("chart_expandDescendent").setDisabled(true);
subMenu.getItemByID("chart_collapseChildren").setDisabled(true);
subMenu.getItemByID("chart_symetric").setDisabled(true);
subMenu.getItemByID("chart_drillFocus").setDisabled(true);
subMenu.getItemByID("chart_expandCollapseAll").setDisabled(false);
subMenu.getItemByID("chart_expandLevel").setDisabled(true);
}
_ExpColChartZoneInfoFromContextualMenu = _ExpColChartZoneInfo;
}
}
function showContextMenu(bid,x,y, previousLayerFocus)
{
var pos = workbenchW.getPerspective().getContentFrameCoordinates(),m=null
x=x+pos.x
y=y+pos.y
var elts = getSelectedElts();
var isComposite=false
var firstCN=null, eltsLen = elts.length, curElt = null
for (var i=0; i < eltsLen; i++)
{
var elt=elts[i],curCN=elt.className+(((elt.block != null) && isGraph(elt))?"chart":"")
if (firstCN==null) {
firstCN=curCN
}
else
{
if (curCN!=firstCN)
{
isComposite=true
break
}
}
curElt = elt
}
if (_areaDefid != null) {
m=_interactiveMenusSingleton.get("chartRegionMenu")
initFormatChartContextMenu(m,_areaDefid,curElt)
_CurrentBlock.updateBlockSortSubMenuItems(m, curElt);
updateHierarchicalNavSubMenuItems(m,"chartHierarchicalNavig")
initdrillContextMenu(m)
repairMenu(m)
} 
    else if (isComposite) {
    m=_interactiveMenusSingleton.get("multiReportEltsMenu");
} 
    else 
    {
    var elt = curElt
if (elt!=null)
{
            switch(firstCN)
            {
                case "report":                   
                    if (isPageHeader(elt))    
                    {
                        m=_interactiveMenusSingleton.get("pageHeaderMenu");
                    }
                    break;
                case "pageHeader":
                    m=_interactiveMenusSingleton.get("pageHeaderMenu");
                    break;
                case "pageFooter":
                    m=_interactiveMenusSingleton.get("pageFooterMenu");
                    break;
                case "block":
    if (isGraph(elt))
{
    m=_interactiveMenusSingleton.get("chartMenu");
updateHierarchicalNavSubMenuItems(m,"chartHierarchicalNavig")
}    
    else
                    {
                        if (elt.blockType=="vTable" || elt.blockType=="hTable" || elt.blockType=="xTable" || elt.blockType=="form")
        m=_interactiveMenusSingleton.get("tableMenu");                     
                        updateTurnIntoSubMenuItems(m, elt.blockType, "turntoTable");                                                                       
                    }
var sortMenuForBlock = workbenchW.getAction("sortChartSubMenu")
sortMenuForBlock.setDisplay(true)
_CurrentBlock.updateBlockSortSubMenuItems(m, elt);
_CurrentBlock.updateLinkingItem(m, elt);
                    updateHideSubMenuItems(m, elt, "hideSubMenu", "showHiddenColumns"); 
                    updateShowHideSubMenuItem(m, elt, "hideSubMenu");  
                    break;
                case "body":
                {
    m=_interactiveMenusSingleton.get("reportMenu");
    var showAllMenuItem=m.getItemByActionId("showAllHiddenContent");
    if (showAllMenuItem)
    {
        showAllMenuItem.setDisabled(elt.hidden?false:true);
    } 
                    break;
                }
                case "section":
                    m=_interactiveMenusSingleton.get("sectionMenu");
                    updateHideSubMenuItems(m, elt, "sectionHideSubMenu", "showAllHiddenContent"); 
                    updateHideSubMenuItems(m, elt, "reportMenuWhenSectionSelected", "showAllHiddenContent"); 
                    updateShowHideSubMenuItem(m, elt, "sectionHideSubMenu");  
                    break;
                case "reportCell":
if (eltsLen==1)
                    {
                        if (isCellInSection(elt)) {
                            m=_interactiveMenusSingleton.get("sectionCellMenu");
if (m.getItemByActionId("drillSubMenu") != null)
initdrillContextMenu(m.getItemByActionId("drillSubMenu").sub)
                            initExpandCollapseContextMenu(m, elt); 
                            updateShowHideSubMenuItem(m, elt, "simpleHideSubMenu"); 
                        } else if (isTableCell(elt)) {
                            m=_interactiveMenusSingleton.get("tableCellMenu")
var bIsNum= (elt.dataType == 1)                       
                            var tableCellZone = getTableCellZone(elt, true);           
                            var insertTxtMenuItem=m.getItemByActionId("insertIntoTable.OverTextDimCell");
                            var insertNumMenuItem=m.getItemByActionId("insertIntoTable.OverMeasureCell"); 
                            var deleteMenuItem=m.getItemByActionId("deleteTableCell"); 
                            if (tableCellZone == 3)
                            {
                            var calc = getCalculations(elt);
if (calc != "")
{
                            insertTxtMenuItem.show(!calc.isMeasure);      
                            insertNumMenuItem.show(calc.isMeasure);
}
else
{
                            insertTxtMenuItem.show(true);      
                            insertNumMenuItem.show(false);
}
                            }
                            else
                            {                                  
                            insertNumMenuItem.show(bIsNum);
insertTxtMenuItem.show(!bIsNum);
                            }
                            updateTurnIntoSubMenuItems(m, elt.parent.parent.blockType, "turnCellTableInto");
if (m.getItemByActionId("drillSubMenu") != null)
                            initdrillContextMenu(m.getItemByActionId("drillSubMenu").sub)
                            initExpandCollapseContextMenu(m, elt)
updateHideSubMenuItems(m, elt, "hideSubMenu", "showHiddenColumns"); 
var sortMenuForCell = workbenchW.getAction("sortSubMenu")
var sortMenuForBlock = workbenchW.getAction("sortChartSubMenu")
var bReportCellWithoutAxis = isReportCellWithoutAxis(elt)
if( bReportCellWithoutAxis )
{
_CurrentBlock.updateBlockSortSubMenuItems(m, elt,bReportCellWithoutAxis);
sortMenuForCell.setDisplay(false);
sortMenuForBlock.setDisplay(true);
setSort(elts,null,bReportCellWithoutAxis)
}
else 
{
sortMenuForCell.setDisplay(true);
sortMenuForBlock.setDisplay(false);
}
                        } else {
                            m=_interactiveMenusSingleton.get("freeCellMenu")
                        }
                    }
                    else
                    {                      
                        m=_interactiveMenusSingleton.get("multiCellsMenu");
                        var bTurnIntoVisible=isMultiTableCellInSameTable(elts);
                        var turnIntoMenuItem=m.getItemByActionId("turnCellTableInto");
                        turnIntoMenuItem.show(bTurnIntoVisible);
                        if (bTurnIntoVisible)
                        {                           
                            updateTurnIntoSubMenuItems(m, elt.parent.parent.blockType, "turnCellTableInto");  
                        }
                    }
setCustomGrouping_ContextualMenu(m,elts);
                   break;
            }
}
else
{
selectedBid.each(function(pair) {
var i = pair.key;
selectedBid.unset(i);
var obj = bidTable.get(i)
if (obj!=null)
selectObj(fr, obj,false,i)
});
}
}
if (m)
{
setAlignment_ContextualMenu(m,(eltsLen==1))
setLayering_ContextualMenu(m)
setNavigation_ContextualMenu(m,elts)
setDeleteTablecells_ContextualMenu(m,elts)
m.setPreviousLayerFocus(previousLayerFocus)
m.show(true,x,y)
_currContextMenu=m
}
}
function isFreeCell(elt)
{
    var b=false;
    if (elt && elt.className=="reportCell")
    {
        if (isTableCell(elt))
        {        
        }                     
        else
        if (isCellInSection(elt))
        {       
        }             
        else
        {
            b=true;
        }
    }
    return b;    
}
function isTableCell(elt)
{
if (elt && elt.className=="reportCell")
{
var wob = elt.parent;
if (wob && wob.className=="wob")
{
var block = wob.parent
if (block && block.className=="block")
return true
}
}
return false
}
function isNoFormTableCell(elt)
{
if (elt && elt.className=="reportCell")
{
var wob = elt.parent;
if (wob && wob.className=="wob")
{
var block = wob.parent
if (block && block.className=="block" && block.blockType!="form")
return true
}
}
return false
}
function isFormCell(elt)
{
if (elt && elt.className=="reportCell")
{
var wob = elt.parent;
if (wob && wob.className=="wob")
{
var block = wob.parent
if (block && block.className=="block" && block.blockType=="form")
return true
}
}
return false
}
function isBlock(elt)
{
return (elt && elt.className=="block")
}
function isSectionCell(elt)
{
if (elt && elt.className=="reportCell")
{
var bag = elt.parent;
if (bag && bag.className=="bag")
{
var section = bag.parent
if (section && section.className=="section")
{
if( section.axis && section.axis.length == 2 )
return isInAxis(section.axis[1],elt,true)
else
return false;
}
}
}
return false
}
function isCellInSection(elt)
{
if (elt && elt.className=="reportCell")
{
var bag = elt.parent;
if (bag && bag.className=="bag")
{
var section = bag.parent
if (section && section.className=="section")
return true
}
}
return false
}
function isBlockInSection(elt)
{
if (elt && elt.className=="block")
{
var bag = elt.parent;
if (bag && bag.className=="bag")
{
var section = bag.parent
if (section && section.className=="section")
return true
}
}
return false
}
function isGraph(elt, type)
{
if(elt || type)
{
var bType = (type!=null? type: elt.blockType);
if ((bType == "hTable") || (bType == "vTable") || (bType == "xTable") || (bType == "form")) return false
return true
}
return false
}
function getBlockFromTableCell(elt)
{
if (elt && elt.className=="reportCell")
{
var wob = elt.parent;
if (wob && wob.className=="wob")
{
var block = wob.parent
if (block && block.className=="block")
return block
}
} else if (elt && elt.className=="block") {
return elt
}
return null;
}
function getParentContainer(elt)
{
if(elt== null) return null;
var parentElt=searchClassName(elt,"section")
if (parentElt==null)
parentElt=searchClassName(elt,"body")
if (parentElt==null)
parentElt=searchClassName(elt,"pageHeader")
if (parentElt==null)
parentElt=searchClassName(elt,"pageFooter")
return parentElt;
}
 function getTableTypeIcon(type)
{
  if (type == "hTable")         return 7;
      if (type == "vTable")         return 8;
      if (type == "xTable")         return 9;
      if (type == "form")           return 10;
      return -1;
}
function isSectionFn(elt)
{
if(elt && elt.className)
{
return elt.className == "section"
}
return false;
}
function getSectionExp(elt)
{
if(isSectionFn(elt))
{
if(elt.axis && (elt.axis.length == 2) && 
(elt.axis[1].vars) && (elt.axis[1].vars.length >0) )
return elt.axis[1].vars[0]
}
return null;
}
function addOrRemoveBreak(iAction){
var elts = getSelectedElts();
if ((elts != null) && (elts.length > 0)) {
if (elts[0].className == "reportCell") {
var wob=elts[0].parent,block=wob.parent
if ((block.blockType=="xTable") && ("b,b" == wob.zone)) {
launchManageBreak()
return
}
_breakBlockBID = block.bid;
_sAxisName = getTableCellAxisName(elts[0], true);
if (_sAxisName != "") {
var p = urlParams(true)
if (p != "")
{ 
wt()
setReportUrl( "processQuickAddRemoveBreaks" + _appExt + p + "&iAction=" + iAction + "&sFrom=Report&sRedirect=report&blockID=" + _breakBlockBID + "&sAxisName=" + _sAxisName, true);
}
}
}
}
}
function launchManageBreak()
{
wt()
var elts=getSelectedElts();
if((elts != null) && (elts.length > 0))
{
var url = "language/"+_lang+"/html/breakDialog.html"
if(elts[0].className == "block")
{
_breakBlockID= elts[0].bid;
_breakCellBid = null;
}
else if(elts[0].className == "reportCell")
{
var sAxisName = getTableCellAxisName(elts[0], true);
_breakCellBid = (sAxisName != "" )?elts[0].bid:null; 
var block =  elts[0].parent.parent
_breakBlockID = block.bid;
if(hasBrksFn(elts[0]))
url+="?selBrk="+elts[0].id
}
frameNav("DlgFrame",url)
}
}
function addOrRemoveSort(iAction)
{
var elts = getSelectedElts();
var sExpSel = null
var doNothing = false;
var block = elts[0].parent.parent;
if ((elts != null) && (elts.length > 0))
{
if(isCellInSection(elts[0]) )
{
_sAxisName = "row"
}
else if(isSectionFn(elts[0]))
{
_sAxisName = "row"
sExpSel = getSectionExp(elts[0]);
if(sExpSel == null)
doNothing == true;
}
else if (elts[0].className == "reportCell")
{
_sAxisName = getTableCellAxisName(elts[0], false);
if( typeof(elts[0].nestedExpressionID != "undefined") && (_sAxisName =="" || block.blockType=="form"  )) 
{
var ax = getNestedExpressionAxis(elts[0])
if(null != ax && ax != -1)
{
_sAxisName = (ax == 0) ?"col":"row"
}
}
}
if((!doNothing)&&
( isCellInSection(elts[0]) || isSectionFn(elts[0]) || (elts[0].className == "reportCell") ))
{
if(isSectionFn(elts[0]))
{
_sortBlockBID = null
}
else
{
_sortBlockBID = block.bid;
}
if (_sAxisName != "")
{
wt()
var p = urlParams(true)
p += (_sortBlockBID!=null)?('&blockID='+_sortBlockBID):''
p += (sExpSel!=null)?('&sExpSel='+sExpSel):''
if (p != "") 
frameNav("Report", "ajaxIncManageSortsDlg" + _appExt + p + "&iAction=" + iAction + "&sFrom=Report&sRedirect=report&sAxisName=" + _sAxisName, true);
}
}
}
}
ENTRY_FIELD = 0
COMBO_BOX= 1
RADIO_BTT   = 2
LIST_BOX= 3
CALENDAR    = 4
SPINNER     = 5
SLIDER      = 6
TREEVIEW    = 7
CHECK_BOX   = 8
LIST_BOX_MULT  = 9
DBL_SLIDER   = 10
TREEVIEW_MULT   = 11
BLK_CTRL= 12
function preselectIFWidget(index)
{
frameNav("DlgFrame","language/"+_lang+"/html/inputFormWizard.html?action=0&preSelIdx="+index);
}
function removeAllSorts()
{
var elts = getSelectedElts();
var iAction = 4; 
if ((elts != null) && (elts.length > 0))
{
var elt = elts[0]
if(isSectionCell(elt) || isCellInSection(elt) || isSectionFn(elt))
  addOrRemoveSort(0);
else if ( (elts[0].className == "reportCell") || (elts[0].className == "block"))
{
var block = (isBlock(elts[0]))?elts[0]: elts[0].parent.parent;
_sortBlockBID = block.bid;
var p = urlParams(true)
if (p != "")
{
frameNav("Report", "ajaxIncManageSortsDlg" + _appExt + p + "&iAction=" + iAction + "&sFrom=Report&sRedirect=report&blockID=" + _sortBlockBID, true);
}
}
}
}
function interactiveCreateObservers()
{
newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_FETCH_DATA,updatePurgeIcn)
newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_FETCH_DATA,updatePurgeIcn)
newObserverOneEvent(_EVT_FETCH_DATA,updatePurgeIcn)
newObserverTwoEvents(_EVT_PURGE_DATA,_EVT_PAGE_LOADED,updateDPsRowsCB)
newObserverOneEvent(_EVT_ESC_KEY,escKeyCB)
toolbarObs=newObserverOneEvent(_EVT_SELECTION_CHANGES,selectionChangeCB)
newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_WOM_LOADED, updateDictionaryEvent);
newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_WOM_LOADED, updateDictionaryEvent);
newObserverTwoEvents(_EVT_UNDO_REDO,_EVT_WOM_LOADED, updateDictionaryEvent);
newObserverTwoEvents(_EVT_VARS_UPDATE,_EVT_WOM_LOADED, updateDictionaryEvent);
newObserverTwoEvents(_EVT_DRILL_ACTION,_EVT_WOM_LOADED, updateDictionaryEvent);
newObserverTwoEvents(_EVT_DOC_UPDATE,_EVT_WOM_LOADED, getPromptList);
newObserverTwoEvents(_EVT_REFRESH_DATA,_EVT_WOM_LOADED, getPromptList);
newObserverTwoEvents(_EVT_DOC_UPDATE, _EVT_WOM_LOADED, updateDPListCB);
}
function interactiveActionCB(srcWidget, pers, actionId)
{
var bPageChanged = ((actionId=="firstIcn") || (actionId=="previousIcn") || (actionId=="pageNumber") || (actionId=="nextIcn") || (actionId=="lastIcn"));
if ((actionId != "formatPainter") && (actionId != "tabsZone") && (window.escapeFormatPainter) && !bPageChanged)
{
escapeFormatPainter()
}
if (processInsertBlock(actionId,srcWidget))
return true;
if (processTurnToBlock(actionId,srcWidget))
return true;
var tableType="", cellType="";
switch(actionId)
{
case "deleteShortcut":
case "removeReportElement":
case "deleteTableCell":
var elts=getSelectedElts();
if (elts.length==0) return;
else
removeReportElement(elts, true);
break;
case "pageHeader":
formatTxt("&showHeader=" + (srcWidget.isChecked()));
break;
case "pageFooter":
formatTxt("&showFooter=" + (srcWidget.isChecked()));
break;
case "showFormulaBar":
var bShow = workbenchW.getAction("showFormulaBar").isChecked()
workbenchW.getPerspective().showFormulaBar(bShow);
break;
case "formulaOK":
case "formulaText":
var elts = getSelectedElts();
var elt=(elts&&(elts.length==1)) ? elts[0] : null;
var oldValue=(elt!=null) ? elt.formula : null;
var formulaTextWidget = srcWidget;
if(actionId=="formulaOK")
formulaTextWidget = srcWidget.getParentContainer().getItemByValue("formulaText")
var newValue = formulaTextWidget.getValue();
if(oldValue != newValue)
{
wt()
updateParentIdRefBid() 
var p=urlParams(false)
if (p!="")
{
self.document.viewerForm.action="processFormulaValidation"+_appExt+p+"&nAction=1"
self.document.viewerForm.target="DlgFrame"
self.document.viewerForm.sParam1.value=newValue;
self.document.viewerForm.submit();
}
}
break;
case "formulaCancel":
resetFormula();
break;
case "variableCreation":
wt()
updateParentIdRefBid() 
window.formulaEdition = false
window.formulaText = srcWidget.getParentContainer().getItemByValue("formulaText")
frameNav("DlgFrame","language/"+_lang+"/html/variableEditorDialog.html")
break;
case "formulaEditor":
wt()
updateParentIdRefBid() 
window.formulaEdition = false 
window.formulaText = srcWidget.getParentContainer().getItemByValue("formulaText")
frameNav("DlgFrame","language/"+_lang+"/html/variableEditorDialog.html?isFormulaEdit=yes")
break;
case "editFormula": 
wt()
updateParentIdRefBid() 
var elts = getSelectedElts();
var elt=(elts&&(elts.length==1)) ? elts[0] : null;
window.formulaEdition = false
window.formulaExpression=(elt!=null) ? elt.formula : "";
frameNav("DlgFrame","language/"+_lang+"/html/variableEditorDialog.html?isFormulaEdit=yes")
break;
case "newDimension": 
case "newVariable": 
case "newMeasure": 
case "newDetail": 
var squalif="dimension";
if(actionId == "newMeasure")
squalif="measure";
if(actionId == "newDetail")
squalif="detail";
wt()
updateParentIdRefBid() 
window.formulaEdition = false; 
frameNav("DlgFrame","language/"+_lang+"/html/variableEditorDialog.html?qualification="+squalif)
break;
case "formulaExpandCollapse":
formulaBarExpandCollapse(srcWidget);
break;
case "mergeDimensions":
invokeMergeDimsAction();
break;
case "calcSum":
case "calcCount":
case "calcAvg":
case "calcMin":
case "calcMax":
case "calcTotal":
case "calcPercent":
case "addSumMenu":
wt()
var calcAction = null
var calcType   = null
var calcFullSum= false
var needFullSupp=false
var elts = getSelectedElts()
var isSmartMeasure = (elts[0].isSmartMeasure?elts[0].isSmartMeasure:false)
switch(actionId)
{
case "calcSum":
calcAction = "SUM"
calcType = 0
break
case "calcCount":
calcAction = "COUNT"
calcType = 1
break
case "calcAvg":
calcAction = "AVERAGE"
calcType = 2
break
case "calcMin":
calcAction = "MIN"
calcType = 3
break
case "calcMax":
calcAction = "MAX"
calcType = 4
break
case "calcTotal":
calcAction = "DEFAULT"
calcType = 6
break
case "calcPercent":
calcAction = "PERCENT"
calcType = 5
break
case "addSumMenu":
needFullSupp = true
if(isSmartMeasure)
{
calcAction = "DEFAULT"
calcType = 6
}
else
{
calcAction = "SUM"
calcType = 0
}
break 
}
var p    = urlParamsNoBID()
var zone = elts[0].parent.zone
var tabBID = elts[0].parent.parent.bid
var blockType = elts[0].parent.parent.blockType
if (p!="" && tabBID!=null)
{
var remove = false
var hremove = false
var vremove = false
var types = new Array
var htypes = new Array, vtypes = new Array
if (blockType == "hTable" && _hCalc != null)
types =_hCalc.split(",")
else if (blockType == "vTable" && _vCalc != null)
types =_vCalc.split(",")
else if(blockType == "xTable")
{
if (_hCalc != null)
htypes =_hCalc.split(",")
if (_vCalc != null)
vtypes =_vCalc.split(",")
for(var i=0; i<htypes.length; i++)
{
if ((htypes[i] != "") && (htypes[i] == calcType))
{
hremove = true
if(needFullSupp)
calcFullSum = hasFullSum(htypes)
break
}
}
for(var i=0; i<vtypes.length; i++)
{
if ((vtypes[i] != "") && (vtypes[i] == calcType))
{
vremove = true
if(needFullSupp)
calcFullSum = hasFullSum(vtypes)
break
}
}
}
for(var i=0; i<types.length; i++)
{
if ((types[i] != "") && (types[i] == calcType))
{
if(needFullSupp)
calcFullSum = hasFullSum(types)
if (blockType == "hTable")
hremove = true
else if(blockType == "vTable")
vremove = true
break
}
}
if (zone == "b,b" && (!hremove && !vremove))
frameNav("DlgFrame","language/"+_lang+"/html/calculationDialog.html?sCalcAction="+calcAction+"&sTargetBid="+tabBID+"&sBid="+elts[0].bid+"&isReport="+hremove+"&sDup="+vremove+"&bMerge="+calcFullSum)
else
frameNav("Report","processCalc"+_appExt+p+"&sCalcAction="+calcAction+"&sBid="+getBIDtoApplyCalc(elts[0])+"&sTargetBid="+tabBID+"&keywords="+zone+"&isReport="+hremove+"&sDup="+vremove+"&bMerge="+calcFullSum,true)
}
break
case "removeSorts":
var p=urlParams(true,true)
if (p!="")
{
if (srcWidget.par&&srcWidget.par.par&&srcWidget.par.par.isChart)
{
var axName="x",par=srcWidget.par.par
switch(par.sortAxisIndex)
{
case 3: axName="x"; break
case 4: axName="y"; break
case 5: axName="z"; break
}
p+="&sAxisName="+axName+"&sAxisIndex="+par.sortIndexInAxis
}
wt()
eventManager.notify(_EVT_REINIT_REPORTMAP_NODE)
frameNav("Report","ajaxIncManageSortsDlg"+_appExt+p+"&iSortAction=-1",true)
}
break;
case "sortProps":
wt()
frameNav("DlgFrame","language/"+_lang+"/html/sortDialog.html")
setSort(getSelectedElts());
break;
case "customSort":
wt()
if (srcWidget.par&&srcWidget.par.par&&srcWidget.par.par.isChart)
{
frameNav("SecondDlgFrame","language/"+_lang+"/html/applyCustomSortDialog.html?ID=" + srcWidget.par.par.exprID)
} else {
frameNav("SecondDlgFrame","language/"+_lang+"/html/applyCustomSortDialog.html")
}
setSort(getSelectedElts());
break;
case "sortBut":
m = interactivePers.getMenu("sortSubMenu")
if (m.getItem(2).isChecked()) {
m.getItem(2).check(false)
m.getItem(0).check(true)
} else if (m.getItem(1).isChecked()) {
m.getItem(1).check(false)
m.getItem(0).check(true)
} else {
m.getItem(1).check(true)
m.getItem(0).check(false)
}
var p=urlParams(true)
if (p!="")
{
wt()
eventManager.notify(_EVT_REINIT_REPORTMAP_NODE)
frameNav("Report","ajaxIncManageSortsDlg"+_appExt+p+"&iSortAction="+(m.getItem(1).isChecked()?1:(m.getItem(2).isChecked()?2:0))+"&sSortPriority="+_sortPriority,true)
}
break;
case "sort0":
case "sort1":
case "sort2":
var val=actionId.slice(4)
var p=urlParams(true)
if (p!="")
{
if (srcWidget.par && srcWidget.par.par && srcWidget.par.par.isChart)
{
var axName="x",par=srcWidget.par.par
switch(par.sortAxisIndex)
{
case 3: axName="x"; break
case 4: axName="y"; break
case 5: axName="z"; break
}
p+="&sAxisName="+axName+"&sAxisIndex="+par.sortIndexInAxis
}
wt()
eventManager.notify(_EVT_REINIT_REPORTMAP_NODE)
frameNav("Report","ajaxIncManageSortsDlg"+_appExt+p+"&iSortAction="+val+"&sSortPriority="+_sortPriority,true)
}
break;
case "insertRowAbove":
wt()
insertIntoTable(getSelectedElts(), false, true);
break;
case "insertRowBelow":
wt()
insertIntoTable(getSelectedElts(), true, true);
break;
case "insertColumnOnLeft":
wt()
insertIntoTable(getSelectedElts(), false, false);
break;
case "insertColumnOnRight":
wt()
insertIntoTable(getSelectedElts(), true, false);
break;
case "defineControl":
case "insertControlMenu":
wt()
frameNav("DlgFrame","language/"+_lang+"/html/inputFormWizard.html?action=0")
break;
case "insertEntryFieldControl":
wt()
preselectIFWidget(ENTRY_FIELD)
break;
case "insertComboBoxControl":
wt()
preselectIFWidget(COMBO_BOX)
break;
case "insertRadioButtonControl":
wt()
preselectIFWidget(RADIO_BTT)
break;
case "insertSingleListBoxControl":
wt()
preselectIFWidget(LIST_BOX)
break;
case "insertListBoxControl":
wt()
preselectIFWidget(LIST_BOX_MULT)
break;
case "insertCalendarControl":
wt()
preselectIFWidget(CALENDAR)
break;
case "insertSpinnerControl":
wt()
preselectIFWidget(SPINNER)
break;
case "insertSingleSliderControl":
wt()
preselectIFWidget(SLIDER)
break;
case "insertListCheckBoxControl":
wt()
preselectIFWidget(CHECK_BOX)
break;
case "insertDoubleSliderControl":
wt()
preselectIFWidget(DBL_SLIDER)
break;
case "insertTreeviewControl":
wt()
preselectIFWidget(TREEVIEW)
break;
case "insertTreeview_multControl":
wt()
preselectIFWidget(TREEVIEW_MULT)
break;
case "addElementlink" :
case "filterByInputControl" :
wt()
var elts = getSelectedElts()
frameNav("DlgFrame","language/"+_lang+"/html/inputFormWizard.html?action="+(actionId=="filterByInputControl"?0:2))
break;
case "editElementlink" :
var repFrame = getReportFrame()
if (repFrame&&repFrame.bif_menuEditCB)
repFrame.bif_menuEditCB("contextual")
break;
case "removeElementlink" :
var repFrame = getReportFrame()
if (repFrame&&repFrame.bif_menuRemoveCB)
repFrame.bif_menuRemoveCB("contextual")
break;
case "alignLeftItem":
setAlignmentTo("left")
break;
case "alignCenter":
setAlignmentTo("center")
break;
case "alignRight":
setAlignmentTo("right")
break;
case "alignTop":
setAlignmentTo("top")
break;
case "alignMiddle":
setAlignmentTo("middle")
break;
case "alignBottom":
setAlignmentTo("bottom")
break;
case "relativePos":
setAlignmentTo("relativePos")
break;
case "frontMenuItem":
setLayeringLevelTo("front")
break;
case "backMenuItem":
setLayeringLevelTo("back")
break;
case "forwardMenuItem":
setLayeringLevelTo("forward")
break;
case "backwardsMenuItem":
setLayeringLevelTo("backwards")
break;
        case "dsEditFilter":       
case "filterBtn":
case "addFilter":
case "editFilter":
{  
    wt();  
    frameNav("DlgFrame", "language/"+_lang+"/html/filterDlg.html?actionId="+actionId); 
            break;
        }  
        case "dsRemoveFilter":
            handleRemoveFilterInDocStructLeftPane(); 
            break;    
case "removeFilter":
handleRemoveFilter(); 
break
case "bgimgBtn":
processBackgroundImage()
break;
case "layeringBtn":
setLayeringLevelTo("front");
break;
case "alignBtn":
var o=this, elts=getSelectedElts()
var len=(elts!=null)?elts.length:0
var oneEltSelected=(len>1)?false:true
if (isMultiTableCellInSameTable(elts))
oneEltSelected=true
setAlignmentTo(!oneEltSelected ? "left" : "relativePos");
break;
case "formatPainter":
var formatPainter = srcWidget;
var bid = null
if (_singleSel != null) 
{
bid = _singleSel.bid
} 
else if (_tableBid != null)
{
bid =_tableBid
}
formatPainter.bid = bid;
_formatPainterBid = formatPainter.isChecked()? bid:null
_reportIdxSrc = (_formatPainterBid != null)?DS.iReportID:null
_isSingleActionFormatPainter = true
break;
case "bold":
var res=getAttFromElts(["font","bold"],getSelectedElts());
var checked=false;
if (res.defined)
checked = (res.ret==1)
formatTxt("&b=" + (checked ? 0 : 1));
break;
case "italic":
var res=getAttFromElts(["font","italic"],getSelectedElts());
var checked=false;
if (res.defined)
checked = (res.ret==1)
formatTxt("&i=" + (checked ? 0 : 1));
break;
case "under":
var res=getAttFromElts(["font","under"],getSelectedElts());
var checked=false;
if (res.defined)
checked = (res.ret==1)
formatTxt("&u=" + (checked ? 0 : 1));
break;
case "strikethrough":
formatTxt("&st=" + (srcWidget.isChecked()? 1 : 0));
break;
case "wrapText":
var res=getAttFromElts(["align","wrap"],getSelectedElts());
var checked=false;
if (res.defined)
checked = (res.ret==1)
formatTxt("&wt=" + (checked ? 0 : 1) + (!checked ? "&iH=0" : "") );
break;
case 'formatFont':
wt();
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatCellDlg.html?tabIndex="+_formatCellDlgTab.font);
break
case "fontName":
formatTxt("&f="+escape(srcWidget.getSelection().value)); 
break;
case "fontSize":
formatTxt("&s="+(srcWidget.getSelection().value));
break;
case "leftAlign":
if (srcWidget.isChecked())
formatTxt("&a=0");
else
formatTxt("&a=3"); 
break;
case "centerAlign":
if (srcWidget.isChecked())
formatTxt("&a=1"); 
else
formatTxt("&a=3"); 
break;
case "rightAlign":
if (srcWidget.isChecked())
formatTxt("&a=2"); 
else
formatTxt("&a=3"); 
break;
case "topAlign":
if (srcWidget.isChecked())
formatTxt("&va=0"); 
else
formatTxt("&va=3"); 
break;
case "middleAlign":
if (srcWidget.isChecked())
formatTxt("&va=1"); 
else
formatTxt("&va=3"); 
break;
case "bottomAlign":
if (srcWidget.isChecked())
formatTxt("&va=2"); 
else
formatTxt("&va=3"); 
break;
case "increaseFontSize":
var elts=getSelectedElts();
for (var i=0; i < elts.length; i++){
setFontSize(elts[i],"up");
}
break;
case "decreaseFontSize":
var elts=getSelectedElts();
for (var i=0; i < elts.length; i++){
setFontSize(elts[i],"down");
}
break;
case "widthField":
var widthTmp=srcWidget.getValue();
if (widthTmp!="")
setCellSizePadding("&cellWidth="+Math.round(userUnitToMetric(widthTmp)))
break;
case "heightField":
var heightTmp=srcWidget.getValue();
if (heightTmp!="")
setCellSizePadding("&cellHeight="+Math.round(userUnitToMetric(heightTmp)))
break;
case "verticalPadding":
setCellSizePadding("&cellVPadding="+Math.round(userUnitToMetric(srcWidget.getValue())))
break;
case "horizontalPadding":
setCellSizePadding("&cellHPadding="+Math.round(userUnitToMetric(srcWidget.getValue())))
break;
case "mergeOrSplit":
processMergeOrSplit (srcWidget.isChecked(), processMergeOrSplitEnd, processMergeOrSplitCancel)
break;
case "addDoclink":
case "editDoclink":
case "docLinkMenu":
wt();
showHyperlinkDialog(actionId,true);
break;
case "insertLinkMenu":
case "addHyperlink":
case "editHyperlink":
case "editHyperlink":
case "removeDoclink":
case "removeHyperlink":
case "setContentAsHyperlink":
wt();
showHyperlinkDialog(actionId,false);
break;
case "editLink":
wt();
showHyperlinkDialog(actionId,false);
break;
case "fontColor":
case "bgColor":
case "borderColor":
var elts = getSelectedElts();
if(elts && elts.length > 0)
{
if(!isGraphBlock(elts[0]))
_currColorAsmChartZoneInfo = null
}
var color=srcWidget.getDefaultActionColor()
if (color ==null)
{
_currColorCombo=srcWidget;
_currColorCB=toolBarColorPickCB
frameNav("DlgFrame","language/"+_lang+"/html/colorPickerDialog.html")
}
else
{
addLastUsedColor(srcWidget.getDefaultActionColor());
switch (actionId)
{
case "fontColor": colParam="fg"; break;
case "borderColor": colParam="bc"; break;
case "bgColor": colParam="bg"; break;
}
if(_currColorAsmChartZoneInfo && _currColorAsmChartZoneInfo.v && _currColorAsmChartZoneInfo.v.length > 0)
formatTxt(convURL(color));
else
formatTxt("&"+colParam+"="+convURL(color));
}
break;
case "bordersBtn":
processBorders(srcWidget);
break;
case "purge":
case "purgeAll":
case "purgeQ":
case "purgeQAll":
purgeDocument(null,true,null);
break;
case "showCurrentReportChangesTabsZone":
wt()
var p=urlParamsNoBID()
if (p!="")
setReportUrl("processTrackDataChanges"+_appExt+p+"&sShowCurrentReportChanges="+tabsZoneMenu.showCurrentReportChangesTabsZone.isChecked(),true)
break;
case "showCurrentReportChangesFromContext":
wt()
var p=urlParamsNoBID()
if (p!="")
setReportUrl("processTrackDataChanges"+_appExt+p+"&sShowCurrentReportChanges="+reportContextMenu.showCurrentReportChangesFromContext.isChecked(),true)
if (tdcShowChangesIcon.isDisplayed())
tdcShowChangesIcon.check(reportContextMenu.showCurrentReportChangesFromContext.isChecked());
break;
case "cut" :
case "copy" :
case "paste" :
var noCoords = false 
if ((actionId == "paste") && srcWidget && srcWidget.userData!=null && srcWidget.userData.noCoords!=null)
noCoords = srcWidget.userData.noCoords
copyCutPasteCB(actionId, noCoords);
break;
case "deleteRow" :
case "deleteColumn" :
var elts=getSelectedElts();
removeReportElement(elts, true);
break;
case "deleteCell" :
var elts=getSelectedElts();
removeReportElement(elts, false, true);
break;
case "deleteCellAndSection" :
var elts=getSelectedElts();
removeReportElement(elts, false);
break;
case "addChart":
iAction= ChartDialogLayout.Insert
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?iAction=" + iAction)
break;
case "editChart": 
iAction= ChartDialogLayout.Edit
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?iAction=" + iAction)
break;
case "editReportElement": 
iAction= ChartDialogLayout.Edit
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html")
break;
case "formatChartBtn":
case "formatChart":
wt()
var url = "language/"+_lang+"/html/applyFormatChartDialog.html"
if (_areaDefid) url += "?areaId=" + _areaDefid 
frameNav('DlgFrame', url)
break;
case "customPaletteBtn":
wt()
var url = "language/"+_lang+"/html/editorPaletteDialog.html"
url +="?comeFrom=toolbox"
frameNav('DlgFrame', url)
break;
case "flashy":
case "standard":
case "highcontrast":
wt()
var p = urlParamsNoBID()
if (p=="") return
p += "&sBid=" + getChartBid()
p += "&template=" + actionId
setReportUrl(_root + "processFormatChartToolbar"+_appExt+p,true);
break;
case "breakBtn":
if(_breakBtnDefaultAction)
{
applyBreakBtnDefautAction(_breakBtnDefaultAction);
}
break;
case "manageBreaks":
launchManageBreak();
break;
case "removeBreak":
addOrRemoveBreak(0);
break;
case "addBreak":
addOrRemoveBreak(1);
break;
case "removeAllBreaks":
var elts=getSelectedElts();
if ((elts != null) && (elts.length > 0))
{
var elt = (elts[0].className == "reportCell")?elts[0].parent.parent:(elts[0].className == "block")?elts[0]:null
if(elt)
_breakBlockBID = elt.bid
else
_breakBlockBID = null 
if ((null != _breakBlockBID) 
&&
 ((elts[0].className == "reportCell") || (elts[0].className == "block")))
{
var p = urlParams(true)
if (p != "")  
{
wt()
setReportUrl( "processQuickAddRemoveBreaks" + _appExt + p + "&iAction=4&sFrom=Report&sRedirect=report&blockID=" + _breakBlockBID, true);
}
}
}
break;
case "sortMenu":
applySortMenuDefautAction(_sortMenuDefaultAction);
break;
case "ascendingSort":
if(workbenchW.getAction("ascendingSort").isChecked())
{
addOrRemoveSort(1); 
}
setSelSort(1)
break;
case "descendingSort":
if(workbenchW.getAction("descendingSort").isChecked())
{
addOrRemoveSort(2);
}
setSelSort(2)
break;
case "noSort" :
if(workbenchW.getAction("noSort").isChecked())
{
addOrRemoveSort(0);
}
setSelSort(0)
break;
case "removeAllSorts" :
wt()
removeAllSorts();
break;
case "manageSorts" :
launchManageSort();
break;
case "ascendingSortBis":
var ascendingSortBis = workbenchW.getAction("ascendingSortBis")
if(ascendingSortBis.isChecked())
{
_CurrentBlock.addOrRemoveSortForMiniSubMenu(1,ascendingSortBis.userData); 
}
setSelSort(1,null,null,true)
break;
case "descendingSortBis":
var descendingSortBis = workbenchW.getAction("descendingSortBis")
if(descendingSortBis.isChecked())
{
_CurrentBlock.addOrRemoveSortForMiniSubMenu(2,descendingSortBis.userData);
}
setSelSort(2,null,null,true)
break;
case "noSortBis" :
    var noSortBis = workbenchW.getAction("noSortBis") 
if(noSortBis.isChecked())
{
_CurrentBlock.addOrRemoveSortForMiniSubMenu(0,noSortBis.userData);
}
setSelSort(0,null,null,true)
break;
    case "rankingBtn":
case "editRanking":
    case "addRanking":
var msrDico = getFilteredDictionaryByParam("kind",_msr);
if(msrDico && msrDico.flatDico.size() == 0)
{
showAlertDialog("You cannot insert a ranking. There is no measure for this dimension.","Ranking",2); 
}
else
{
var elts=getSelectedElts();
if((elts != null) && (elts.length > 0))
{
var elt = elts[0];  
_rankBlockID = elt.bid;
if (isTableCell(elt))
{
elt=elts[0].parent.parent
_rankBlockID = elt.bid;
}
else if(isCellInSection(elt))
{
_rankBlockID = getSectionCellParentBID(elt);
}
frameNav("DlgFrame","language/"+_lang+"/html/rankingDialog.html")
}
}
    break;
    case "removeRanking":
    wt()
var elts=getSelectedElts();
if((elts != null) && (elts.length > 0))
{
var elt = elts[0];
if (isTableCell(elt))
{
elt=elts[0].parent.parent
_rankBlockID= elt.bid;
} else if (isCellInSection(elt)) {
_rankBlockID = getSectionCellParentBID(elt);
} else {
_rankBlockID= elt.bid;
}
var p = urlParams(true)
if (p != "")  
frameNav("Report", "processRanking" + _appExt + p + "&iAction=0&sFrom=Report&sRedirect=report&blockID="+ _rankBlockID, true);
}
    break;
case "insertSectionMenu":
case "insertSection":
simulateDragDropAction("section",null);
break;
case "insertSectionCM":
wt()
var url = "processSetSection"+_appExt
var p=urlParams(false,true);
p += "&sX=" + pixelToMetrics(_insertCursorX, _dpi) 
p += "&sY=" + pixelToMetrics(_insertCursorY, _dpi) 
p += "&sRow="  + _insertRow
p += "&sTargetBid=" + getSelectedElts()[0].bid
p += "&sRefreshRMNode=yes"
_paramsInsertSection = url+p;
showDictionaryDialog(selectSectionOKCB,false,"dp",preFilterSection);
break;
case "setAsSection":
var arr = getSelectedElts()
if((arr!=null) && (arr.length == 1) && isTableCell(arr[0]))
{
updateContainerIdRefBid(); 
var p=urlParams(true,false);
if (p!="") 
{
url ="processSetSection"+_appExt
p += "&sTargetBid=" + getParentContainer(arr[0]).bid
p += "&sRefreshRMNode=yes"
setReportUrl(url+p,true);
}
}
break;
case 'insertCellDocName':
cellType=cellType?cellType:"DocumentName";
case 'insertCellRefreshDate':
cellType=cellType?cellType:"LastRefreshDate";
case 'insertCellDrillFilters':
cellType=cellType?cellType:"DrillFilter";
case 'insertCellQuerySummary':
cellType=cellType?cellType:"QuerySummary";
case 'insertCellPromptSummary':
cellType=cellType?cellType:"PromptSummary";
case 'insertCellRFilterSummary':
cellType=cellType?cellType:"ReportFilterSummary"
case 'insertCellPage':
cellType=cellType?cellType:"Page";
case 'insertCellPageTotalPage':
cellType=cellType?cellType:"Page_NumberOfPages";
case 'insertCellTotalPage':
cellType=cellType?cellType:"NumberOfPages";
case "insertBlankCell":
cellType=cellType?cellType:"";
simulateDragDropAction("cell",cellType); 
break;
        case "formatHeader":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatReportHdrFtrDlg.html?header=true");            
            break;
        case "formatFooter":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatReportHdrFtrDlg.html?header=false");            
            break;
        case "formatReport":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatReportDlg.html?tabIndex="+_formatReportDlgTab.general);            
            break;
        case "formatCell":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatCellDlg.html");
            break;
        case "formatTable":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html");
            break;
        case "formatSection":
wt()
            frameNav("DlgFrame", "language/"+_lang+"/html/formatSectionDlg.html");
            break;
case "formatBtn":
setFormatting();
break;
case "clearContents":
clearContents(1);
break;
case "clearConditionalFormatting":
clearContents(2);
break;
case "clearAll":
clearContents(3);
break;
case "clearFormat":
case "resetToDefaultFmtBtn":    
resetFormat();
break;
        case "pageOrientationPortrait":
formatPage("pageOrien",1)
            break;
        case "pageOrientationLandscape":
formatPage("pageOrien",0)
            break;
        case "displayPageFooter":
formatPage("showFooter",0)
            break;      
        case "displayPageHeader":
formatPage("showHeader",0)
            break;
        case "pageHeaderHeight":
            var selc = srcWidget.getValue()
formatPage("headerHeight",userUnitToMetric(selc))
            break;
        case "pageFooterHeight":
            var selc = srcWidget.getValue()
formatPage("footerHeight",userUnitToMetric(selc))
            break;
        case "topMarginField":
            var selc = srcWidget.getValue()
formatPage("topMargin",userUnitToMetric(selc))
            break;
        case "bottomMarginField":
            var selc = srcWidget.getValue()
formatPage("bottomMargin",userUnitToMetric(selc))
            break;
        case "leftMarginField":
            var selc = srcWidget.getValue()
formatPage("leftMargin",userUnitToMetric(selc))
            break;
        case "rightMarginField":
            var selc = srcWidget.getValue()
formatPage("rightMargin",userUnitToMetric(selc))
            break;
        case "pageRows":
            var selc = srcWidget.getValue()
wt()
formatPage("pageRows",selc)
            break;
        case "pageColumn":
           var selc = srcWidget.getValue()
wt()
formatPage("pageColumn",selc)
            break;
        case "pageFormat":
            var selc = srcWidget.getSelection().index
formatPageSize(_pageSizeLabelArr[selc], userUnitToMetric(_pageSizeWHPortrait[selc].w), userUnitToMetric(_pageSizeWHPortrait[selc].h))
break;
case "showHideBreakHeader":
case "showHideTableHeader":
case "showHideTableHHeader":
case "showHideTableVHeader":
case "showHideXTableHHeader":
case "showHideXTableVHeader":
case "showHideBreakHHeader":
showHideTableVHeader(actionId)
break;
case "showHideBreakFooter":
case "showHideTableFooter":
case "showHideTableHFooter":
case "showHideTableVFooter":
case "showHideXTableHFooter":
case "showHideXTableVFooter":
showHideTableVFooter(actionId)
break;
case "preferences":
wt()
frameNav("DlgFrame","language/"+_lang+"/html/userPrefDialog.html")
break;
case "appliedFormattingRulesMenu":
case "changeFormattingRulesOrder":
case "manageFormattingRules":
wt()
frameNav("DlgFrame","language/"+_lang+"/html/alerterDialog.html")
break;
        case "addReport":
        addReport();
        break;
        case "duplicateReport":
        duplicateReport();
        break;
        case "deleteReport":
        if (DS.arrReports.length>1)
        { 
wt();
showPromptDialog("Are you sure you want to delete this report?","Deleting Report",1,deleteReport)
        }
        break;
        case "moveReportLeft":
        moveReport("previous")
        break
        case "moveReportRight":
        moveReport("next")
        break;
        case "moveReportFirst":
        moveReport("first")
        break
        case "moveReportLast":
        moveReport("last")
        break;
        case "reportName":        
        renameReport(srcWidget.getValue());
        break;
        case "renameReport":
        var tabs = workbenchW.getPerspective().getNaviBar();
        var tab = tabs.items[tabs.getSelection().index];
        interactiveTabsDblClickCB(tab);
        break;
        case "changeNumberFormat":    
        {            
            var sel=srcWidget.getSelection();
            if (sel!=null && document.viewerForm)
            {                                                              
                wt();
                var elts=getSelectedElts(), len = elts.length;               
                var p= (len>0) ? urlParams(false) : urlParamsNoBID();
                var url=_root + "processFormatNumber"+_appExt+p;
                document.viewerForm.action = url;
                document.viewerForm.sParam1.value=sel.value;
                document.viewerForm.target="Report";
                setTimeout("document.viewerForm.submit()",1);
            }
            break;
        }    
      case "currencyDollar":    
        {            
            if (document.viewerForm)
            {                                                              
                wt();
                var elts=getSelectedElts(), len = elts.length;               
                var p= (len>0) ? urlParams(false) : urlParamsNoBID();
                var url=_root + "processFormatNumber"+_appExt+p;
                document.viewerForm.action = url;
                document.viewerForm.sParam1.value="L[\u0024]T[#]T[gs]T[#]T[#]T[0]T[ds]T[0]T[0]";
                document.viewerForm.target="Report";
                setTimeout("document.viewerForm.submit()",1);
            }
            break;
        }  
        case "currencyEuro":    
        {            
            if ( document.viewerForm)
            {                                                              
                wt();
                var elts=getSelectedElts(), len = elts.length;               
                var p= (len>0) ? urlParams(false) : urlParamsNoBID();
                var url=_root + "processFormatNumber"+_appExt+p;
                document.viewerForm.action = url;
                document.viewerForm.sParam1.value="L[\u20AC]T[#]T[gs]T[#]T[#]T[0]T[ds]T[0]T[0]";
                document.viewerForm.target="Report";
                setTimeout("document.viewerForm.submit()",1);
            }
            break;
        }  
        case "currencyYen":    
        {            
            if (document.viewerForm)
            {                                                              
                wt();
                var elts=getSelectedElts(), len = elts.length;               
                var p= (len>0) ? urlParams(false) : urlParamsNoBID();
                var url=_root + "processFormatNumber"+_appExt+p;
                document.viewerForm.action = url;
                document.viewerForm.sParam1.value="L[\u00A5]T[#]T[gs]T[#]T[#]T[0]";
                document.viewerForm.target="Report";
                setTimeout("document.viewerForm.submit()",1);
            }
            break;
        }  
        case "formatPercent":    
        {            
            if (document.viewerForm)
            {                                                              
                wt();
                var elts=getSelectedElts(), len = elts.length;               
                var p= (len>0) ? urlParams(false) : urlParamsNoBID();
                var url=_root + "processFormatNumber"+_appExt+p;
                document.viewerForm.action = url;
                document.viewerForm.sParam1.value="T[#]T[gs]T[#]T[#]T[0]T[ds]T[0]T[0]T[pc]L[%]";
                document.viewerForm.target="Report";
                setTimeout("document.viewerForm.submit()",1);
            }
            break;
        }  
case "chart_expandChildren":
doChartExpandCollapse("EXPAND")
break;
case "chart_expandDescendent":
doChartExpandCollapse("EXPAND_ALL")
break;
case "chart_collapseChildren":
doChartExpandCollapse("COLLAPSE_ALL")
break;
case "chart_symetricExpandChildren":
doChartExpandCollapse("EXPAND_SYMMETRIC")
break;
case "chart_symetricExpandDescendent":
doChartExpandCollapse("EXPAND_ALL_SYMMETRIC")
break;
case "chart_symetricCollapseChildren":
doChartExpandCollapse("COLLAPSE_ALL_SYMMETRIC")
break;
case "chart_expandAllHierarchies":
doChartExpandCollapse("RESET_EXPAND")
break;
case "chart_collapseAllHierarchies":
doChartExpandCollapse("RESET_COLLAPSE")
break;
case "chart_ecDrillUp":
doChartExpandCollapse("FOCUSOUT")
break;
case "chart_ecDrillDown":
doChartExpandCollapse("FOCUSIN")
break;
case "chart_expandLevelNone":
chart_setSelExpandLevel();
doChartExpandCollapse("EXPAND_TO_LEVEL",null,"none")
break;
case "chart_expandLevel1":
chart_setSelExpandLevel();
doChartExpandCollapse("EXPAND_TO_LEVEL",null,1)
break;
case "chart_expandLevel2":
chart_setSelExpandLevel();
doChartExpandCollapse("EXPAND_TO_LEVEL",null,2)
break;
case "chart_expandLevel3":
chart_setSelExpandLevel();
doChartExpandCollapse("EXPAND_TO_LEVEL",null,3)
break;
case "chart_expandLevel4":
chart_setSelExpandLevel();
doChartExpandCollapse("EXPAND_TO_LEVEL",null,4)
break;
case "chart_expandLevelMore":
chart_setSelExpandLevel();
var url = "language/"+_lang+"/html/expandMoreLevelDlg.html?fromChart_ExpandLevel="+true
frameNav("DlgFrame",url)
break;
case "expandChildren":
doExpandCollapse("EXPAND")
break;
case "expandDescendent":
doExpandCollapse("EXPAND_ALL")
break;
case "collapseChildren":
doExpandCollapse("COLLAPSE_ALL")
break;
case "symetricExpandChildren":
doExpandCollapse("EXPAND_SYMMETRIC")
break;
case "symetricExpandDescendent":
doExpandCollapse("EXPAND_ALL_SYMMETRIC")
break;
case "symetricCollapseChildren":
doExpandCollapse("COLLAPSE_ALL_SYMMETRIC")
break;
case "expandAllHierarchies":
doExpandCollapse("RESET_EXPAND", getSelectedElts())
break;
case "collapseAllHierarchies":
doExpandCollapse("RESET_COLLAPSE", getSelectedElts())
break;
case "ecDrillUp":
doExpandCollapse("FOCUSOUT")
break;
case "ecDrillDown":
doExpandCollapse("FOCUSIN")
break;
case "expandLevelNone":
setSelExpandLevel();
doExpandCollapse("EXPAND_TO_LEVEL",null,"none")
break;
case "expandLevel1":
setSelExpandLevel();
doExpandCollapse("EXPAND_TO_LEVEL",null,1)
break;
case "expandLevel2":
setSelExpandLevel();
doExpandCollapse("EXPAND_TO_LEVEL",null,2)
break;
case "expandLevel3":
setSelExpandLevel();
doExpandCollapse("EXPAND_TO_LEVEL",null,3)
break;
case "expandLevel4":
setSelExpandLevel();
doExpandCollapse("EXPAND_TO_LEVEL",null,4)
break;
case "expandLevelMore":
setSelExpandLevel();
var url = "language/"+_lang+"/html/expandMoreLevelDlg.html?fromChart_ExpandLevel="+false
frameNav("DlgFrame",url)
break;
        case "showElement":   
        case "hideColumn":                
        case "showHiddenColumns":       
        case "showAllHiddenContent":         
        case "hideElementWhenEmpty":
        case "hideElement":
        case "hideElementWhen":   
            handleShowHide(actionId);  
            break;      
case "startOnNewPage":
case "avoidPageBreaks":
handleStartNewPageBreaks(actionId, srcWidget.isChecked())
break  
case "repeatFreeCellBtn":
case "repeatChartBtn":
case "repeatOnEveryPage":
handleRepeat("repeatRE", srcWidget.isChecked())
break;
case "repeatVHeaderOnPages":
case "repeatVFooterOnPages":
case "repeatHHeaderOnPages":
case "repeatHFooterOnPages":
handleRepeat(actionId, srcWidget.isChecked())
break;
    case "editDP":   
    {
hideDrillTooltip() 
            wt();
            var url=_root+"editQueries" + _appExt + urlParamsNoBID()+"&sEmptyLab="+_emptyValueLab;                  
            frameNav("DlgFrame",url);                                   
            break; 
        }          
        case "editDPMenu":   
            wt()
showAlertDialog("To edit queries, change your settings in the BI launch pad to use the Rich Internet Application or Web Intelligence Rich Client (Desktop). Note: Availability of these interfaces depends on your user rights.","Edit Data Provider",0,null);  
            break; 
        case "purgeDPMenu":   
            wt()
purgeDocument(null,true,null, true); 
            break;                     
        case "editSection":
        {                  
            var elts=getSelectedElts();
            var elt=elts[0];
            if (elt.className != "section") return;        
var axis = elt.axis, id = ""
for (var i=0; i < axis.length; i++) {
if (axis[i].vars) {
if (axis[i].vars.length > 0) {
id = axis[i].vars[0]
break
}
}
}
            var editSectionAction=workbenchW.getAction("editSection");
            if (!editSectionAction) return;
            editSectionAction.userData= id;
            wt();    
            showDictionaryDialog(editSectionOKCB,false,"dp",beforeShowEditSectionCB,preFilterSection);                       
            break;            
        }   
case "sectionMinimumHeight" :
var p = urlParams()
if (p=="") return
wt();
p += "&height=" + Math.round(userUnitToMetric(srcWidget.getValue()))
setReportUrl(_root + "processFormatToolbar"+_appExt+p,true);
break;  
case "keepCurrentColors":
var p = urlParams(true)
if (p=="") return
wt();
p += "&actionId=keep"+"&refId=" + _chartIdRef
setReportUrl(_root + "processColorAssignment"+_appExt+p,true);
break;
case "clearSeriesColors":
var p = urlParams(true)
if (p=="") return
wt();
p += "&actionId=clear"
setReportUrl(_root + "processColorAssignment"+_appExt+p,true);
break;
case "formatDataSeries":
var color =  _currColorAsmChartZoneInfo.c
var sPropsStruct = propsToJsonForColorAssignmt(convURL(color))
var elts=getSelectedElts();
            var elt=elts[0];
            var sHasColorAssignment=elt.hasColorAssignment
wt()
            var url = "language/"+_lang+"/html/formatDataSeriesDialog.html?sPropsStruct="+encodeURIComponent(sPropsStruct)+"&sHasColorAssignment="+sHasColorAssignment;
frameNav('DlgFrame', url)
break;
case "groupingBtn":
case "manageGroup":
frameNav('DlgFrame','language/' + _lang + '/html/customGroupingEditDialog.html')
break;
case "groupValues":
frameNav("DlgFrame","language/"+_lang+"/html/customGroupingQuickDialog.html")
break;
case "ungroup":
 var elts=getSelectedElts(),elt=elts[0];
 var customGroupingProps={groups:[]};
         customGroupingProps.varId = elt.id;
     var arr = getInstancesNameList(elt.bid);
     var jsObj=getDictionaryObjectFromId(elt.id);
     for(var i=0;i<arr.length;i++)
     {     
     if(jsObj.groupLov.indexOf(arr[i])>=0) 
     {
     customGroupingProps.groups.push(            
              {
              groupName: arr[i],                   
              valuesList: []
                      }
               )  
     }    
      }
    self.document.viewerForm.action="processCustomGrouping"+_appExt+urlParams(true);
    self.document.viewerForm.target="Report"
    self.document.viewerForm.sParam1.value=Object.toJSON(customGroupingProps);
      eventManager.notify(_EVT_VARS_UPDATE,{customGrouping:true,varId:elt.id})
      wt();
    self.document.viewerForm.submit();          
break;
case "renameGroup":
frameNav("DlgFrame","language/"+_lang+"/html/customGroupingQuickDialog.html?bRename=true");
break;
case "othersValuesVisible":
var elts=getSelectedElts(),elt=elts[0];
var customGroupingProps={groups:[]};
        customGroupingProps.varId = elt.id;         
        customGroupingProps.groupOtherState="SHOW";
   self.document.viewerForm.action="processCustomGrouping"+_appExt+urlParams(true);
   self.document.viewerForm.target="Report"
   self.document.viewerForm.sParam1.value=Object.toJSON(customGroupingProps);
      eventManager.notify(_EVT_VARS_UPDATE,{customGrouping:true,varId:elt.id})
 wt();
   self.document.viewerForm.submit();
break;
case "othersValuesGroup":
frameNav("DlgFrame","language/"+_lang+"/html/customGroupingQuickDialog.html?bOtherGroup=true");
break;
default:
return false
}
return true
}
function setSelExpandLevel()
{
var expandLevel0 = workbenchW.getAction("expandLevelNone");
var expandLevel1 = workbenchW.getAction("expandLevel1");
var expandLevel2 = workbenchW.getAction("expandLevel2");
var expandLevel3 = workbenchW.getAction("expandLevel3");
var expandLevel4 = workbenchW.getAction("expandLevel4");
var expandLevelMore = workbenchW.getAction("expandLevelMore");
expandLevel0.check(false);
expandLevel1.check(false);
expandLevel2.check(false);
expandLevel3.check(false);
expandLevel4.check(false);
expandLevelMore.check(false);
}
function chart_setSelExpandLevel()
{
var expandLevel0 = workbenchW.getAction("chart_expandLevelNone");
var expandLevel1 = workbenchW.getAction("chart_expandLevel1");
var expandLevel2 = workbenchW.getAction("chart_expandLevel2");
var expandLevel3 = workbenchW.getAction("chart_expandLevel3");
var expandLevel4 = workbenchW.getAction("chart_expandLevel4");
var expandLevelMore = workbenchW.getAction("chart_expandLevelMore");
expandLevel0.check(false);
expandLevel1.check(false);
expandLevel2.check(false);
expandLevel3.check(false);
expandLevel4.check(false);
expandLevelMore.check(false);
}
function getChartBid() {
var bid = _chartBid
if (null == bid) {
     var elts=getSelectedElts();
        bid=elts[0].bid;
    }
return bid
}
function beforeShowEditSectionCB(tree)
{
    var editSectionAction=workbenchW.getAction("editSection");
    tree.selectInData(editSectionAction.userData, "id", true);
}
function editSectionOKCB(tree)
{
    var sels = tree.getSelections();
    if (!sels) return;
    var id=sels[0].userData.id;       
    var editSectionAction=workbenchW.getAction("editSection");
    if (editSectionAction.userData && id==editSectionAction.userData) return;
    wt();
    var url = "processEditSection" + _appExt + urlParams(true,true) + "&sID="+id;
    setReportUrl(url,true);
}
function updateDPListCB()
{
var url =  _root + "ajaxIncDPList" + _appExt
url += urlParamsNoBID()
ajaxUpdater({"url":url, "ajaxErrorCB":manageAjaxError, "postCB":function(jsonObj)
{
DS.arrDPs=jsonObj.arrDPs;
updateRefreshIcons();
}
});
}
function initRefreshDPMenu()
{
initRefreshDPMenu_(this);
}
function initRefreshDPMenu_(menu)
{
if(DS!=null)
{
if(DS.arrDPs!= null && DS.arrDPs.length >0)
{
var nbDPs = (menu.menuItemsCount());
var item = null;
for (var n=0; n<nbDPs; n++)
menu.remove(0);
for(var i=0; i<DS.arrDPs.length; i++)
{
var userData = new Object();
userData.id=DS.arrDPs[i].id;
userData.index=i;
userData.refreshable=DS.arrDPs[i].refreshable;
item = menu.add(DS.arrDPs[i].name,"Refresh "+DS.arrDPs[i].name,refreshCallBack,null,null,null,null,null,null,null,null,userData);
item.setDisabled(!DS.arrDPs[i].refreshable); 
}
var userData = new Object();
userData.id="";
menu.addSeparator();
var icon = toolboxImg(113);
menu.add("refreshAll","Refresh All",refreshCallBack,icon.src,icon.dx,icon.dy,null,icon.disDx,icon.disDy,null,null,userData);
}
}
}
function refreshCallBack()
{
wt();
var data = this.getUserData();
var p = urlParamsNoBID();
if (p != "") 
{
if(data.id != "")
{
var index = data.index;
if(data.refreshable) 
refreshDocument(index);
}
else
refreshDocument();
} 
}
function initPurgeDPMenu()
{
initPurgeDPMenu_(this);
}
function initPurgeDPMenu_(menu)
{
if(DS!=null)
{
if(DS.arrDPs!= null && DS.arrDPs.length >0)
{
var nbDPs = (menu.menuItemsCount());
var item = null,dp = null, userdata = null;
for (var n=0; n<nbDPs; n++)
menu.remove(0);
for(var i=0; i<DS.arrDPs.length; i++)
{
dp = DS.arrDPs[i];
userData = new Object();
userData.id=dp.id;
userData.index=i;
item = menu.add(dp.name,"Purge "+dp.name,purgeCallBack,null,null,null,null,null,null,null,null,userData);
}
var userData = new Object();
userData.id="";
menu.addSeparator();
var icon = toolboxImg(303);
menu.add("purgeAll","Purge All",purgeCallBack,icon.src,icon.dx,icon.dy,null,icon.disDx,icon.disDy,null,null,userData);
}
}
}
function purgeCallBack()
{
wt();
var data = this.getUserData();
var p = urlParams(true)
if (p != "") 
{
if(data.id != "")
{
var index = data.index;
purgeDocument(index,true,null, true);
}
else
purgeDocument(null,true,null,true);
}
}
function processInsertBlock(id,srcWidget)
{
_showTurnToDlg = false ;
var tableActionsGhost = new Array ("insertVertTableMenu","insertHoriTableMenu","insertCrossTableMenu","insertFormMenu","insertVertTable","insertHoriTable","insertCrossTable","insertForm");
var tableActionsWithDlg = new Array ("defineVertTable","defineHoriTable","defineCrossTable","defineForm");
var tableActions = tableActionsWithDlg.concat(tableActionsGhost);
if(tableActions.indexOf(id)>-1)
{
var tableType = srcWidget.getUserData();
var tableActionsDD = tableActionsGhost.concat(tableActionsWithDlg.slice(0,4));
if(tableActionsWithDlg.indexOf(id)>-1)
{
_showTurnToDlg = true;
}
if(tableActionsDD.indexOf(id)>-1)
{
simulateDragDropAction("table",tableType);
}
else 
{
wt()
iAction= ChartDialogLayout.InsertFull
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type=" + tableType)
}
return true;
}
var chartActionsGhost = new Array("insertChartColumn","insertChartStackedColumn","insertChart100StackedColumn","insertChartDualAxisCol","insertChartDualAxisColLine","insertChart3DCol","insertColumnChartMenu",
  "insertLineChart","insertDualAxisLineChart","insertSurfaceLineChart","insertLineChartMenu",
  "insertPieChart","insertPieChartWithDepth","insertDoughnutChart","insertPieChartMenu",
  "insertBarChart","insertHorizStackedBarChart","insert100StackedBarChart","insertBarChartMenu",
  "insertScatter","insertBubble","insertPointChartMenu",
  "insertBoxPlot","insertRadarChart","insertTreeMapChart","insertHeatMapChart","insertTagCloudChart","insertOtherChartMenu");
var chartActionsWithDlg = new Array ("insertChart","insertBarChartSubMenu","insertLineChartSubMenu","insertPieChartSubMenu","insertPointSubMenu","insertReportElement");
var chartActions = chartActionsGhost.concat(chartActionsWithDlg);
if(chartActions.indexOf(id)>-1)
{
var chartType = srcWidget.getUserData();
var chartActionsDD = chartActionsGhost.concat(chartActionsWithDlg.slice(0,1));
if(chartActionsWithDlg.indexOf(id)>-1)
{
_showTurnToDlg = true;
}
if (chartActionsDD.indexOf(id)>-1)
{
simulateDragDropAction("chart",chartType);
}
else 
{
wt()
iAction= ChartDialogLayout.InsertFull
if ("insertReportElement" == id) chartType = "businessgraphics/vertical_bar" 
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type=" + chartType)
}
return true;
}
return false;
}
function processTurnToBlock(id,srcWidget)
{
var turnToTable = new Array ("turntoVTable","turntoHTable","turntoXTable");
var turnToChart = new Array ("turnToColumn","turnToLine","turnToPie");
var turnToWithDlg = new Array ("turnto","turntoMenu");
var turntoActions = turnToWithDlg.concat(turnToChart).concat(turnToTable);
if(turntoActions.indexOf(id)>-1)
{
var blockType = srcWidget.getUserData(),curBlockType=null;
var elts=getSelectedElts(), elt=elts[0]
 if(isTableCell(elt))
 elt=getBlockFromTableCell(elt);
curBlockType=elt?elt.blockType:null;
if(turnToWithDlg.indexOf(id)>-1) 
{
if(curBlockType!=null) 
{
wt();
blockType=elt.blockType;
iAction= isGraph(elt)?ChartDialogLayout.TurnTo:ChartDialogLayout.TableTurnTo;
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type="+blockType+"&bid="+elt.bid)
}
}
else 
{
if(curBlockType!=null && blockType!=curBlockType) 
{
var url="";
if(turnToTable.indexOf(id)>-1)
{
url = _root + "processTurnToTable" + _appExt
    url += urlParamsNoBID() + "&tableType="+blockType                          
url += "&sTargetBid=" + elt.bid
url += "&sAction=turnTo"
}
else
{
url = _root + "processTurnToChart" + _appExt
    url += urlParamsNoBID() + "&chartType="+blockType                          
url += "&sTargetBid=" + elt.bid
url += "&sAction=turnTo"
}
wt();
setReportUrl(url,true);
}
}
return true;
}
return false;
}
_maxLastUsedColors = 8
function addLastUsedColor(color)
{
if ((color == null) || (color == "-1,-1,-1")) return
alreadyExists = false
len = (WS._lastUsedColorsAr.length > _maxLastUsedColors) ? _maxLastUsedColors : WS._lastUsedColorsAr.length
for (var i = 0; i < len; i++)
{
if (WS._lastUsedColorsAr[i] == color) return
}
limit = (len > _maxLastUsedColors) ? _maxLastUsedColors : len++
for (i = limit; i > 0; i--)
{
WS._lastUsedColorsAr[i] = WS._lastUsedColorsAr[i-1]
}
WS._lastUsedColorsAr[0] = color
recordProp("CDZ_VIEW_lastUsedColors", WS._lastUsedColorsAr.join(";").replace(/,/g, "."))
}
_globalWOMCallback=null
function turnToDialog_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?iAction=" + ChartDialogLayout.TurnTo+"&bid="+applyBid+"&type=" + _selectedBlockType)
}
function breakDlg_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/breakDialog.html")
}
_fchartDlgSelectedPane = null
_fchartDlgSelectedPaneValue = null
function formatChart_globalWOMCallback()
{
var url = "language/"+_lang+"/html/applyFormatChartDialog.html"
if (_areaDefid) url += "?areaId=" + _areaDefid 
frameNav('DlgFrame', url)
}
function editFilterFromViewer_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/editFilterDialog.html?viewer")
}
function editFilterFromPane_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/editFilterDialog.html")
}
function alerter_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/alerterDialog.html")
}
function sortProperties_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/sortDialog.html")
}
function customSort_globalWOMCallback()
{
frameNav("SecondDlgFrame",_root+"language/"+_lang+"/html/applyCustomSortDialog.html")
}
function ranking_globalWOMCallback()
{
frameNav("DlgFrame","language/"+_lang+"/html/rankingDialog.html")
}
function toolBarColorPickCB(c)
{
_currColorCombo.setColor(c);
_currColorCombo.setDefaultActionColor(c);
addLastUsedColor(c);
if (_appFmt)
{
var color=_currColorCombo.getDefaultActionColor()
addLastUsedColor(color)
if (color==null)
color="-2,-2,-2";
var colParam="";
switch (_currColorCombo.actionId)
{
case "fontColor": colParam="fg"; break;
case "borderColor": colParam="bc"; break;
case "bgColor": colParam="bg"; break;
}
if(_currColorAsmChartZoneInfo && _currColorAsmChartZoneInfo.v && _currColorAsmChartZoneInfo.v.length > 0)
{
formatTxt(convURL(color));
}
else
formatTxt("&"+colParam+"="+convURL(color));
}
else
{
setApplyToolTip()
}
}
function interactiveClickCB(e,o,bid,fr) 
{
_feedbackManager.setResizeObj(null)
_lastLayer=o
var xybid = getClickCoordinatesInContainer(o,e);
_insertCursorX = xybid.x
_insertCursorY = xybid.y
_insertRow = xybid.row
_initialCursorX = xybid.x;
_initialCursorY = xybid.y;
if (eventIsLeftButton(e,fr) && window._isDDEnabled && DDActionMethod)
{
DDActionMethod(o,cn,e)
simulateClick(e)
return _webKit?true:false
}
var elt = findByBID(doc,bid)
var cn = elt?elt.className:""
cn = isTableCell(elt)?"tableCell":cn
var isChartZone = (elt?elt.className=="chartArea":false);
var isSection = (cn == "section");
_feedbackManager.setResizeObj(o)
if(isTableCell(elt) 
|| isFreeCell(elt) 
|| isSection
|| isSectionCell(elt) || isCellInSection(elt) 
|| isChartZone ) 
{
parentElt=getParentContainer(elt);
parentLyr=getParentLayerFromBid(o, parentElt.bid);
if(parentLyr!=null)
{
var xybid = getClickCoordinatesInContainer(parentLyr,e);
window._insertCursorParentX=xybid.x
window._insertCursorParentY=xybid.y
window._insertParentRow=xybid.row
}
}
_keyboardMode.set(e);
var prms = new Object();
prms.selectedElements = getSelectedElts();
prms.element = elt;
prms.e = e;
prms.lastSelectedElements = _lastSelectedBIDArr;
prms.keyboardMode = _keyboardMode;
prms.selectedCellIds = duplicateSelInstanceIds();
var selectionMgt = null;
if ((e.shiftKey || e.ctrlKey) && eventIsLeftButton(e,fr) && isTableCell(elt))
{
selectionMgt = new SelectionManagement (prms);
selectionMgt.init();
}
if (canSelectBid(bid, cn, e, o, fr)) {
if ((cn=="pageHeader") || (cn=="pageFooter") || (cn=="body"))
{
setFollowObjectInfo(null);
} 
saveLastSelectedBID(bid);
}
if ((e.shiftKey || e.ctrlKey) && eventIsLeftButton(e,fr) && isTableCell(elt) && selectionMgt!=null)
{
var BIDS = selectionMgt.getActiveZone();
for (var i = 0; i < BIDS.toBeSelected.length; i++)
{
canSelectBid(BIDS.toBeSelected[i], cn, e, o, fr);
} 
for (var i = 0; i < BIDS.toBeDeselected.length; i++)
{
deselectSingle(fr, BIDS.toBeDeselected[i]);
} 
}
if (eventIsLeftButton(e,fr) && (window._formatPainterBid != null) && (_formatPainterBid != bid))
{
var p=urlParamsNoBID()
p += "&sTargetBid="+ bid + "&sBid=" + _formatPainterBid + "&sUnitIsInch=" + WS._unitIsInch
if ((_reportIdxSrc != null) && (_reportIdxSrc != DS.iReportID)){
p += "&reportIdxSrc="+ _reportIdxSrc
}
wt()
setTimeout('setReportUrl("' + _root + "processFormatPainter"+_appExt + p + '")',1);
formatPainterStopIfSingleAction(e)
}
if (_ie&& _feedbackManager.isResizing())
{
o.setCapture(true)
}
}
function deselectChartArea(fr, bid) {
elt=findByBID(doc,bid)
if (elt)
{
var cn = elt.className
if ((cn == "block") && isGraph(elt)) 
{
_feedbackManager.unselect()
selectSingle(fr, bid)
}
}
}
function traceLog(s)
{
if (window.traceLogHook)
traceLogHook(s)
}
function interactiveCreateStatusBar(pers) 
{
}
function resetBidTable()
{
bidTable = null;
bidTable = new Hash();
}
function updatePurgeIcn()
{
}
function purgeDocument(iDataProvider,bAskConfirmation, bCheckPDP,bPurgePrompts)
{
if(bAskConfirmation) 
{
frameNav("DlgFrame",_root + "language/"+_lang+"/html/purgeDialog.html"+((iDataProvider != null)?("?iDPIndex="+iDataProvider):("")));
}
else
{
if (_showQueryPanel) { 
updateIsQPModified(true);
_bUsePurge = true;
}
setFollowObjectInfo(null);
var p=urlParams(false,true)
if (p!="")
{
if(iDataProvider != null)
p+="&iDPIndex="+iDataProvider;
if(bPurgePrompts!=null)
p+="&bPurgePrompts="+bPurgePrompts;
eventManager.notify(_EVT_PURGE_DATA);
wt()
setReportUrl(_root+"processPurge"+_appExt+p);
}
}
}
function releaseSelection()
{
if (_currContextMenu)
_currContextMenu.show(false)
}
function bodyDragStart()
{
if (_currContextMenu)
_currContextMenu.show(false)
return false
}
function findByClassName(elt,className)
{
if(!elt)
return null
if (elt.className==className)
return elt
if (elt.children)
{
var children=elt.children,len=children.length
for (var i=0;i<len;i++)
{
var ret=findByClassName(children[i],className)
if (ret)
return ret
}
}
return null
}
function findParentByClassName(elt,className)
{
if (elt.className==className)
return elt
if (elt.className!=className && elt.className=="doc")
return null
if (elt.className=="body" && (className=="pageHeader" || className=="pageFooter"))
return findByClassName(elt.parent,className) 
if (elt.parent)
{
var ret=findParentByClassName(elt.parent,className)
if (ret)
return ret
}
return null
}
DDActionMethod=null
_isSelectStartEnabled=true
function CancelSelectStartCB()
{
return _isSelectStartEnabled
}
function findByBID(elt,bid)
{
if(!elt)
return null
if (elt.bid==bid)
return elt
if (elt.children)
{
var children=elt.children,len=children.length
for (var i=0;i<len;i++)
{
var ret=findByBID(children[i],bid)
if (ret)
return ret
}
}
return null
}
_emptyURL="url("+_skin+"../transp.gif)"
function makeSectionSensitiveIE(l)
{
if (_ie&&(l.getAttribute("isSection")=="1"))
{
var st=l.parentNode.style
st.backgroundImage=_emptyURL
st.backgroundRepeat="no-repeat"
}
}
function arrowRollover(lyr,isLeft, isActive)
{
changeOffset(lyr,0,(isLeft?32:48)+(isActive?32:0))
}
function toUserUnit(value, isInch)
{
if (isInch){
if (WS._unitIsInch) return value;
else return (value * 2.54);
} else {
if (WS._unitIsInch)  return (value / 25.4);
else return (value / 10.0);
}
}
function metricToUserUnit(value)
{ 
if (WS._unitIsInch)  {
return (value / 3600);
} else {
return (value / 1417.32283);
}
}
function userUnitToMetric(value)
{
if (WS._unitIsInch)  {
return (value * 3600);
} else {
return (value * 1417.32283);
}
}
_moutTimer=null
function clearMoutTimer()
{
if (_moutTimer!=null)
{
traceLog("CLEAR _moutTimer:" + _moutTimer)
clearTimeout(_moutTimer)
_moutTimer=null
}
}
var _instanceIds = []
function canSelectBid(bid, cn, e, o, fr) {
if (selectedBid == null) {
selectedBid = new Hash
}
if (_selectionElementTypesAr == null) {
_selectionElementTypesAr = new Array
}
var ctrl = _mac?e.metaKey :e.ctrlKey, shift = e.shiftKey, isLeftBut = eventIsLeftButton(e,fr)
if ((_selectionElementTypesAr.length > 0) && (_selectionElementTypesAr[0] == _selectionElementType.ChartArea)) {
if (ctrl || shift) {
return false
} else {
_feedbackManager.unselect()
}
}
if ((_selectionElementTypesAr.length > 0) && (!ctrl && !shift) && isLeftBut) {
_selectionElementTypesAr.clear()
}
var newselectionElementTypesAr = getSelectionElementTypes(cn)
var elts = getSelectedElts(), eltsLen = elts.length;
var sameBid = false
var isMultiSelect = false
selectedChartArea = null
if (ctrl || shift) {
if (eltsLen > 0) {
if (!arrayContains(newselectionElementTypesAr, _selectionElementTypesAr)) { 
return false
}
isMultiSelect = true
}
_isSelectStartEnabled=false
escapeFormatPainter()
if (isLeftBut) { 
var oldSel = selectedBid.get(bid)
if (oldSel != null) {
var localElt = findByBID(doc, bid)
if (!isTableCell(localElt)) { 
selectedBid.unset(bid)
selectObj(fr, bidTable.get(bid), false, bid)
return false
}
}
}
if (_ie) e.returnValue=false
for (var i=0; i < newselectionElementTypesAr.length; i++) {
if (_selectionElementTypesAr.indexOf(newselectionElementTypesAr[i]) < 0) {
newselectionElementTypesAr[i] = null
}
}
} else if (eltsLen > 0){
var idref=(o && o.getAttribute)?o.getAttribute("idref"):null;
var indexIdRef = arrayFind(window,"_instanceIds",idref,'id')
var keepInstanceIds = (idref!=null && indexIdRef>=0 && !isLeftBut) 
if(!keepInstanceIds)
_instanceIds.clear();
for (var i=0; i < eltsLen; i++) {
var lBid = elts[i].bid
if (bid == lBid) {
sameBid = true
} else if (isLeftBut) {
selectedBid.unset(lBid)
selectObj(fr, bidTable.get(lBid), false, lBid)
}
}
if (!sameBid && !isLeftBut) { 
for (var i=0; i < eltsLen; i++) {
var lBid = elts[i].bid
selectedBid.unset(lBid)
selectObj(fr, bidTable.get(lBid), false, lBid)
}
}
}
_selectionElementTypesAr = newselectionElementTypesAr.compact()
var d=fr.document
var z=getZoom()/100
_tableBid=null
_areaDefid = null
switch(cn) {
case "pageHeader":
case "pageFooter":
case "section":
if (eventIsLeftButton(e,fr))
{
var isHeader  = (cn=="pageHeader")
var isFooter  = (cn=="pageFooter")
var zone=getCellZone(o,e,d,true,isFooter,isHeader)
o.downZone=zone
o.resizeZoneX=absxpos(e,z,fr)
o.resizeZoneY=absypos(e,z,fr)
o.mouseMoved=false
o.isSectionOrHeaderOrFooter=true
o.isFooter=isFooter
o.isSection=(cn=="section")
drawResize(e)
}
selectObj(fr, bidTable.get(bid), true, bid, null, new_FeedbackBehavior(), o)
break
case "reportCell":
case "cell":
case "block":
if (eventIsLeftButton(e,fr))
{
d.body.onmousedown=releaseSelection
d.body.ondragstart=bodyDragStart
d.body.onmousemove=globmmove
d.body.onmouseup=globmup
if (WS._showLeftPane==_paneState.normal)
{
var lPane = workbenchW.getPerspective().getLeftPane().getFrame();
if (null != lPane) {
lPane.document.body.onmousemove=leftPaneMmove
lPane.document.body.onmouseup=leftPaneMup
}
}
if ((cn != "block") || isGraph(elts[0])) 
{
o.zone=_cellContent 
o.resizeZoneX = absxpos(e,z,fr)
o.resizeZoneY = absypos(e,z,fr)
o.mouseMoved=false
drawResize(e)
}
}
selectObj(fr, bidTable.get(bid), true, bid, null, new_FeedbackBehavior({"isMultiSelect":isMultiSelect}), o)
break
case "tableCell":  
if (eventIsLeftButton(e,fr))
{
var zone=getCellZone(o,e,d,true,false,true)
o.downZone=zone
o.resizeZoneX=absxpos(e,z,fr)
o.resizeZoneY=absypos(e,z,fr)
o.mouseMoved=false
drawResize(e)
}
selectObj(fr, bidTable.get(bid), true, bid, null, new_FeedbackBehavior({"resizable":false, "movable":false, "isTableCell":true, "isMultiSelect":isMultiSelect}) , o, isLeftBut)
selectedBid.set(bid, 1);
break
case "chartArea":
var subRegion = _feedbackManager.getSubRegion()
if (subRegion) {
selectedChartArea = subRegion
_feedbackManager.select(o, fr, subRegion.coords, new_FeedbackBehavior({"zoom":getZoom()}))
}
var area = _feedbackManager.getDynArea();
if(area && area.ItemID!=null)
{
_feedbackManager.select(o, fr, area.coords, new_FeedbackBehavior({"zoom":getZoom()}))
}
try
{
if (_foldPanelVisible == "1") {
self.frames['Report'].frames['FoldPanel'].changeFoldPanelForTables(o,_foldPanelVisible,false,bidTable,d,elts[0]);
}
}
catch(e) {}
break
case "body":
if (_foldPanelVisible == "1") {
self.frames['Report'].frames['FoldPanel'].changeFoldPanelForTables(o,_foldPanelVisible,false,bidTable,d,elts[0]);
}
break
}
if (!sameBid) {
selectedBid.set(bid,1)
}
selectionChanged(true)
return true
}
function deselectAll(fr, bid, restricTo)
{
if (selectedBid == null) return
selectedBid.each(function(pair) {
var i = pair.key;
if (i!=bid)
{
var deselect=true
if (restricTo)
{
var elt=findByBID(doc,i)
var className=elt?elt.className:""
if (className!=restricTo)
deselect=false
}
if (deselect)
{
selectedBid.unset(i);
selectObj(fr, bidTable.get(i), false, i)
}
}
});
if (!_useParentContextMenu)
{
_bodrill=null
_drillPathInfo=null
}
}
var _selInstanceIds = [];
function removeFromSelInstanceIds(id)
{
if (typeof(id)=="undefined") return;
for (var i=0; i < _instanceIds.length; i++)
{
if (_instanceIds[i].id == id)
{
_instanceIds.splice(i,1);
break;
}
}
}
function addToSelInstanceIds(obj)
{
if (typeof(obj)=="undefined") return;
if (typeof(obj.id)=="undefined") return;
var bAlreadyExists = false;
for (var i=0; i < _instanceIds.length; i++)
{
if (_instanceIds[i].id == obj.id)
{
bAlreadyExists = true;
break;
}
}
if (!bAlreadyExists) _instanceIds.push(obj);
}
function duplicateSelInstanceIds()
{
var ret = new Array();
for (var i=0; i < _instanceIds.length; i++)
{
ret[ret.length] = _instanceIds[i];
}
return ret;
}
function selectObj(fr, objs, sel, bid, forceScroll, behavior, selectedInstanceObj,isLeftBut)
{
if (objs==null)
return
var count=objs.length, elt=findByBID(doc,bid), behavior = behavior?behavior:new_FeedbackBehavior()
behavior.select = true
var last_selInstanceIds = duplicateSelInstanceIds();
if (elt)
{
var idref = (selectedInstanceObj && selectedInstanceObj.getAttribute)?selectedInstanceObj.getAttribute("idref"):null
var indexIdRef = arrayFind(window,"_instanceIds",idref,'id');
if (null != idref && indexIdRef<0) 
{
var value ="";
if (null != _curDataPath)
{
for (var i=0; i < _curDataPath.length; i++)
{
var d = _curDataPath[i] 
if(d.id == elt.id)
{
value = d.v;
break;
}
} 
}
var currentBID = selectedInstanceObj.getAttribute("bid");
if (currentBID == bid)
{
addToSelInstanceIds({id:idref,v:value,bid:bid});
}
}
behavior.isSingle = (count == 1)
var instancesCount = _instanceIds.length
for (var i=0; i < count; i++)
{
behavior.isMultiInstance = (_instanceIds.length > 1)
behavior.isSelectedInstance = (_instanceIds.length > 0) && (count > 1) &&  (objs[i].getAttribute) 
&& (objs[i].getAttribute("idref") == _instanceIds[_instanceIds.length-1].id);
var bFirst = !behavior.isMultiSelect && !behavior.isMultiInstance && ((count > 1) && (i==0))
if (isLeftBut && objs[i].getAttribute("idref") == idref && isSelected(idref,last_selInstanceIds))
{
unSelectObj(idref);
behavior.isSelectedInstance = false;
removeFromSelInstanceIds(idref);
}
selectObjInstance(fr, objs[i], sel, bid, forceScroll, elt, bFirst, behavior)
}
}
}
function isSelected(idref,last_instanceIds)
{
if (typeof(idref)=="undefined") return false;
if (typeof(last_instanceIds)=="undefined" || !last_instanceIds) return false;
var selected =  false;
for (var i = 0; i< last_instanceIds.length ; i++)
{
if (idref == last_instanceIds[i].id)
{
selected = true;
break;
}
}
return selected;
}
function restoreInstanceSelection(fr, objs, sel, bid, elt)
{
if (objs==null)
return
var count=objs.length
var behavior = new_FeedbackBehavior({"resizable":false, "movable":false, "isTableCell":true, "isMultiSelect":true});
behavior.select = true
behavior.isSingle = (count == 1)
var instancesCount = _instanceIds.length
behavior.isMultiInstance = (instancesCount > 1)
for (var i=0; i < count; i++)
{
behavior.isSelectedInstance = (instancesCount > 0) && (count > 1) &&  (objs[i].getAttribute) 
&& (objs[i].getAttribute("idref") == _instanceIds[instancesCount-1].id)
var bFirst = !behavior.isMultiSelect && !behavior.isMultiInstance && ((count > 1) && (i==0))
var forceScroll = null; 
selectObjInstance(fr, objs[i], sel, bid, forceScroll, elt, bFirst, behavior)
}
}
var _currentSelTableIdref=null
function unSelectObj(idref)
{
_feedbackManager.unselectElt(idref);
}
function selectObjInstance(fr, o, sel, bid, forceScroll, elt, bFirst, behavior)
{
var selW=4
var dselW=selW*2
var cn=elt.className
_isTableSelectedForFold=false;
if (bFirst) { 
_feedbackManager.unselect()
}
if (forceScroll && bFirst)
{
if (fr == null) return
var absPos =  getPos(o)
var absPosX = absPos.x, absPosY = absPos.y, scrX = getScrollX(fr), scrY = getScrollY(fr)
var scrToX = -1, scrToY = -1
if (((absPosX - scrX) < 0) || ((absPosX - scrX) > winWidth(fr))) {
scrToX = absPosX
}
if (((absPosY - scrY) < 0) || ((absPosY - scrY) > winHeight(fr))) {
scrToY = absPosY
}
winScrollTo(((scrToX != -1)? scrToX : scrX), ((scrToY != -1)? scrToY : scrY), fr)
}
var isTable = (cn=="block")&& !isGraph(elt)
if ((cn=="block") && isGraph(elt)) 
{
if (sel) {
_feedbackManager.select(o, fr, null, behavior)
} else {
_feedbackManager.unselect()
}
} else if (isTable) { 
if (sel) {
behavior.resizableW=false
behavior.resizableH=false
_feedbackManager.select(o, fr, null, behavior)
if (behavior.isSingle || behavior.isSelectedInstance) {
_currentSelTableIdref = isStructure?getBlockFromTableCell(elt).bid:getElementOrParentIdref(o)
}
} else {
_feedbackManager.unselect()
}
_isTableSelectedForFold=sel
} else if ((cn=="section")||(cn=="pageHeader")||(cn=="pageFooter")) { 
if (sel) {
behavior.resizableW=false
behavior.resizableT=(cn=="pageFooter") || bFirst
behavior.resizableB=(cn!="pageFooter")
behavior.movable=false
_feedbackManager.select(o, fr, null, behavior)
} else {
_feedbackManager.unselect()
}
} else if (isTableCell(elt)) { 
selectLayer(o,sel)
if (behavior.isSelectedInstance) {
_feedbackManager.select(o, fr, null, behavior)
} 
if (behavior.isSingle || behavior.isSelectedInstance) {
_currentSelTableIdref = isStructure?getBlockFromTableCell(elt).bid:getElementOrParentIdref(o.parentNode)
}
_isTableSelectedForFold=sel
} else if (cn == "reportCell") {
if (sel) {
_feedbackManager.select(o, fr, null, behavior)
} else {
_feedbackManager.unselect()
}
}
if (sel && (_foldPanelVisible == 1)) {
var isSelInstanceOrNoInstance = behavior.isSingle?true:(null != behavior.isSelectedInstance)?behavior.isSelectedInstance:true   
if (isSelInstanceOrNoInstance) {
self.frames['Report'].frames['FoldPanel'].changeFoldPanelForTables(o,_foldPanelVisible,_isTableSelectedForFold,bidTable,doc,elt);
}
}
}
function selectLayer(o,sel)
{
if (o==null) return
var s=o.style
if (sel) {
if (o.isBOSelected==false) {
o.isBOSelected=true
invertObj(o,s)
} else if (o.isBOSelected==null) {
o.oldBg=s.backgroundColor
o.isBOSelected=true
invertObj(o,s)
}
} else {
__oldBg = o.oldBg
if (__oldBg!=null)
{
s.backgroundColor=__oldBg
if (o.hasOldFG) {
s.color=o.oldFg
}
o.isBOSelected=false
}
}
}
function showLayer(o)
{
if (o==null) return
var s=o.style
if (o.isBOShown==false) {
o.isBOShown=true
invertObj(o,s)
} else if (o.isBOShown==null) {
o.oldBg=s.backgroundColor
o.isBOShown=true
invertObj(o,s)
}
}
function hideLayer(o)
{
if (o==null) return
if (o.isBOShown) {
var bid = o.getAttribute("bid"), objs = bidTable.get(bid)
for (var i=0; i < objs.length; i++) {
var obj = objs[i]
__oldBg = obj.oldBg
var s=obj.style
if (__oldBg!=null) {
s.backgroundColor=__oldBg
if (obj.hasOldFG) {
s.color=obj.oldFg
}
obj.isBOShown=false
}
}
}
}
__parentBG = null
__invBg = null
__oldBg = null
function invertObj(o,s,keepChilden)
{
var __invBg=o.oldInverted
if (__invBg==null)
{
__parentBG=o.parentBG=getCurrentBG(o)
__invBg=o.oldInverted=getInvertedColor(__parentBG)
}
if (keepChilden)
{
__parentBG=o.parentBG
var n=o.childNodes,count=n.length
for (var i=0;i<count;i++)
{
var w=n[i],st=w.style
if (w.tagName&&(w.tagName!="A")&&st)
{
var r=getComputedBG(w)
if ((r==null)||(r=="")||(r=="transparent")||(r=="rgba(0,0,0,0)")||(r=="rgba(0, 0, 0, 0)"))
{
w.oldBGP=st.backgroundColor
st.backgroundColor=__parentBG
}
}
}
}
if (__invBg)
s.backgroundColor=__invBg
else
{
s.backgroundColor="#000000"
o.oldFg=s.color
o.hasOldFG=true
s.color="#FFFFFF"
return true
}
}
function getCurrentBG(o)
{
if (o.tagName=="BODY")
return ("rgb(255,255,255)")
var r=getComputedBG(o)
if ((r==null)||(r=="")||(r=="transparent")||(r=="rgba(0,0,0,0)")||(r=="rgba(0, 0, 0, 0)"))
{
var p=o.parentNode
if (p)
r=getCurrentBG(p)
}
return r
}
function getInvertedColor(s)
{
_baseColor=s
if (s==null)
return null
s=s.toLowerCase()
var r=0,g=0,b=0
if (s.charAt(0)=="#")
{
r=parseInt(s.slice(1,3),16)
g=parseInt(s.slice(3,5),16)
b=parseInt(s.slice(5,7),16)
}
else if (s.indexOf("rgb")==0)
{
s=s.slice(s.indexOf("(")+1)
s=s.slice(0,s.indexOf(")"))
s=s.split(",")
r=parseInt(s[0])
g=parseInt(s[1])
b=parseInt(s[2])
}
else
return null
r=(r > 60) ? r-40 : r+60
g=(g > 60) ? g-40 : g+60
b=(b > 60) ? b-40 : b+60
return "rgb("+r+","+g+","+b+")"
}
function getComputedBG(o)
{
var f=_ie?"backgroundColor":"background-color"
if (_ie)
return o.currentStyle[f]
else
{
var df=o.ownerDocument.defaultView
if (df==null)
return null
var st=df.getComputedStyle(o,'')
if (st==null)
return null
return st.getPropertyValue(f)
}
}
function selectionChanged(fromClick)
{
eventManager.notify(_EVT_SELECTION_CHANGES, fromClick)
}
_lastX=0
_lastY=0
_lastLayer=null
_lastElt=null
_row=0
_baseColor=null
_containsChart=false
_bidBody = null
function getSelectedElts()
{
var elts = new Array
_containsChart = false
if (selectedBid != null) {
if (selectedBid.size() < 1) { 
var body = findByClassName(doc, "body") 
if (body) {
_bidBody = body.bid
selectedBid.set(_bidBody, 1)
}
} 
selectedBid.each(function(pair) {
var i = pair.key;
var elt=findByBID(doc,i)
if (elt) {
elts[elts.length]=elt
if (isGraphBlock(elt)) {
_containsChart = true
}
}
});
}
return elts;
}
function delayedSelectionChanged()
{
updateActionsFromSelectedElt(getSelectedElts())
}
function selectionChangeCB(evt,data)
{
if (!isWOMLoaded)
setTimeout("selectionChangeCB()",100)
else
setTimeout("delayedSelectionChanged()",1)
}
function getClickCoordinates(layer, pos)
{
var l=layer?layer:_lastLayer
if (l==null) return null
var x=getXinContainer(l,pos.x), yRow=getYRowInContainer(l,pos.y), y=yRow.y
return {x:x, y:y, row:yRow.row}
}
function getClickCoordinatesInContainer(l,e)
{
if(l==null) return null;
var pageContainer=getPageContainer();
var z=getZoom()/100;
var fr=getReportFrame();
if(_ie) 
e=fr.event;
var posX= ((- getPos(l,pageContainer).x*z - pageContainer.offsetLeft + getScrollX(fr) + eventGetX(e,fr)) / z)
var posY= ((- getPos(l,pageContainer).y*z - pageContainer.offsetTop  + getScrollY(fr) + eventGetY(e,fr)) / z)
var xybid = getClickCoordinates(l, {x:posX,y:posY}); 
return {x:xybid.x, y:xybid.y, row:xybid.row};
}
function hasSectionInChildNodes(o)
{
if (o==null)
{
return null
}
var bid=o.getAttribute?o.getAttribute("bid"):null
if ((bid!=null)&&(getClassNameByLayer(o)=="section"))
return bid
else
{
var c=o.childNodes,len=c.length
for (var i=0;i<len;i++)
{
bid=hasSectionInChildNodes(c[i])
if (bid!=null)
return bid
}
return null
}
}
function getYRowInContainer(o,yRel)
{
var rinfo = o.getAttribute?o.getAttribute("rinfo"):null
var rh = o.getAttribute?o.getAttribute("rh"):null
var yRet = yRel
var rowID =0
if (rinfo != null)
{
var bags = rinfo.split(';')
if (bags != null)
{
var start = parseInt(bags.length -1)
start -= ((bags[start] == "")?1:0)
for (var i=start; i >= 0; i--)
{
var pair = bags[i].split(':')
if ((pair != null) && (pair.length == 2)) 
{
rowID = parseInt(pair[0])
var rowOffset = parseInt(pair[1])
if ((rowID % 2) == 1) {
var sectNB = parseInt(rowID / 2) - 1, c=o.childNodes
isSect = (hasSectionInChildNodes(c[(sectNB > 0)?sectNB:0])!= null)
if (!isSect) continue
}
if (rowOffset <= yRel) {
if (rowOffset < 0) {
var yAdj = (rh != null)?(yRel-parseInt(rh)):yRel
yRet = yAdj-rowOffset
} else {
yRet = yRel-rowOffset
}
break
}
}
}
}
}
return {y:yRet,row:rowID}
}
function getXinContainer(o,xRel)
{
var cinfo = o.getAttribute?o.getAttribute("cinfo"):null
var xRet = xRel
if (cinfo != null)
{
var bags = cinfo.split(';')
if ((bags != null) && (bags.length > 0))
{
var pair = bags[0].split(':')
if ((pair != null) && (pair.length == 2))
{
xRet = xRel - parseInt(pair[1])
}
}
}
return xRet
}
function updateActionsFromSelectedElt(elts)
{
var isContainer=false, cn = ""
_singleSel = null
if (elts&&(elts.length==1)&&elts[0])
{
cn = elts[0].className
switch (cn) 
{
case "section":
case "pageHeader":
case "pageFooter":
case "body":
isContainer=true
break;
}
_singleSel = elts[0]
}
evalContextPalettes(elts)
if (isContainer)
{
var elt=elts[0]
setAlign(null)
setWrapText(null)
setFont(null)
if (("pageHeader" == cn) || ("pageFooter" == cn)) {
setBorders(elts)
} else {
setBorders(null)
}
setBgColor(elts); 
setFgColor(elts);
setBreak(null)
setManageBreaks(null,workbenchW.getAction("manageBreaks"))
setRemoveAllBreaks(null,workbenchW.getAction("removeAllBreaks"))
setCalc(null)
setFormula(null)
setMergeOrSplit(null)
setFormatNumber(null);
setFormatNumberCurrency(null);
setTurnTo(null);
setSetAsSection(null);
setChartPalette2(null)
var section = findParentByClassName(elts[0],"section")
var minHeight = workbenchW.getAction("sectionMinimumHeight")
if (minHeight!=null && section!=null)
{
if(typeof(section.minHeight) != 'undefined')
minHeight.setValue("" + metricToUserUnit(section.minHeight) + "")
}
setStartNewPageBreak((section!=null)?section:null)
}
else
{
setAlign(_containsChart?null:elts)
setWrapText(_containsChart?null:elts)
setFont(_containsChart?null:elts)
setBorders(_containsChart?null:elts)
setBgColor(elts)
setFgColor(_containsChart?null:elts)
setBreak(!isBreakable(elts)?null:elts)
setManageBreaks(!isBreakable(elts)?null:elts,workbenchW.getAction("manageBreaks"))
setRemoveAllBreaks(!isBreakable(elts)?null:elts,workbenchW.getAction("removeAllBreaks"))
setCalc(_containsChart?null:elts)
setFormula(_containsChart?null:elts)
setMergeOrSplit(_containsChart?null:elts)
setTableHeaderFooter(elts);
setFormatNumber(elts);
setFormatNumberCurrency(elts);
setTurnTo(elts)
setSetAsSection(elts);
setChartPalette2(_containsChart?elts:null)
setRepeat(_singleSel)
setStartNewPageBreak(_singleSel)
}
setSort(elts)
setElemLink(elts)
setInputCTRLMenu(elts)
setRanking(elts)
setLayering(elts,workbenchW.getAction("layeringBtn"))
setAlignment(elts,workbenchW.getAction("alignBtn"))
setFormat(elts)
setFormatPainter(elts)
setRemove(elts)
setPaste()
setCopyAndCut(elts)
setClearCell()
setFilter(elts) 
setBackgroundImage(_containsChart?null:elts)
setPageCap()
setAlerters(elts)
setHyperlinkMenu()
setPageFormat()
initHeaderFooterHeight()
initPageMargins()
initScaling()
initShowHideMenu()
setCustomGrouping()
setDrillMode()
}
function updateActionsFromSelectedRegions(regionObj)
{
var sections = regionObj.sections
var formatProps = sections[0].props 
for (var i=0; i < formatProps.length; i++) {
var prop = formatProps[i]
switch(prop.id) {
case "font":
setFont(prop)
setFgColor(prop.fgColor, true)
break
case "bgcolor":
setBgColor(prop.color, true)
break
}
}
}
function setPaste()
{
workbenchW.getAction("paste").setDisabled(!_paste)
}
function setCopyAndCut(elts)
{
var copy = workbenchW.getAction("copy")
var cut  = workbenchW.getAction("cut")
if ( (elts==null) || ((elts!=null)&&(elts.length==0)))
{
copy.setDisabled(true)
cut.setDisabled(true)
return
}
var len=elts.length
var disable=false
if (len==1)
{
var cn=elts[0].className
var cnParent= elts[0].parent.className
if ( (cn=='body') || (cn=='report') || (cn=='pageHeader') || (cn=='pageFooter'))
disable=true
if(selectedChartArea)
{
var ctxtMenu=_interactiveMenusSingleton.get("chartRegionMenu")
ctxtMenu.getItemByActionId("turnInto").setDisabled(false);
ctxtMenu.getItemByActionId("editReportElement").setDisabled(false);
ctxtMenu.getItemByActionId("sortChartSubMenu").show(false);
}
}
else
{
disable=true
}
cut.setDisabled(disable)
copy.setDisabled(disable)
}
function setRemove(elts)
{
var removeBut = workbenchW.getAction("removeReportElement")
if ( (elts==null) || ((elts!=null)&&(elts.length==0)))
{
removeBut.setDisabled(true)
return
}
var len=elts.length
var bRemBut=false
var bMenu=false
if (len==1)
{
var cn=elts[0].className
if ( (cn=='body') || (cn=='report') || (cn=='pageHeader') || (cn=='pageFooter'))
bRemBut=true
if (cn == "reportCell")
{
if (!isTableCell(elts[0]))
bMenu=false
else
{
}
}
}
else
{
for(var i=0; i<elts.length; i++)
{
if((elts[i].className == 'pageHeader') || (elts[i].className == 'pageFooter') || (elts[i].className == 'body'))
{
bRemBut=true
break
}
else  
bRemBut=false
}
}
removeBut.setDisabled(bRemBut)
}
function setFormula(elts)
{
var elt=(elts&&(elts.length==1)) ? elts[0] : null;
var res=(elt!=null) ?elt.formula : null;
var formulaText      = workbenchW.getAction("formulaText");
var variableCreation = workbenchW.getAction("variableCreation");
var formulaEditor    = workbenchW.getAction("formulaEditor");
var formulaOK        = workbenchW.getAction("formulaOK");
var formulaCancel    = workbenchW.getAction("formulaCancel");
if (res!=null)
{
formulaText.setValue(res!=null?res:"")
formulaText.setDisabled(false)
variableCreation.setDisabled(false)
formulaEditor.setDisabled(false)
formulaOK.setDisabled(false)
formulaCancel.setDisabled(false)
}
else
{
formulaText.setValue("")
formulaText.setDisabled(true)
formulaOK.setDisabled(true)
formulaCancel.setDisabled(true)
formulaEditor.setDisabled(true)
variableCreation.setDisabled(true)
}
}
function isMeasureKind(elt)
{
if(elt == null || typeof(elt.kind) == 'undefined') return false
else if(elt.kind =='MEASURE') return true
else if(elt.kind =='' && typeof(elt.nestedExpressionID) != 'undefined')
{
var calcObj = getCalculations(elt);
if(calcObj != "" )return calcObj.isMeasure
else return false
}
else return false
}
function setCalc(elts)
{
var canHaveCalc=getCalcStatus(elts)
var elt=null
var d=true,isMeasure=false, isSmartMsr=true
var canCalc=false,type=null 
if (canHaveCalc)
{
elt=elts[0]
var zone=elt.parent,block=zone.parent
d=(elt.dataType != 1)
 isMeasure= isMeasureKind(elt)
isSmartMsr=(elt.kind=="MEASURE" && elt.aggregateFct=="DELEGATED")
switch(block.blockType)
{
case "vTable":
type="v"
if(zone.zone == "h-1")
{
var calc = getCalculations(elt)
if(calc != "")
{
_vCalc    = calc.vcalc
d        = !calc.isMeasure
}
}
else
_vCalc=elt.vcalc
canCalc=true
break
case "hTable":
type="h"
if(zone.zone == "h-1")
{
var calc = getCalculations(elt)
if(calc != "")
{
_hCalc    = calc.hcalc
d        = !calc.isMeasure
}
}
else
_hCalc=elt.hcalc
canCalc=true
break
case "xTable":
{
type="x"
switch(zone.zone)
{
case "b,h-1": 
_vCalc=elt.vcalc
_hCalc=null
canCalc=true
break
case "h-1,b": 
_hCalc=elt.hcalc
_vCalc=null
canCalc=true
break
case "b,b": 
_hCalc=elt.hcalc
_vCalc=elt.vcalc
canCalc=true
break
}
}
break
}
}
setCalcFromString(_hCalc, _vCalc, type, d, isSmartMsr, isMeasure, canCalc)
}
function setCalcFromString(h, v, t, d, isSmartMsr, isMeasure, canCalc)
{
var vals=null, valsLen=null
var c=[0,0,0,0,0,0,0,0]
var dis=[true,true,true,true,true,true,true,true]
var calcSum     = workbenchW.getAction("calcSum")
var calcCount   = workbenchW.getAction("calcCount")
var calcAvg     = workbenchW.getAction("calcAvg")
var calcMin     = workbenchW.getAction("calcMin")
var calcMax     = workbenchW.getAction("calcMax")
var calcPercent = workbenchW.getAction("calcPercent")
var calcTotal   = workbenchW.getAction("calcTotal")
var addSumMenu  = workbenchW.getAction("addSumMenu")
switch (t)
{
case "h":
if (h)
{
vals=h.split(",")
valsLen = vals.length
        for (var i = 0; i < valsLen; i++)
c[parseInt(vals[i])]=1
}
break
case "v":
if (v)
{
vals=v.split(",")
valsLen = vals.length
        for (var i = 0; i < valsLen; i++)
c[parseInt(vals[i])]=1
}
break
case "x":
var hVals = new Array
var vVals = new Array
if (h != null && h.length > 0)
hVals = h.split(",")
if (v != null && v.length > 0)
vVals = v.split(",")
hValsLen = hVals.length 
vValsLen = vVals.length 
        for (var i = 0; i < hValsLen; i++)
c[parseInt(hVals[i])]=1
        for (var i = 0; i < vValsLen; i++)
c[parseInt(vVals[i])]=1
break
}
if (canCalc)
{
dis[0] = d
dis[1] = false
dis[2] = d
dis[3] = false
dis[4] = false
dis[5] = d
dis[6] = d
dis[7] = d
}
calcSum.setDisabled(dis[0])
calcCount.setDisabled(dis[1])
calcAvg.setDisabled(dis[2])
calcMin.setDisabled(dis[3])
calcMax.setDisabled(dis[4])
calcPercent.setDisabled(dis[5])
calcTotal.setDisabled(dis[6])
addSumMenu.setDisabled(dis[7])
calcSum.check(!dis[0]   && ((c[0]== 1)? true:false))
calcCount.check(!dis[1] && ((c[1]== 1)? true:false))
calcAvg.check(!dis[2] && ((c[2]== 1)? true:false))
calcMin.check(!dis[3] && ((c[3]== 1)? true:false))
calcMax.check(!dis[4] && ((c[4]== 1)? true:false))
calcPercent.check(!dis[5] && ((c[5]== 1)? true:false))
calcTotal.check(!dis[6]   && ((c[6]== 1)? true:false))
addSumMenu.updateRadioBtn(calcSum.isChecked()||calcTotal.isChecked(),null,dis[7])
addSumMenu.check(calcSum.isChecked()||calcTotal.isChecked())
}
function getCalcStatus(elts)
{
if ( (elts==null) || (elts.length!=1) )
return false
var e=false
if (elts.length==1)
{
var elt=elts[0]             
var ax=getTableCellZone(elt,true)
if (ax!=-1)
e=true
if ((typeof(elt.vcalc) == 'undefined' && typeof(elt.nestedExpressionID) == 'undefined' && elt.parent.parent.blockType == 'vTable')||
    (typeof(elt.hcalc) == 'undefined' && typeof(elt.nestedExpressionID) == 'undefined' && elt.parent.parent.blockType == 'hTable'))
return false
}
return e
}
function getCalculations(elt)
{
if (elt == null || elt.nestedExpressionID == undefined) return ""
var pattern=new RegExp("^f|h")
if(pattern.test(elt.parent.zone))
{
var wobs = elt.parent.parent.children
var blockType = elt.parent.parent.blockType
if (wobs != null && wobs.length > 0)
{
for(var i=0; i<wobs.length; i++)
{
var wob = wobs[i].children
for (var j=0; j<wob.length; j++)
{
if (wob[j].id == elt.nestedExpressionID && blockType == "vTable")
return {vcalc:wob[j].vcalc, isMeasure:(wob[j].kind == "MEASURE")}  
else if (wob[j].id == elt.nestedExpressionID && blockType == "hTable")
return {hcalc:wob[j].hcalc, isMeasure:(wob[j].kind == "MEASURE")}
}
}
}
}
return ""
}
function hasFullSum(types)
{
if (types == null) return false
var SUM = 0
var DEFAULT = 6
var hasSum = false
var hasDefault = false
for(var i=0; i<types.length; i++)
{
if ((types[i] != "") && (types[i] == SUM))
hasSum = true
if ((types[i] != "") && (types[i] == DEFAULT))
hasDefault = true
}
return (hasSum && hasDefault)
}
function getBIDtoApplyCalc(elt)
{
if(elt == null || !isTableCell(elt)) return ""
if(elt.parent.zone == "h-1")
{
var wobs = elt.parent.parent.children
if (wobs != null && wobs.length > 0)
{
for(var i=0; i<wobs.length; i++)
{
var wob = wobs[i].children
for (var j=0; j<wob.length; j++)
{
if (wob[j].id == elt.nestedExpressionID)
return wob[j].bid   
}
}
}
}
else if(elt.parent.zone == "b" || elt.parent.zone == "b,b" || elt.parent.zone == "b,h-1" || elt.parent.zone == "h-1,b")
return elt.bid
return ""
} 
function getTableCellFormulaID(elt)
{
if(elt == null || !isTableCell(elt)) return null
if (elt.id && (elt.parent.zone == "b" || elt.parent.zone == "b,b" || elt.parent.zone == "b,h-1" || elt.parent.zone == "h-1,b")) return elt
else return null
}
function setFgColor(elts, isJson)
{
var fgCombo = workbenchW.getAction("fontColor");
if (elts == null) {
fgCombo.setDisabled(true);
fgCombo.setColor(null);
return
}
var res=getAttFromElts(["fgColor"],elts)
fgCombo.hasChanged=false
if (isJson) {
fgCombo.setColor(elts)
fgCombo.setDisabled(false)
} else if (res.defined)
{
fgCombo.setDisabled(res.ret==null);
fgCombo.setColor(res.ret);
}
else
{
fgCombo.setDisabled(false)
fgCombo.setColor(null);
}
}
function setBgColor(elts, isJson)
{
var bgCombo = workbenchW.getAction("bgColor");
var eltLen = elts.length 
if ((elts == null) || (eltLen == 0)) {
bgCombo.setDisabled(true)
} else if (isJson) {
bgCombo.setColor(elts)
bgCombo.setDisabled(false)
} else {
var res=getAttFromElts(["bgColor"],elts)
bgCombo.hasChanged=false
if (res.defined)
{
bgCombo.setDisabled(false);
if (null==res.ret)
{
if (_currColorAsmChartZoneInfo!=null)
{
var tab =  _currColorAsmChartZoneInfo.c
var regSeparator = new RegExp('[\[;]+','g');
var rgb=tab?tab.split(regSeparator):null
var color_tmp=rgb[1]+","+rgb[2]+","+rgb[3]
bgCombo.setColor(color_tmp);
}
else
bgCombo.setColor(res.ret);
}
else
bgCombo.setColor(res.ret);
} else {
bgCombo.setDisabled(false)
bgCombo.setColor(null);
}
if (_containsChart) 
{ 
if( null == _currColorAsmChartZoneInfo)
{
if ((null != _areaDefid) && (_areaDefid.indexOf("title") < 0) && (_areaDefid.indexOf("legend") < 0)) {
bgCombo.setDisabled(true)
}
}
else 
{
bgCombo.setDisabled(false)
}
}
}
}
function setBackgroundImage(elts)
{
var bgimgBtn = workbenchW.getAction("bgimgBtn");
if ((elts == null)||(elts.length==0))
{
bgimgBtn.setDisabled(true)
return
}
bgimgBtn.setDisabled(false)
}
function setChartPalette2(elts){
var dualPaletteMenu = workbenchW.getAction("dualPaletteMenu")
if (null == elts) return
if (elts.length > 1) return
var type = elts[0].blockType, ids = type.split("/") 
var isDualChart = ids[1].startsWith("dual_");
var bDisp = (isDualChart && _CurrentBlock && _CurrentBlock.hasDualPalettes())
dualPaletteMenu.setDisplay( bDisp)
}
function setBorders(elts)
{
var borderColor = workbenchW.getAction("borderColor");
var bordersBtn = workbenchW.getAction("bordersBtn");
if ((elts == null)||(elts.length==0))
{
borderColor.setDisabled(true)
bordersBtn.setDisabled(true)
return
}
borderColor.hasChanged=false
borderColor.setDisabled(false)
var res=get2AttsFromElts(["border","color"],["borders","topColor"],elts);
var retTopColor = (res.defined)? res.ret:null;
res=get2AttsFromElts(["border","color"],["borders","bottomColor"],elts);
var retBottomColor = (res.defined)? res.ret:null;
res=get2AttsFromElts(["border","color"],["borders","leftColor"],elts);
var retLeftColor = (res.defined)? res.ret:null;
res=get2AttsFromElts(["border","color"],["borders","rightColor"],elts)
var retRightColor = (res.defined)? res.ret:null
if ((retTopColor==retBottomColor) && (retBottomColor==retLeftColor) && (retLeftColor==retRightColor))
borderColor.setColor(retTopColor);
else
borderColor.setColor(null);
var cn=elts[0].className
if ((cn=='body') || (cn=='report') || (cn=='section')) {
bordersBtn.setDisabled(true)
}
bordersBtn.setDisabled(false)
}
function setAlign(elt)
{
var w = workbenchW, userData=w.getUserData();
var hAlign = userData.hAlign;
var vAlign = userData.hAlign;
if (userData.hAlign == null)
{
hAlign = [w.getAction("leftAlign"), w.getAction("centerAlign"), w.getAction("rightAlign")];
vAlign = [w.getAction("topAlign"), w.getAction("middleAlign"), w.getAction("bottomAlign")];
}
var res=getAttFromElts(["align","h"],elt)
if (res.defined)
{
for (var i=0;i<3;i++)
{
var b=hAlign[i]
b.setDisabled(res.ret==null)
b.check(res.ret==(i))
}
}
else
{
for (var i=0;i<3;i++)
{
var b=hAlign[i]
b.setDisabled(false)
b.check(false)
}
}
var res=getAttFromElts(["align","v"],elt)
if (res.defined)
{
for (var i=0;i<3;i++)
{
var b=vAlign[i]
b.setDisabled(res.ret==null)
b.check(res.ret==(i))
}
}
else
{
for (var i=0;i<3;i++)
{
var b=vAlign[i]
b.setDisabled(false)
b.check(false)
}
}
}
function setWrapText(elt)
{
var wrapText = workbenchW.getAction("wrapText");
var res=getAttFromElts(["align","wrap"],elt)
if (res.defined)
{
wrapText.setDisabled(res.ret==null)
wrapText.check(res.ret==1)
}
else
{
wrapText.setDisabled(false)
wrapText.check(false)
}
}
function setFont(elt)
{
var res=getAttFromElts(["font","name"],elt)
var fontName = workbenchW.getAction("fontName");
if (res.defined)
{
fontName.setDisabled(res.ret==null)
fontName.setUndefined(false)
if (res.ret!=null)
fontName.valueSelect(res.ret?res.ret:"")
}
else
{
fontName.setDisabled(false)
fontName.setUndefined(true)
}
res=getAttFromElts(["font","size"],elt)
var fontSize = workbenchW.getAction("fontSize");
var disableDecreaseFont = false; 
var disableIncreaseFont = false; 
if (res.defined)
{
fontSize.setDisabled(res.ret==null)
fontSize.setUndefined(false)
fontSize.valueSelect(res.ret?(""+res.ret):"")
if(res.ret == 1 || res.ret==null) 
disableDecreaseFont = true; 
if(res.ret >= 1638 || res.ret==null) 
disableIncreaseFont = true;
}
else
{
fontSize.setDisabled(false)
fontSize.setUndefined(true)
disableIncreaseFont = true;
disableDecreaseFont = true;
}
var ifont = workbenchW.getAction("increaseFontSize");
var dfont = workbenchW.getAction("decreaseFontSize");
ifont.setDisabled(disableIncreaseFont);
dfont.setDisabled(disableDecreaseFont);
res=getAttFromElts(["font","bold"],elt)
var bold = workbenchW.getAction("bold");
if (res.defined)
{
bold.setDisabled(res.ret==null)
bold.check(res.ret==1)
}
else
{
bold.setDisabled(false)
bold.check(false)
}
res=getAttFromElts(["font","italic"],elt)
var italic = workbenchW.getAction("italic");
if (res.defined)
{
italic.setDisabled(res.ret==null)
italic.check(res.ret==1)
}
else
{
italic.setDisabled(false)
italic.check(false)
}
res=getAttFromElts(["font","under"],elt)
var under = workbenchW.getAction("under");
if (res.defined)
{
under.setDisabled(res.ret==null)
under.check(res.ret==1)
}
else
{
under.setDisabled(false)
under.check(false)
}
res=getAttFromElts(["font","strike"],elt)
var under = workbenchW.getAction("strikethrough");
if (res.defined)
{
under.setDisabled(res.ret==null)
under.check(res.ret==1)
}
else
{
under.setDisabled(false)
under.check(false)
}
}
function getMergeOrSplitInfo(elts)
{
    var ret=new Object()
ret.canMergeOrSplit=false
ret.canSplit=false
if (elts==null)
{
return ret;
}
var canMerge=false
var canSplit=false
var canMergeOrSplit=false
var len=elts.length
if ((len==1)&&(elts[0]))
{
var rowSpan=elts[0].rowSpan
var colSpan=elts[0].colSpan
canMerge=false
canSplit=( (rowSpan>1) || (colSpan>1) )
}
else if (len>1)
{
canSplit=false
var ref=elts[0]
var refZone=ref.parent,refBlock=refZone.parent
for (var i=0;i<len;i++)
{
var e=elts[i]
var eZ=e.parent
var eB=eZ.parent
var cn=e.className
if (!isTableCell(e))
{
canMerge=false
break
}
if ( ( eZ != refZone ) || ( eB != refBlock ) )
{
canMerge = false
break
}
else
{
canMerge=true
continue
}
}
canMerge=canMerge && isContiguous(elts)
}
canMergeOrSplit=canMerge||canSplit
ret.canMergeOrSplit=canMergeOrSplit
ret.canSplit=canSplit
return ret
}
function setRepeat(elt) {
if (elt!=null)
{
var isHTable = false, isForm = false
if (isTableCell(elt)) {
elt = elt.parent.parent
}
isHTable = (elt.blockType == "hTable")
if (elt && (null != elt.repeatV)) {
var repeat = elt.repeatV
workbenchW.getAction("repeatOnEveryPage").check(repeat); 
workbenchW.getAction("repeatChartBtn").check(repeat);
workbenchW.getAction("repeatFreeCellBtn").check(repeat);
if (isHTable) {
workbenchW.getAction("repeatHHeaderOnPages").check(elt.repeatHHeader)
workbenchW.getAction("repeatHFooterOnPages").check(elt.repeatHFooter)
workbenchW.getAction("repeatHHeaderOnPages").setDisabled(!elt.headerVisible)
workbenchW.getAction("repeatHFooterOnPages").setDisabled(!elt.footerVisible)
} else {
workbenchW.getAction("repeatVHeaderOnPages").check(elt.repeatVHeader)
workbenchW.getAction("repeatVFooterOnPages").check(elt.repeatVFooter)
isForm = (elt.blockType == "form")
if (isForm) {
workbenchW.getAction("repeatVHeaderOnPages").setDisabled(isForm)
workbenchW.getAction("repeatVFooterOnPages").setDisabled(isForm)
} else {
workbenchW.getAction("repeatVHeaderOnPages").setDisabled(!elt.headerVisible)
workbenchW.getAction("repeatVFooterOnPages").setDisabled(!elt.footerVisible)
}
}
workbenchW.getAction("repeatVHeaderOnPages").setDisplay(!isHTable)
workbenchW.getAction("repeatVFooterOnPages").setDisplay(!isHTable)
workbenchW.getAction("repeatHHeaderOnPages").setDisplay(isHTable)
workbenchW.getAction("repeatHFooterOnPages").setDisplay(isHTable)
}
}
}
function setStartNewPageBreak(elt) {
var pageBreakMenu = workbenchW.getAction("pageBreakMenu")
var actionStartOnNewPage = workbenchW.getAction("startOnNewPage")
var actionAvoidPageBreaks = workbenchW.getAction("avoidPageBreaks")
if (elt && (null != elt.avoidPageBreak)) {
pageBreakMenu.setDisabled(false)
actionStartOnNewPage.setDisabled(false)
actionAvoidPageBreaks.setDisabled(false)
actionStartOnNewPage.check(elt.startOnNewPage);
actionAvoidPageBreaks.check(elt.avoidPageBreak);
} else {
pageBreakMenu.setDisabled(true)
actionStartOnNewPage.setDisabled(true)
actionAvoidPageBreaks.setDisabled(true)
}
}
function setMergeOrSplit(elts)
{
var mergeOrSplit = workbenchW.getAction("mergeOrSplit");
var mergeInfo=getMergeOrSplitInfo(elts);
mergeOrSplit.check(mergeInfo.canSplit);
mergeOrSplit.setDisabled(!mergeInfo.canMergeOrSplit);
}
function setFormatPainter(elts)
{
var formatPainter = workbenchW.getAction("formatPainter");
if (((_singleSel != null) || (_tableBid != null) || (_formatPainterBid != null)))
{
formatPainter.setDisabled(false)
}
else
{
formatPainter.setDisabled(true)
escapeFormatPainter()
}
}
function setRanking(elts)
{
initRankingMenu();
}
function setAlerters(elts)
{
var alertIconMenu = workbenchW.getAction("appliedFormattingRulesMenu");
var alertIconSubMenu = workbenchW.getAction("appliedFormattingRulesSubMenu");
alertIconMenu.setDisabled(true)
alertIconSubMenu.setDisabled(true)
if (elts) {
var len=elts.length,elt=null
for (var i=0;i<len;i++)
{
elt=elts[i]
if ((elt.className == "reportCell") || (isTableCell(elt))  ) 
{
alertIconMenu.setDisabled(false)
alertIconSubMenu.setDisabled(false)
}
}
if (len > 0) {
initAlertMenu();
}
}
}
function initAlertMenu()
{
var elts=getSelectedElts(), multiSel = (elts.length > 1)
var elt = elts[0]
var alertIconMenu  = workbenchW.getAction("appliedFormattingRulesMenu")
var alertIconSubMenu = workbenchW.getAction("appliedFormattingRulesSubMenu");
if (alertIconMenu.items != null && alertIconMenu.items.length > 0)
{
menu = alertIconMenu.items[0].getMenu();
var nbAlerts = (menu.menuItemsCount())-2; 
for (var n=0; n<nbAlerts; n++)
menu.remove(0);
    var currentElt = elt;
if (currentElt && currentElt.className=="reportCell")
{
   while ((currentElt.className != "doc")) {
   currentElt = currentElt.parent
   }
   if (!currentElt.docAlerters || multiSel) {
alertIconMenu.setDisabled(true)
alertIconSubMenu.setDisabled(true)
   return;
}
   for(var i=currentElt.docAlerters.length-1; i>=0; i--)
{ 
   var id = currentElt.docAlerters[i].id;
   if (!isAlertEnabled(elt, id))
   {
   check1 = menu.insertCheck(0, id, currentElt.docAlerters[i].name,alertCheckCB);
   check1.check(false);   
   }
}
}
if (elt.alerts)
{
for(var i=elt.alerts.length-1; i>=0; i--)
{ 
   var id = elt.alerts[i].id;
   check2 = menu.insertCheck(0, id, getAlertName(currentElt, id),alertCheckCB);
   check2.check(true);
}
}
}
}
function getAlertName(currentElt,id)
{
for(var i=0; i<currentElt.docAlerters.length; i++)
{ 
   if (currentElt.docAlerters[i].id == id)
   {
   return currentElt.docAlerters[i].name;
   }
}
return "";
}
function alertCheckCB()
{
var iAction = 0;
    if (this.checked)
    iAction = 1
var p = urlParams(true)
var url  = "processAlerters" + _appExt + p +"&iAction="+iAction+"&alrtIDS="+this.id;
if (p != "") 
frameNav("Report", url, true);
}
function isAlertEnabled(elt, id)
{
if ( elt.alerts )
{
for(var i=0; i<elt.alerts.length; i++)
{ 
if (elt.alerts[i].id == id)
return true;
}
}
return false;
}
function escapeFormatPainter()
{
var formatPainter = workbenchW.getAction("formatPainter");
formatPainter.check(false)
if (_formatPainterBid != null)
newTooltipWidget().show(false)
_formatPainterBid = null
}
function formatPainterDblClickCB()
{
if (_ie)
{
var formatPainter = this;
_formatPainterBid = formatPainter.bid;
_reportIdxSrc = (_formatPainterBid != null)?DS.iReportID:null;
formatPainter.check(true);
formatPainter.bid = null;
_isSingleActionFormatPainter = false;
}
else if (_formatPainterBid!=null)
_isSingleActionFormatPainter = false
}
function formatPainterStopIfSingleAction(e)
{
if (_isSingleActionFormatPainter&&(_formatPainterBid!=null))
{
_formatPainterBid = null
_reportIdxSrc = null
workbenchW.getAction("formatPainter").check(false)
}
}
function isContiguous(elts)
{
var ret=getExtCells(elts);
if (ret.rb==ret.tl) return false;
var rowEnd=(ret.rb.rowSpan!=1)?(ret.rb.row+ret.rb.rowSpan-1):ret.rb.row;
var colEnd=(ret.rb.colSpan!=1)?(ret.rb.col+ret.rb.colSpan-1):ret.rb.col;
var nSelElts=elts.length;
var nbrElts=(rowEnd - ret.tl.row +1)*(colEnd - ret.tl.col +1);
    var eltsLen = elts.length
    for (var i = 0; i < eltsLen; i++)
    {
var e = elts[i]
var minRow=e.row,maxRow=(e.rowSpan!=1)?(e.row+e.rowSpan-1):e.row
var minCol=e.col,maxCol=(e.colSpan!=1)?(e.col+e.colSpan-1):e.col
var nOccupiedCells=(maxRow-minRow+1)*(maxCol-minCol+1);
nbrElts=nbrElts-nOccupiedCells+1;
}
if (nSelElts!=nbrElts) return false;
return isInSelection(elts,ret.tl.row, rowEnd, ret.tl.col, colEnd)?true:false;
}
function getExtCells(elts)
{
if (elts.length==0)
return null
var ret = new Object
ret.tl = elts[0]
ret.rb = elts[0]
for (var i=1; i<elts.length; i++)
{
var e=elts[i];
if ((e.row <= ret.tl.row) && (e.col <= ret.tl.col))
ret.tl=e;
else 
{
var emaxRow=(e.rowSpan!=1)?(e.row+e.rowSpan-1):e.row;
var emaxCol=(e.colSpan!=1)?(e.col+e.colSpan-1):e.col;
var rbmaxRow=(ret.rb.rowSpan!=1)?(ret.rb.row+ret.rb.rowSpan-1):ret.rb.row;
var rbmaxCol=(ret.rb.colSpan!=1)?(ret.rb.col+ret.rb.colSpan-1):ret.rb.col;
if ((emaxRow >= rbmaxRow) && (emaxCol >= rbmaxCol))
ret.rb=e;
}
}
return ret;
}
function isInSelection(elts, rowBegin, rowEnd, colBegin, colEnd)
{
    var eltsLen = elts.length
    for (var i = 0; i < eltsLen; i++)
{
var e = elts[i]
var minRow=e.row,maxRow=(e.rowSpan!=1)?(e.row+e.rowSpan-1):e.row
var minCol=e.col,maxCol=(e.colSpan!=1)?(e.col+e.colSpan-1):e.col
if ((minRow >= rowBegin && maxRow<=rowEnd) && (minCol>=colBegin && maxCol<=colEnd))
{}
else
return false;
}
return true;
}
function setTurnTo(elts)
{
var turnTo = workbenchW.getAction("turntoMenu");
if(elts == null) 
{
turnTo.setDisabled(true);
return;
}
var dis = true;
var mono=(elts.length==1);
if(mono)
{
if(elts[0].className=="block")
dis=false;
if(isTableCell(elts[0])) 
dis=false;
}
else
dis=!isMultiTableCellInSameTable(elts)
turnTo.setDisabled(dis);
}
function setSetAsSection(elts)
{
var setAsSection = workbenchW.getAction("setAsSection");
if(elts == null) 
{
setAsSection.setDisabled(true);
return;
}
var dis = true;
var mono=(elts.length==1);
if(mono)
{
if(isTableCell(elts[0]) && elts[0].kind!="" && elts[0].kind!="MEASURE" )
dis=false;
}
setAsSection.setDisabled(dis);
}
function mouseOut()
{
if (_isDDEnabled || _formatPainterBid != null) {
newTooltipWidget().show(false)
}
}
_isDDEnabled=false
_DDIconUrl=null
_DDIdx=0
_DDTxt=""
_DDType=null
_DDReType=null
_DDAction=null
_DDActionAdd=1
_DDActionTurnTo=2
function globmmove(e)
{
var fr=getParentWindow(this)
if (fr==null)
return true
if (_ie)
e=fr.event
if (e && eventIsLeftButton(e,fr))
{
if (_feedbackManager.isMoving()) 
{
if (eventGetY(e,fr) > 0) {
_feedbackManager.showMoveZone(true, _feedbackManager.currentMoveLayer, e, fr)
if (eventIsCtrl(e)) {
setReportTooltipOffset(fr); 
newTooltipWidget().show(true, null, _img+"miniPlus.png", 7, 7, 0, 0, false, e)
}
} 
}
else 
{
var o =_feedbackManager.getResizeObj()
if (o)
{
if (o.mouseMoved==false)
{
var deltaX=0, deltaY=0, z=getZoom()/100
if ((o.downZone==_cellRight) || (o.downZone==_cellLeft)) {
deltaX=Math.abs(absxpos(e,z,fr)-o.resizeZoneX)
} else if ((o.downZone==_cellTop) || (o.downZone==_cellBottom)) {
deltaY=Math.abs(absypos(e,z,fr)-o.resizeZoneY)
} else if ((o.downZone==_cellTopLeft) || (o.downZone==_cellTopRight) || (o.downZone==_cellBottomLeft) || (o.downZone==_cellBottomRight)) {
deltaX=Math.abs(absxpos(e,z,fr)-o.resizeZoneX)
deltaY=Math.abs(absypos(e,z,fr)-o.resizeZoneY)
}
if ((deltaX > 2) || (deltaY > 2)){
o.mouseMoved=true
}
}
if (eventGetY(e,fr) > 0) {
drawResize(e)
}
}
}
return false
}
return true
}
function globmup(e)
{
var fr = getParentWindow(this)
if (fr == null) return
if (_ie) {
e=fr.event
}
if (e && eventIsLeftButton(e,fr))
{
if (_feedbackManager.isMoving())
{
_feedbackManager.bIsMoving=false
_feedbackManager.showMoveZone(false)
var y = eventGetY(e,fr)
if (y > 0) {
moveLineMup(e, this)
}
}
else
{
var o= _feedbackManager.getResizeObj()
_feedbackManager.hideFeedbackObjects()
triggerResize(o,e)
_feedbackManager.setResizeObj(null)
}
return _webKit ? true : false
}
else
_feedbackManager.setResizeObj(null)
return true
}
function leftPaneMmove(e)
{
var fr=getParentWindow(this)
if (fr==null)
return true
if (_ie)
e=fr.event
if (e && eventIsLeftButton(e,fr))
{
if ((_feedbackManager.isMoving() || _feedbackManager.isResizing()) && (!(WS._showLeftPane==_paneState.normal && WS._leftPaneSel=="resultObj")))
{
this.style.cursor = "no-drop"
} else {
this.style.cursor = "default"
}
return false
}
return true
}
function leftPaneMup(e)
{
var fr = getParentWindow(this)
if (fr == null) return
if (_ie) {
e=fr.event
}
if (e)
{
this.style.cursor = "default"
if (_feedbackManager.isMoving())
{
if (WS._showLeftPane==_paneState.normal && WS._leftPaneSel=="resultObj") {
var elts=getSelectedElts();
if (elts.length > 0) {
removeReportElement(elts, true);
}
 } else {
 _feedbackManager.hideFeedbackObjects()
_feedbackManager.bIsMoving=false
_feedbackManager.showMoveZone(false)
}
}
else
{
_feedbackManager.hideFeedbackObjects()
_feedbackManager.setResizeObj(null)
_feedbackManager.bIsResizing=false
}
return _webKit ? true : false
}
return true
}
function moveLineMup(e, o) {
traceLog("moveLineMup")
var fr = _feedbackManager.getFr()
if (fr == null) return
e=_ie?fr.event:e
var d = fr.document
var className=getClassNameByLayer(o)
var x = eventGetX(e,fr)+1, y = eventGetY(e,fr)+1, o = d.elementFromPoint(x, y)
var className=getClassNameByLayer(o)
while (!isContainer(className)) {
o = o.parentNode
if (o==null) return
className=getClassNameByLayer(o)
}
var targetBID = getElementOrParentBid(o)
if (_ie) {
try{
o.releaseCapture()
} catch(e) {}
}
var pscale = getPScale(o); 
var bid = _feedbackManager.startMoveLayer.getAttribute("bid")
var elt = findByBID(doc, bid)
if ((o.resizeObj == null) && (_feedbackManager.getCurrentMoveLayer() == null)) {
e.cancelBubble=true
}
var pos = _feedbackManager.getDelta(_feedbackManager.getMousePos(e), _feedbackManager.deltaHandle) 
var z=_feedbackManager.getZoom()
var pageContainer = getPageContainer()
var pos2=
{
x:((- getPos(o,pageContainer).x*z - pageContainer.offsetLeft + pos.x) / z),
y:((- getPos(o,pageContainer).y*z - pageContainer.offsetTop  + pos.y) / z)
}
var xybid = getClickCoordinates(o, pos2) 
var relativePos = _feedbackManager.getDelta(_feedbackManager.getMousePos(e), _feedbackManager.getStartPos())
var adx = Math.abs(parseInt(relativePos.x)), ady = Math.abs(parseInt(relativePos.y))
traceLog("adx:" + adx + ", ady:" + ady)
if ((adx-_deltaFoldPanelWidth <= 2) && (ady-_deltaFoldPanelHeight <= 2)) {
return 
}
_feedbackManager.bIsMoving = false
relativePos={x:relativePos.x/z, y:relativePos.y/z}
var dpi = _feedbackManager.getDpi()
var dX = pixelToMetrics(relativePos.x, dpi)
var dY = pixelToMetrics(relativePos.y, dpi)
var url = _root + "processMoveElement"+_appExt
url += urlParamsNoBID() + "&sBid=" + escape(bid) + "&sTargetBid="+escape(targetBID) 
url += "&sX=" + pixelToMetrics(Math.max(0, xybid.x), dpi) + "&sY=" + pixelToMetrics(Math.max(0,xybid.y), dpi) 
url += "&sRow=" + xybid.row + "&sStartRow=" + _MoveStartRow 
url += "&sDx=" + dX + "&sDy=" + dY
url += "&pScale="+pscale;
if (isEnableUserRight(WS._usrInsertDuplicate))
url += "&sDup=" + (_mac?(e.metaKey) : (e.ctrlKey))
_triggerMoveURL = url;
var attach = elt.attach
if (attach) {
if (attach.toH) {
var posX = elt.x 
if ((posX + relativePos.x) < 0) {
_triggerMoveURL+="&bKeepAttach=false";
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?", "Confirm resize", _promptDlgWarning, triggerMoveYesCB, null)
return
}
}
if (attach.toV) {
var posY = elt.y 
if ((posY + relativePos.y) < 0) {
_triggerMoveURL+="&bKeepAttach=false";
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?", "Confirm resize", _promptDlgWarning, triggerMoveYesCB, null)
return
}
}
_triggerMoveURL+="&bKeepAttach=true";
}
e.cancelBubble=true
_feedbackManager.currentFeedbackLayer=null 
clearMoutTimer()
wt()
setReportUrl(_triggerMoveURL,true,null,true) 
}
function restoreSelection()
{
var old_curIdRef=_curIdRef
var old_curIdRefBid=_curIdRefBid
var fr=getReportFrame()
var canRestoreIdRef = false;
if (selectedBid != null) {
selectedBid.each(function(pair) {
var bid = pair.key;
var obj=bidTable.get(bid)
if (obj!=null)
{
var elt = findByBID(doc,bid)
if (isTableCell(elt)) {
restoreInstanceSelection(fr, obj, true, bid, elt)
} else {
selectObj(fr, obj, true, bid)
}
if (i==old_curIdRefBid)
{
restoreIdRef(bid, obj, old_curIdRef)
canRestoreIdRef = true;
}
}
else
{
if (findByBID(doc, bid) == null)
selectedBid.unset(bid);
}
});
}
if(!canRestoreIdRef) 
setFollowObjectInfo(null);
selectionChanged(false) 
}
function restoreIdRef(bid,arrLayers,old_curIdRef)
{
if (arrLayers==null)
return
var count=arrLayers.length,elt=findByBID(doc,bid)
if (elt)
{
for (var i=0;i<count;i++)
{
var layer=arrLayers[i]
if (layer.getAttribute("idref")==old_curIdRef)
{
setFollowObjectInfo(layer);
return
}
}
if (count>0)
{
setFollowObjectInfo(arrLayers[0]);
}
}
}
_editInPlace="_BOFormulaEditInPlace"
_editTabWidget="_TabWidgetEditInPlace"
_submitEditInPlace=true
_paramsEditInPlace=null
function viewDblClickCB(e)
{
escapeFormatPainter()
var fr=getReportFrame()
if (fr==null) return
if (_ie)
e = fr.event 
var d=fr.document
var o=this
if (o!=null)
{
var bid=o.getAttribute("bid"),elt=findByBID(window.doc,bid),cn=elt?elt.className:""
cn = isTableCell(elt)?"tableCell":cn
var zone = null
if (cn=="tableCell") {
zone=getCellZone(o,e,d)
} else if (cn=="reportCell") {
var idref = getElementOrParentIdref(o)  
o = getLayerByIdRef(idref)
zone = o.downZone?o.downZone:o.zone  
}
if (zone)
{
if (zone==_cellRight)
{
var p=urlParams(true)
if (p!="")
{
wt()
setReportUrl("processResize"+_appExt+p+"&iW=0&sElemZoneW=right",true)
}
}
else if (zone==_cellLeft)
{
var p=urlParams(true)
if (p!="")
{
wt()
setReportUrl("processResize"+_appExt+p+"&iW=0&sElemZoneW=left",true)
}
}
else if (zone==_cellBottom)
{
var p=urlParams(true)
if (p!="")
{
wt()
setReportUrl("processResize"+_appExt+p+"&iH=0&sElemZoneH=bottom",true)
}
}
else if (zone==_cellTop)
{
var p=urlParams(true)
if (p!="")
{
wt()
setReportUrl("processResize"+_appExt+p+"&iH=0&sElemZoneH=top",true)
}
}
else if (zone==_cellContent)
{
var size=(elt.font?elt.font.size:9)
if (size<=0)
size=9
fEdit_show(o,size,elt.fcell?elt.fcell.formula:elt.formula,bid)
}
e.cancelBubble=true
return false
}
}
return true
}
_fEditIsShown=false
function fEdit_show(o,size,formula,bid)
{
if(isEnableUserRight(WS._usrUseFormula))
{
var fr = getReportFrame()
if (fr == null) return
var doc=fr.document
var fEdit=doc.getElementById(_editInPlace)
if (fEdit==null)
{
append(doc.body,'<textarea onselectstart="event.cancelBubble=true;return true" class="textinputs" id="'+_editInPlace+'"  style="display:none;zindex:200;position:absolute;overflow:vertical;resize:none"></textarea>',doc)
fEdit=doc.getElementById(_editInPlace)
fEdit.onkeydown=fEdit_keyDown
fEdit.onblur=fEdit_lostFocus
fEdit.onmousedown=fEdit_mouseDown
fEdit.onmousemove=fEdit_mouseMove
fEdit.onmouseup=fEdit_mouseUp
}
fEdit.value=formula
fEdit.oldValue=fEdit.value
fEdit.isDisplayed=true
var st=fEdit.style
st.left=""+ convertX(getPos(o).x)+"px"
st.top=""+ convertY(getPos(o).y)+"px"
st.width=""+convertWidth(o.offsetWidth<80?80:o.offsetWidth )+"px"
st.height=""+ convertHeight(o.offsetHeight)+"px"
st.fontSize=""+((size * getZoom()) / 100) +"pt"
st.display=""
updateParentIdRefBid()
_paramsEditInPlace=urlParamsNoBID(null,null,null,null,null,null,null,null,true)+"&bids="+bid;
_submitEditInPlace=true
_fEditIsShown=true
if(_ffDD)
if (fr) fr.document.body.draggable=false
setTimeout("delayed_fEdit_show()",1);
}
}
function delayed_fEdit_show()
{
var fr = getReportFrame()
if (fr == null)
return
var fEdit=fr.document.getElementById(_editInPlace)
fEdit.select()
}
function fEdit_hide()
{
_fEditIsShown=false
var fr = getReportFrame()
if (fr == null) return
var fEdit=fr.document.getElementById(_editInPlace)
if (fEdit)
{
fEdit.style.display="none"
fEdit.isDisplayed=false
}
if(_ffDD)
fr.document.body.draggable=true
}
function fEdit_lostFocus()
{
_fEditIsShown=false
var fr = getReportFrame()
if (fr == null) return
var fEdit=fr.document.getElementById(_editInPlace)
if(fEdit && fEdit.isDisplayed)
{
if(_submitEditInPlace)
{
setTimeout("delayedValidateFormulaInPlace()",1)
}
fEdit_hide()
}
}
function fEdit_mouseDown(e)
{
if (_ie) {
var reportFrame=getReportFrame()
if (reportFrame == null) return
e=reportFrame.event
}
e.cancelBubble=true
}
function fEdit_mouseMove(e)
{
if (_ie)
{
var reportFrame=getReportFrame()
if (reportFrame == null) return
e=reportFrame.event
}
e.cancelBubble=true
return true
}
function fEdit_mouseUp(e)
{
if (_ie)
{
var reportFrame=getReportFrame()
if (reportFrame == null) return
e=reportFrame.event
}
e.cancelBubble=true
simulateClick(e)
return true
}
function fEdit_keyDown(e)
{
if (_ie) {
var reportFrame=getReportFrame()
if (reportFrame == null) return
e=reportFrame.event
}
var key=_ie?e.keyCode:e.which
if (key==13) 
{
fEdit_lostFocus()
}
else if (key==27) 
{
_submitEditInPlace=false
fEdit_hide()
}
e.cancelBubble=true
return true
}
function delayedValidateFormulaInPlace()
{
var reportFrame=getReportFrame()
if (reportFrame == null) return
var fEdit=reportFrame.document.getElementById(_editInPlace)
if(fEdit.oldValue==fEdit.value) return;
var p = _paramsEditInPlace 
if(p == null)
p=urlParams(false,null,null,null,null,null,null,null,null,null,true)
if (p!="")
{
self.document.viewerForm.action="processFormulaValidation"+_appExt+p+"&nAction=1&bEditInPlace=true"
self.document.viewerForm.target="DlgFrame"
self.document.viewerForm.sParam1.value=fEdit.value;
self.document.viewerForm.submit();
}
wt()
}
function mmove(e)
{
var o=this, fr = getParentWindow(o) 
if (fr==null)
return true
if (o.eventsAttached != 1)
{
if (isPicker)
{
o.oncontextmenu=pickerContextMenu
o.onmousedown=pickerClickCB
o.onmouseover=pickerOverCB
o.onmouseout=pickerOutCB
makeSectionSensitiveIE(o)
}
else
{
}
o.eventsAttached=1
}
var e=_ie?fr.event:e, d=fr.document, cn=getClassNameByLayer(o)
if (_isDDEnabled && DDInitMethod)
{
DDInitMethod(o,cn,getCellZone(o,e,d))
setReportTooltipOffset(fr);
newTooltipWidget().show(true, "<nobr>"+convStr(_DDTxt)+"</nobr>",_DDIconUrl,16,16,0,16*_DDIdx,true,e)
e.cancelBubble=true
o.style.cursor="crosshair";
return false
}
else
{
newTooltipWidget().show(false);
o.style.cursor="default";
}
if (_feedbackManager.isMoving()) 
{
_feedbackManager.updateMoveTarget(cn, o)
return true
}
if (_formatPainterBid != null) {
o.style.cursor="default";
setReportTooltipOffset(fr);
var iconUrl = _root + "/images/main/" + "formatPainter.gif"
newTooltipWidget().show(true, "<nobr>"+convStr("(Press ESC Key to cancel this action)")+"</nobr>",iconUrl,16,16,0,16*_DDIdx,true,e)
setCrs(o,_cellContent)
return false
}
else
{
newTooltipWidget().show(false)
var w=null,onlyW=false,topOnly=false,bottomOnly=false
switch (cn)
{
case "section":
w=o
onlyW=true
bottomOnly=false
break
case "pageHeader":
case "pageFooter":
w=o
onlyW=true
topOnly=(cn=="pageFooter")
bottomOnly=(cn=="pageHeader")
break
case "reportCell":
var bid=this.getAttribute("bid"),elt=findByBID(window.doc,bid)
if (isTableCell(elt))
{
onlyW=true
bottomOnly=true
}
w=o
break
case "block":
var bid=this.getAttribute("bid"),elt=findByBID(window.doc,bid)
if (elt&&isGraph(elt)) {
w=o
}
break
}
if (w)
{
zone=getCellZone(w,e,d,onlyW,topOnly,bottomOnly)
if (cn=="section")
{
switch (zone)
{
case _cellBottom:
w.title="Resize bottom of section";
break;
case _cellTop:
w.title="Resize top of section";
break;
default:
w.title="";
break;
}
}
if (isTableCell(elt)) setCrs(w,zone)
if(Report_canStartDrag(elt,zone))
triggerDDCB(e,this);
return false
}
else
{
o.style.cursor="default";
return true
}
}
}
var _curChartRegionCoords = null, _curChartDynAreaCoords = null, _chartTooltip = null, _chartIconTooltip = null
var _mapDict = null, _currMapDict = null 
_ExpColChartZoneInfo = null
_currColorAsmChartZoneInfo = null
function mapmove(e)
{
if (_feedbackManager.isMoving() || _feedbackManager.isResizing()) return
var o = this, fr = getParentWindow(o) 
if (fr==null)
return
var bid = o.getAttribute?o.getAttribute("bid"):null
var idref = isStructure?bid:o.getAttribute?o.getAttribute("idref"):null
var prevIdref = (_curChartRegionCoords == null)?null:_curChartRegionCoords.get("idref")
if (idref != prevIdref) {
if (_mapDict == null) {
_mapDict = fr.JSONDATA.imgmapdict
}
if (!_mapDict) return 
var areas = null, dataAreas = null
for (var i = 0; i < _mapDict.length; i++) {
if (_mapDict[i].href == idref) {
_currMapDict = _mapDict[i] 
areas = _currMapDict.data.staticareas
dataAreas = _currMapDict.data.dynareas
}
}
if (!areas) return 
_curChartRegionCoords = new Hash
_curChartRegionCoords.set("idref", idref)
var aL = areas.length
for (var i=0; i < aL; i++) {
var map = areas[i], id = map.id
var firstZone = map.zones[0] 
var shape = firstZone.shape
var coords = firstZone.coords
if (shape == "R")
{
var x1=parseInt(coords[0]), x2=parseInt(coords[2])
var y1=parseInt(coords[1]), y2=parseInt(coords[3])
_curChartRegionCoords.set(id, {"id":id, "shape":shape, "coords":{"x":x1, "y":y1, "x2":x2, "y2":y2}})
} else if (shape == "C") {
var x=parseInt(coords[0]), y=parseInt(coords[1])
var rx=parseInt(coords[2]), ry=parseInt(coords[3])
_curChartRegionCoords.set(id, {
"id": id,
"shape": "R",
"coords": {
"x": x - rx,
"y": y - ry,
"x2": x + rx,
"y2": y + ry
}
})
} else if (shape == "P") {
var len=coords.length, j = 0, points = new Array
for (var xyi=0; xyi < len; xyi += 2) {
points[j++] = {"x":parseInt(coords[xyi]), "y":parseInt(coords[xyi+1])}
}
_curChartRegionCoords.set(id, {"id":id, "shape":shape, "coords":points})
}
}
_curChartDynAreaCoords = new Hash 
var daL = dataAreas.length
for (var i=0; i < daL; i++) {
var map = dataAreas[i]
if (! ((null != map.idxs) || ((null != map.tbids)))) continue
var id = map.id
var firstZone = map.zones[0] 
var shape = firstZone.shape
var coords = firstZone.coords
var dynArea = {"id":id, "shape":shape}
if (map.ItemID) {
dynArea.ItemID = map.ItemID
}
if (map.tbids) {
dynArea.tbids = map.tbids
}
if (map.dims) {
dynArea.dims = map.dims
} 
if (map.meas) { 
dynArea.meas = map.meas
}
if (map.idxs) { 
dynArea.idxs = map.idxs
}
if (shape == "R")
{
var x1=parseInt(coords[0]), x2=parseInt(coords[2])
var y1=parseInt(coords[1]), y2=parseInt(coords[3])
dynArea.coords = {"x":x1, "y":y1, "x2":x2, "y2":y2}
} else if (shape == "C") {
var x=parseInt(coords[0]), y=parseInt(coords[1])
var rx=parseInt(coords[2]), ry=parseInt(coords[3])
dynArea.coords = {"x":x-rx, "y":y-ry, "x2":x+rx, "y2":y+ry}
dynArea.shape = "R"
} else if (shape == "P") {
var len=coords.length, j = 0, points = new Array
for (var xyi=0; xyi < len; xyi += 2) {
points[j++] = {"x":parseInt(coords[xyi]), "y":parseInt(coords[xyi+1])}
}
dynArea.coords = points
}
_curChartDynAreaCoords.set(id, dynArea)
}
if (_bDrillMode) {
for (var i=0; i < aL; i++) {
var map = areas[i]
if (! map.tbids) continue
var id = map.id
var firstZone = map.zones[0] 
var shape = firstZone.shape
var coords = firstZone.coords
var area = {"id":id, "shape":shape}
area.tbids = map.tbids
if (shape == "R")
{
var x1=parseInt(coords[0]), x2=parseInt(coords[2])
var y1=parseInt(coords[1]), y2=parseInt(coords[3])
area.coords = {"x":x1, "y":y1, "x2":x2, "y2":y2}
} else if (shape == "C") {
var x=parseInt(coords[0]), y=parseInt(coords[1])
var rx=parseInt(coords[2]), ry=parseInt(coords[3])
area.coords = {"x":x-rx, "y":y-ry, "x2":x+rx, "y2":y+ry}
area.shape = "R"
} else if (shape == "P") {
var len=coords.length, j = 0, points = new Array
for (var xyi=0; xyi < len; xyi += 2) {
points[j++] = {"x":parseInt(coords[xyi]), "y":parseInt(coords[xyi+1])}
}
area.coords = points
}
_curChartDynAreaCoords.set(id, area)
}
}
if (isInteractive) {
o.onmousedown = mapmdown
}
o.onmouseout = mout
}
var e=_ie?fr.event:e
var m = getClickCoordinatesInContainer(o,e)
_feedbackManager.setSubRegion(m)
var sb = _feedbackManager.getSubRegion()
_ExpColChartZoneInfo = null;
if (_bDrillMode) {
o.onmousedown = mapmdown
} else {
_feedbackManager.show(true, o, null, fr, null, new_FeedbackBehavior({
"blockIdref": idref
}))
if (sb && sb.coords) {
var ctrl = _mac ? e.metaKey : e.ctrlKey, shift = e.shiftKey
if (ctrl || shift) {
if ((_selectionElementTypesAr.length > 0) && (_selectionElementTypesAr[0] == _selectionElementType.ChartArea)) {
return
}
var elts = getSelectedElts();
if ((elts != null) && (elts.length > 0)) {
var bid = o.getAttribute("bid"), elt = findByBID(doc, bid)
var cn = isTableCell(elt) ? "tableCell" : className
if (!arrayContains(getSelectionElementTypes(cn), _selectionElementTypesAr)) {
return
}
}
}
_feedbackManager.show(true, o, null, fr, sb.coords, new_FeedbackBehavior({
"blockIdref": idref,
"zoom": getZoom()
}))
}
}
var tooltip = getTooltip(m, o, bid)
if ((null != tooltip) && (tooltip != '')) {
showMapChartTooltip(tooltip, e, fr)
} else {
hideChartTooltip(o)
}
e.cancelBubble=true
}
function isGhost(bid)
{
var currReportIndex = getReportIdxFromId(DS.iReportID)
if (bid!=null  && window.doc && window.doc.children && window.doc.children.length > 0 
        && 
 doc.children[currReportIndex].GhostCharts &&  doc.children[currReportIndex].GhostCharts.length > 0 )
{
var currReport = doc.children[currReportIndex]
var arrGhostCharts =  currReport.GhostCharts
for(var j=0; j<arrGhostCharts.length; j++)
{
if(bid == arrGhostCharts[j])
return true
}
}
return false
}
function isGhostOLD(theIdRef)
{
if (theIdRef==null)
return
var theFr = getReportFrame();
if (theFr==null)
return
var theMapdict  = theFr.JSONDATA.imgmapdict
var theCurrMapDict = null;
for (var i = 0; i < theMapdict.length; i++)
{
if (theMapdict[i].href == theIdRef)
{
theCurrMapDict =  theMapdict[i]
break;  
}
}
if(theCurrMapDict && theCurrMapDict.data &&  theCurrMapDict.data.metadata &&  theCurrMapDict.data.metadata.contexts)
{ 
var bidContexts = theCurrMapDict.data.metadata.contexts
if (bidContexts==null)
return
var l = bidContexts.length
if(l>0)
{
 return false
}
}
return true
}
function showMapChartTooltip(tooltip, e, fr) {
showChartTooltip(tooltip, e, fr, false)
}
function showIconChartTooltip(tooltip, e, fr){
showChartTooltip(tooltip, e, fr, true)
}
function showChartTooltip(tooltip, e, fr, isIcon) {
if ((null == tooltip) || (""==tooltip)) return
var chartTooltip = isIcon?_chartIconTooltip:_chartTooltip
if (chartTooltip == null) {
if (isIcon) {
chartTooltip = _chartIconTooltip = new_TooltipWidget({
id: "chartIconTooltip"
})
} else {
chartTooltip = _chartTooltip = new_TooltipWidget({
id: "chartTooltip"
})
}
}
setReportTooltipOffset(fr);
var maxWidth = ieTooltipWidth(tooltip)+145
tooltip = "<div style='padding:2px;'>" + tooltip + "</div>"
var x=absxpos(e), y=absypos(e)
chartTooltip.show(true, tooltip, null, _ie?maxWidth:null, null, null, null, true, e, x+_tooltipDx+30, y+_tooltipDy+20, _ie?maxWidth:null)
}
function ieTooltipWidth(tooltip)
{
var lignes = tooltip.split('<br>');
var maxWidth = 0;
for(var i=0;i<lignes.length;i++)
{
if(lignes[i].length>maxWidth)
maxWidth = lignes[i].length;
}
return maxWidth;
}
function iconChartOverCB(e) {
var o = this, fr = getParentWindow(o)
if (fr==null)
return
var e=_ie?fr.event:e
showIconChartTooltip(o.tooltip, e, fr)
}
function hideChartTooltip(layer) {
if (_chartTooltip != null) {
_chartTooltip.show(false)
}
if (null != _originalCursor) {
layer.style.cursor = _originalCursor
}
_curDrillInfo = null
}
function hideIconChartTooltip() {
if (_chartIconTooltip != null) {
_chartIconTooltip.show(false)
}
}
function hideDrillTooltip() {
if (_drillTooltip != null) {
_drillTooltip.show(false)
}
}
_originalCursor = null
function getCurrColorAsmChartZoneInfo(idxs, area,bid)
{
var legendCtxt = null
if( null != area &&  null != area.ItemID && _currMapDict && _currMapDict.data && _currMapDict.data.legend_items_data_context && _currMapDict.data.legend_items_data_context.length > 0)
{
var ItemID = area.ItemID
var legend_items_data_context = _currMapDict.data.legend_items_data_context
var l = legend_items_data_context.length
for (var i = 0; i < l; i++)
{
legendCtxt = legend_items_data_context[i]
if(legendCtxt && legendCtxt.id == ItemID) break;
}
}
return legendCtxt
}
function getCurrExpColChartZoneInfo(idxs, area,bid)
{
var ctxt = null
var index_objectId=0;
if(null != idxs && area && (area.dims ||area.meas)  
&& 
   _currMapDict && _currMapDict.data && _currMapDict.data.metadata && _currMapDict.data.metadata.contexts )
{
var dbid = null
if(area.meas)
{
if(!area.meas.fdbid)
return
dbid = area.meas.fdbid
}
else if(area.dims)
{
if(!area.dims.fdbid)
return
dbid = area.dims.fdbid
for (var i=0;i<area.dims.dbids.length;i++)
{
if (area.dims.dbids[i]==area.dims.fdbid)
break;
}
index_objectId=i
}
var bidContexts = _currMapDict.data.metadata.contexts, l = bidContexts.length
var bidContext = null
if(bidContexts && null != dbid)
{
for (var i = 0; i < l; i++)
{
bidContext = bidContexts[i]
if (!bidContext || bidContext.bid == dbid) break
} 
}
if (bidContext == null) return null;
if (!idxs) {
ctxt = bidContext.valuecontext
}
else
{
if (bidContext.axisbased == null) return null
var lax = bidContext.axisbased.length
switch(lax) {
case 0:
break
case 1:
var idx = parseInt(idxs[0])
if( bidContext.valuecontext && idx < bidContext.valuecontext.length )
ctxt = bidContext.valuecontext[idx]
var axisbased =bidContext.axisbased;
var axiscontexts = _currMapDict.data.metadata.axiscontexts[axisbased[0]];
if (axiscontexts)
{
var ctxts = axiscontexts.ctxts;
if(idx!= null)
{
if(idx<0) idx=0
ctxt.datapaths = ctxts[idx].datapath;
ctxt.objectId=ctxt.datapaths[index_objectId].id;
}
}
break
case 2:
var idx1 = parseInt(idxs[0]), idx2 = parseInt(idxs[1]) 
ctxt = bidContext.valuecontext[idx2][idx1]
break
}
} 
}
if(ctxt && ctxt.mid)
{
ctxt.bid = bid;
}
else 
ctxt = null
return ctxt
}
function doFocusDrill()
{
var action = (_ExpColChartZoneInfo.msign == "+" || _ExpColChartZoneInfo.msign == "-")? "FOCUSIN_SYMMETRIC" : "FOCUSOUT_SYMMETRIC"
doChartExpandCollapse(action, _ExpColChartZoneInfo);
}
function getCurrArea(m)
{
if(_curChartDynAreaCoords)
{
var curRegionIds = _curChartDynAreaCoords.keys(), area = null
var found = false;
for (var i = curRegionIds.length - 1 ; i >= 0 ; i--) { 
area = _curChartDynAreaCoords.get(curRegionIds[i])
var  c = area.coords
if (pointInShape(m, c, (area.shape == "P"))) {
found = true;
break;
}
}
}
if (!found) return null
return area;
}
function getTooltip(m, layer, bid)
{ 
var curRegionIds = _curChartDynAreaCoords.keys(), area = null
var found = false;
for (var i = curRegionIds.length - 1 ; i >= 0 ; i--) { 
area = _curChartDynAreaCoords.get(curRegionIds[i])
var  c = area.coords
if (pointInShape(m, c, (area.shape == "P"))) {
found = true;
break;
}
}
if (!found)
{
return null
} 
var tooltip = '' 
var idxs = null, drillCtxts = null
if (area.idxs) {
idxs = area.idxs.split(',')
}
_ExpColChartZoneInfo = getCurrExpColChartZoneInfo(idxs, area,bid)
if (_bDrillMode) {
var drillCtxts = null
if (area.dims) {
if(area.dims.fdbid) 
drillCtxts = getDrillContext(drillCtxts, idxs, area.dims.fdbid)
else
{
var dbids = area.dims.dbids, len = dbids.length
for (var i = 0; i < len; i++) {
drillCtxts = getDrillContext(drillCtxts, idxs, dbids[i])
}
}
}
if (area.meas) {
var mes = area.meas, lm = area.meas.length
for (var v = 0; v < lm; v++) {
var ms = mes[v]
var dbid = ms.dbid
drillCtxts = getDrillContext(drillCtxts, idxs, dbid)
}
}
if (area.tbids) { 
var tbids = area.tbids, ltb = tbids.length
for (var tb = 0; tb < ltb; tb++) {
drillCtxts = getDrillContext(drillCtxts, null, tbids[tb])
}
}
var len = drillCtxts?drillCtxts.length:0
if (len > 0)
{ 
initDrillInfo(drillCtxts, '', bid, bid)
if (_curDrillInfo == null) return
var dimToName = _curDrillInfo.dimToName
var len=dimToName?dimToName.length:0
if (len == 0) return null
var cursor = layer.style.cursor 
if (_originalCursor == null) {
_originalCursor = cursor
}
if ("down" ==_curDrillInfo.action) {
tooltip = "Drill Down to"
layer.style.cursor = "url(" + _drillDownIconUrl + ")," + _hand
} else {
tooltip = "Drill Up to"
layer.style.cursor = _hand
}
tooltip += ' '
for (var d=0; d < len; d++) {
tooltip += dimToName[d]
if (d < (len-1)) {
tooltip += ", "
}
}
  if (_curDrillInfo.outOfScope) {
  tooltip += ' ' + '(New Query)'
  }
} 
} 
if(tooltip == '' && _ExpColChartZoneInfo != null)
{
tooltip = (_ExpColChartZoneInfo.msign ==".")?"Focus drill up":"Focus drill down"
}
if (tooltip == ''){
if (area.dims) {
var dbids = area.dims.dbids, len = dbids.length
var cSet = new Hash
for (var i = 0; i < len; i++) {
if (idxs.length> 1){
getDatapathContext(cSet, idxs[i], dbids[i])
}else{
getDatapathContext(cSet, idxs, dbids[i])
}
}
var tt = cSet.values(), ltt = tt.length 
for (var tti = 0; tti < ltt; tti++) {
tooltip += tt[tti]
}
}
var tbid2name = _currMapDict.data.tbid2name;
if(tbid2name && tooltip.length==0)
{
if (area.tbids) {
var name = null;
for (var tbi = 0; tbi < area.tbids.length; tbi++) {
name = tbid2name[parseInt(area.tbids[tbi])];
if(name!=null)
{
tooltip += name;
tooltip += ((tbi > 0) && (tbi < (area.tbids.length - 1))) ? ", " : ""
}
}
}
}
if (area.meas) {
var mes = area.meas, lm = area.meas.length, cSet = new Hash
for (var v = 0; v < lm; v++) {
getDatapathContext(cSet, idxs, mes[v].dbid)
}
var tt = cSet.values(), ltt = tt.length 
for (var tti = 0; tti < ltt; tti++) {
if (tooltip.indexOf(tt[tti]) == -1)
tooltip += tt[tti]
}
var dbid2tbid = _currMapDict.data.dbid2tbid
if (null != dbid2tbid) {
for (var v = 0; v < lm; v++) {
var ms = mes[v]
var dbid = ms.dbid
if(ms.fvom != null)
{
if (dbid && null != tbid2name) {
var name = tbid2name[parseInt(dbid2tbid[parseInt(dbid)])]
tooltip += "<b>" + name + "</b> = "
}
tooltip += ms.fvom
if (ms.calcs != null) {
tooltip += " ("
if(ms.fmax != null)
{
tooltip += ms.fmax
}
else
{
for (var cl = 0; cl < ms.calcs.length; cl++) {
tooltip += ms.calcs[cl].fv
tooltip += ((cl > 0) && (cl < (ms.calcs.length - 1))) ? " " : ""
}
} 
tooltip += ")"
}
tooltip += "<br>"
}
}
}
}
}
return tooltip
}
function getCtxt(ctxt)
{
if(ctxt)
{
var datapath = ctxt.datapath
var tt = ''
for (var i = 0; i < datapath.length; i++) 
{
if(!datapath[i].h) 
{
tt += "<b>" + datapath[i].n + "</b> = " + datapath[i].v + "<br>"
}
}
return tt
}
return null
}
function getDatapathContext(ctxtsSet, idxs, dbid){
var bidContexts = null, l = null
if(_currMapDict && _currMapDict.data &&  _currMapDict.data.metadata &&  _currMapDict.data.metadata.contexts)
{
 bidContexts = _currMapDict.data.metadata.contexts
 l = bidContexts.length
}
else
return 
var bidContext = null
for (var i = 0; i < l; i++) {
bidContext = bidContexts[i]
if (bidContext.bid == dbid) break
} 
if ((bidContext == null) || (bidContext.axisbased == null)) return 
for (var i = 0; i < bidContext.axisbased.length; i++) {
 var axisCtxtOrd = parseInt(bidContext.axisbased[i]), idx = parseInt(idxs[i])
if(idx<0)idx = 0
var key = "" + axisCtxtOrd + "." + idx
var ctxt = ctxtsSet.get(key) 
if (null == ctxt) {
var axCtxt = _currMapDict.data.metadata.axiscontexts[axisCtxtOrd]
if (axCtxt.ctxts.length) {
ctxt = axCtxt.ctxts[idx]
ctxtsSet.set(key, getCtxt(ctxt))
}
}
}
}
function getDrillContext(ctxtsH, idxs, dbid) {
if(_currMapDict && _currMapDict.data && _currMapDict.data.metadata && _currMapDict.data.metadata.contexts )
{
var bidContexts = _currMapDict.data.metadata.contexts, l = bidContexts.length
if (null == ctxtsH) {
ctxtsH = new Array
} 
var bidContext = null
for (var i = 0; i < l; i++) {
bidContext = bidContexts[i]
if (bidContext.bid == dbid) break
} 
if (bidContext == null) return
varctxt = null
if (!idxs) {
ctxt = bidContext.valuecontext
} else {
if (bidContext.axisbased == null) return null
var lax = bidContext.axisbased.length
switch(lax) {
case 0:
break
case 1:
var idx = parseInt(idxs[0])
ctxt = bidContext.valuecontext[idx]
break
case 2:
var idx1 = parseInt(idxs[0]), idx2 = parseInt(idxs[1]) 
ctxt = bidContext.valuecontext[idx2][idx1]
break
}
} 
if (ctxt && ctxt.drill_context) { 
var ctxtsHL = ctxtsH.length
for (var i = 0; i < ctxtsHL; i++) { 
if (ctxtsH[i].cid == ctxt.drill_context.cid) return ctxtsH 
}
if (ctxt.drill_up_arrow&& ("yes" == ctxt.drill_up_arrow)) {
ctxt.drill_context.drill_up = true
}  
ctxtsH[ctxtsHL] = ctxt.drill_context
} 
return ctxtsH
}
else
return null 
}
var _areaDefid=null
var _chartBid=null
var _chartIdRef=null
function mapmdown(e)
{
_areaDefid = null
var o=this, fr = getParentWindow(o)
if (fr==null)
return true
var e=_ie?fr.event:e
simulateClick(e)
var m = getClickCoordinatesInContainer(o,e)
_feedbackManager.setSubRegion(m)
subRegion = _feedbackManager.getSubRegion()
var area = getCurrArea(m);
_feedbackManager.setDynArea(area);
var isLeftButton = eventIsLeftButton(e,fr) 
if (isLeftButton && window._isDDEnabled && DDActionMethod)
{
DDActionMethod(o,"chartArea",e)
return _webKit?true:false
}
if (isLeftButton && _bDrillMode) {
generateDrill()
}
var bid = o.getAttribute?o.getAttribute("bid"):null
if(isLeftButton && bid)
{
var idxs = null
if (area && area.idxs)
{
idxs = area.idxs.split(',')
}
_ExpColChartZoneInfo = getCurrExpColChartZoneInfo(idxs, area,bid);
if(_ExpColChartZoneInfo)
doFocusDrill()
_currColorAsmChartZoneInfo = getCurrColorAsmChartZoneInfo(idxs, area,bid)
}
if (isInteractive && !canSelectBid(bid, subRegion ? "chartArea" : "block", e, o, fr)) {
return
}
var subRegionDefId = subRegion?subRegion.id:_feedbackManager.getRegionDefId()
if (subRegionDefId) _areaDefid = subRegionDefId.substring(5) 
_chartBid = bid
_chartIdRef = o.getAttribute?o.getAttribute("idref"):null
e.cancelBubble=true
}
_selectionElementType = {
    "Container":0,        
    "Element":1,          
    "SubElement":2,       
    "ChartArea":3       
}
_selectionElementTypesAr = null
function getSelectionElementTypes(cn) { 
var selectionElementTypesAr = new Array();
switch(cn) {
case "reportCell":
case "cell":
selectionElementTypesAr[0] = _selectionElementType.Element 
selectionElementTypesAr[1] = _selectionElementType.SubElement
break
case "tableCell":          
selectionElementTypesAr[0] = _selectionElementType.SubElement
break
case "block":
selectionElementTypesAr[0] = _selectionElementType.Element
break
case "chartArea":
selectionElementTypesAr[0] = _selectionElementType.ChartArea
break
case "pageHeader":
case "pageFooter":
case "section":
selectionElementTypesAr[0] = _selectionElementType.Container
break
case "body":
break
}
return selectionElementTypesAr
}
function mover(evt)
{
if (!isEnableUserRight(WS._usrUseFormatting))
return
var o = this
if (!_feedbackManager.isResizing())
{
var className = getClassNameByLayer(o), resizable = true, fr = getParentWindow(o)
traceLog("nMover no resizing className:"+className)
evt=_ie?fr.event:evt
var ctrl= _mac?evt.metaKey:evt.ctrlKey, shift = evt.shiftKey
if (ctrl || shift) {
if (_selectionElementTypesAr && (_selectionElementTypesAr.length > 0) && (_selectionElementTypesAr[0] == _selectionElementType.ChartArea)) {
return
}
var elts = getSelectedElts();
if ((elts != null) && (elts.length > 0)) {
var bid = o.getAttribute("bid"), elt = findByBID(doc, bid)
var cn = isTableCell(elt)?"tableCell":className
if (!arrayContains(getSelectionElementTypes(cn), _selectionElementTypesAr)) {
return
}
}
}
_feedbackManager.hideSectionVignette()
_feedbackManager.clearSubRegion()
switch (className)
{
case "block":
var isChart = isLayerChart(o)
case "reportCell":
case "cell":
if (!_feedbackManager.isMoving()) {
var bid = o.getAttribute("bid"), elt = findByBID(doc, bid)
var idref = isStructure?bid:o.getAttribute?o.getAttribute("idref"):null
if (isTableCell(elt)) {
var objs = bidTable.get(bid)
traceLog("isTableCell idref:"+idref)
var block =getBlockFromTableCell(elt)
var blockL = getParentLayerFromBid(o, block.bid)
var blockIdref = isStructure?block.bid:getElementOrParentIdref(blockL)
_feedbackManager.show(true, blockL, null, fr, null, 
new_FeedbackBehavior({"resizable":false,"movable":true, "blockIdref":blockIdref}))
for (var i=0; i < objs.length; i++) {
var isSelectedInstance = (idref && (objs[i].getAttribute) && (objs[i].getAttribute(isStructure?"bid":"idref") == idref))
if (isSelectedInstance) {
_feedbackManager.show(true, objs[i], null, fr, null, 
new_FeedbackBehavior({"resizable":false,"movable":false,"isSelectedInstance":true, "isTableCell":true, "blockIdref":blockIdref}))
}
objs[i].onmouseout=mout
}
} else {
var l = isStructure?getLayerByBid(bid, o.parent):getLayerByIdRef(idref)
_feedbackManager.show(true, l, null, fr, null, new_FeedbackBehavior({"resizable":isChart,"blockIdref":isChart?idref:null}))
}
o.onmouseout=mout
}
break
case "pageHeader":
case "pageFooter":
if ("pageFooter" == className) {
}
case "section":
var behavior = new_FeedbackBehavior({"resizableW":false, "resizableT":("pageHeader" != className), "resizableB":("pageFooter" != className), "movable":false,"blockIdref":null})
_feedbackManager.show(true, o, null, fr, null, behavior)
o.onmouseout=mout
if ("section" == className) {
}
break
case "body":
_feedbackManager.show(true, o, null, fr)
o.onmouseout=mout
break
}
evt.cancelBubble=true
}
}
function moveLayContextMenu(e)
{
if (_saf)
this.onmousedown(e)
incContextMenu(this,e)
return false
}
function getContainerFromBid(lyr, bid) {
var currentRe = findByBID(doc,bid)
var isChart = isGraphBlock(currentRe)
while ((currentRe.className != "body") && (currentRe.className != "section")) {
currentRe = currentRe.parent
}
var isSection = (currentRe.className == "section"), contBid = currentRe.bid
while ((lyr.getAttribute("bid")) && (lyr.getAttribute("bid") != contBid)) {
lyr = lyr.parentElement
}
return (isSection && isChart && lyr.parentElement && (lyr.style.pixelTop <= 0) && (lyr.parentElement.tagName == "DIV"))?lyr.parentElement:lyr
}
function getPageHeaderHeight(lyr, bid) {
var currentRe = findByBID(doc,bid)
while ((currentRe.className != "body")) {
currentRe = currentRe.parent
}
contBid = currentRe.parent.children[0].bid
while ((lyr.getAttribute("bid")) && (lyr.getAttribute("bid") != contBid)) {
lyr = lyr.parentElement
}
return lyr.style.pixelHeight
}
function moveLayDblClickCB()
{
escapeFormatPainter()
var bid=this.getAttribute("bid")
var e = findByBID(doc, bid), cn = e.className, clickID =""
switch(cn) {
case "cell":
case "reportCell": 
clickID = "cellFormatCell"
break
case "block": 
clickID = (e.children[0])?"cellFormatTable":"cellFormatChart"
break
}
if (clickID != "") {
setClickCBID(clickID)
clickCB()
}
}
function mup(e)
{
var o=this
var fr =getParentWindow(o) 
if (fr == null) return true
var ee=_ie?fr.event:e
if (eventIsLeftButton(ee,fr))
{
triggerResize(o,e)
o.downZone=null
drawResize(e)
return true
}
else
_feedbackManager.setResizeObj(null)
return true
}
function setCrs(o,zone)
{
var s=o.style
if(_isDDEnabled)
{
s.cursor="crosshair";
return;
}
if (isPicker ||  _feedbackManager.getResizeObj())
{
s.cursor="default";
return
}
if (_feedbackManager.getResizeObj() == null)
{
switch(zone)
{
case _cellContent:
s.cursor="default";
break
case _cellRight:
s.cursor=_resizeW;
break
case _cellLeft:
s.cursor=_resizeW;
break
case _cellBottom:
s.cursor=_resizeH;
break
case _cellTop:
s.cursor=_resizeH;
break
}
} else {
s.cursor="default"
}
}
function drawResize(e)
{
if (!_feedbackManager.boresizediv) return false
var s = null, s2 = null
try {
s = _feedbackManager.boresizediv.style
s2 = _feedbackManager.boresizediv2.style
} catch (e) {
return
}
var o=_feedbackManager.getResizeObj()
if (null == o || o.downZone == _cellContent) {
return 
}
var rWin=getReportFrame()
if (rWin == null) return
var rDoc=rWin.document
var oldCurDoc=_curDoc
var oldCurWin=_curWin
_curDoc=rDoc
_curWin=rWin
var x=convertX(getPos(o).x)
var y=convertY(getPos(o).y)
var w=convertWidth(o.offsetWidth)+1
var h=convertHeight(o.offsetHeight)+1
var cn=getClassNameByLayer(o),z=getZoom()/100
var zone=o.downZone
if ((zone >= _cellRight) && (zone <= _cellBottomRight))
{
_feedbackManager.bIsResizing = true
if (zone==_cellRight) {
w=Math.max(_minResWidth*z,w+ (absxpos(e,z,rWin)-o.resizeZoneX)*z)
var pixPerfectW = 2
w = w - pixPerfectW
s.left=""+ (x + w) +"px"
s.top=""+getScrollY()+"px"
s.width="1px"
s.height=""+winHeight()+"px"
}
else if (zone==_cellLeft)
{
w = Math.max(_minResWidth*z, Math.min(absxpos(e,z,rWin)*z+getScrollX(),x+o.offsetWidth*z))
var pixPerfectW = 1
w = w - pixPerfectW
s.left=""+ w + "px"
s.top=""+getScrollY()+"px"
s.width="1px"
s.height=""+winHeight()+"px"
}
else if (zone==_cellBottom)
{
h=h+(absypos(e,z,rWin)-o.resizeZoneY)*z
if (o.isSection!=true)
h=Math.max(_minResHeight*z,h)
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+(y+h + (o.isFooter?0:(o.isSectionOrHeaderOrFooter ? -2 : -1)))+"px"
s.width=""+winWidth()+"px"
s.height="1px"
}
else if (zone==_cellTop)
{
h=absypos(e,z,rWin)*z+getScrollY()
if (o.isSection!=true)
h = Math.max(_minResHeight*z, Math.min(h,y+o.offsetHeight*z))
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+ h +"px" 
s.width=""+winWidth()+"px"
s.height="1px"
}
else if (zone==_cellTopLeft)
{
h=absypos(e,z,rWin)*z+getScrollY()
h = Math.max(_minResHeight*z, Math.min(h,y+o.offsetHeight*z))
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+ h +"px" 
s.width=""+winWidth()+"px"
s.height="1px"
w = Math.max(_minResWidth*z, Math.min(absxpos(e,z,rWin)*z+getScrollX(),x+o.offsetWidth*z))
var pixPerfectW = 1
w = w - pixPerfectW
s2.left=""+ w + "px"
s2.top=""+getScrollY()+"px"
s2.width="1px"
s2.height=""+winHeight()+"px"
s2.display="block"
}
else if (zone==_cellTopRight)
{
h=absypos(e,z,rWin)*z+getScrollY()
h = Math.max(_minResHeight*z, Math.min(h,y+o.offsetHeight*z))
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+ h +"px" 
s.width=""+winWidth()+"px"
s.height="1px"
w=Math.max(_minResWidth*z,w+ (absxpos(e,z,rWin)-o.resizeZoneX)*z)
var pixPerfectW = 2
w = w - pixPerfectW
s2.left=""+ (x + w) +"px"
s2.top=""+getScrollY()+"px"
s2.width="1px"
s2.height=""+winHeight()+"px"
s2.display="block"
}
else if (zone==_cellBottomLeft)
{
h=h+(absypos(e,z,rWin)-o.resizeZoneY)*z
h=Math.max(_minResHeight*z,h)
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+(y+h -1)+"px"
s.width=""+winWidth()+"px"
s.height="1px"
w = Math.max(_minResWidth*z, Math.min(absxpos(e,z,rWin)*z+getScrollX(),x+o.offsetWidth*z))
var pixPerfectW = 1
w = w - pixPerfectW
s2.left=""+ w + "px"
s2.top=""+getScrollY()+"px"
s2.width="1px"
s2.height=""+winHeight()+"px"
s2.display="block"
}
else if (zone==_cellBottomRight)
{
h=h+(absypos(e,z,rWin)-o.resizeZoneY)*z
h=Math.max(_minResHeight*z,h)
var pixPerfectH= 1
h = h - pixPerfectH
s.left=""+getScrollX()+"px"
s.top=""+(y+h -1)+"px"
s.width=""+winWidth()+"px"
s.height="1px"
w=Math.max(_minResWidth*z,w+ (absxpos(e,z,rWin)-o.resizeZoneX)*z)
var pixPerfectW = 2
w = w - pixPerfectW
s2.left=""+ (x + w) +"px"
s2.top=""+getScrollY()+"px"
s2.width="1px"
s2.height=""+winHeight()+"px"
s2.display="block"
}
s.display="block"
}
_curDoc=oldCurDoc
_curWin=oldCurWin
}
_triggerMoveURL=""
function triggerMoveYesCB() 
{
wt()
setReportUrl(_triggerMoveURL,true,null,true) 
}
function isContainer(cn) {
switch (cn)
{
case "section":
case "pageHeader":
case "pageFooter":
case "body":
return true;
}
return false
}
function elemup(e)
{
var o=this
var className=getClassNameByLayer(o)
if (_ie)
{
try
{
o.releaseCapture()
}
catch(expt) {}
}
_feedbackManager.hideFeedbackObjects()
_feedbackManager.bIsResizing = false
_targetCopyBid = null
_canPaste=false
_paste = false
if (!isContainer(className)) return;
var fr=getParentWindow(o)
if (fr == null) return
var d=fr.document, targetBID=o.getAttribute("bid")
if ((_copyElemCN == null) || (((className=="pageHeader")||(className=="pageFooter")) && (_copyElemCN == "block"))) {
_canPaste=false
_paste = false
return
} else {
_canPaste=true
_paste = true
_targetCopyBid = targetBID
}
e=_ie?fr.event:e
var pos = _feedbackManager.getMousePos(e)
var xybid = getClickCoordinates(o,pos)
_copyX = xybid.x 
_copyY = xybid.y
_copyRow = xybid.row
}
function selectSingle(fr, bid,forceScroll, o)
{
selectObj(fr, bidTable.get(bid),true, bid, forceScroll, null, o)
selectedBid.set(bid, 1);
}
function feedbackManagerHideFeedback() {
traceLog("feedbackManagerHideFeedback")
_feedbackManager.show(false)
}
function mout()
{
hideChartTooltip(this)
hideIconChartTooltip()
hideDrillTooltip() 
clearMoutTimer()
traceLog("mout idref:" + this.getAttribute("idref"))
_moutTimer = setTimeout("feedbackManagerHideFeedback()", 50);
hideLayer(this);
}
function moveLayOut()
{
traceLog("moveLayOut")
mout()
}
function moveLayOver()
{
clearMoutTimer()
}
function beginMoveCB(e)
{
traceLog("beginMoveCB")
if (!_feedbackManager.isMoving())
{
var o=this,bid=o.getAttribute?o.getAttribute("bid"):""
o.onmouseout=null
var fr = _feedbackManager.getFr();
if (fr == null) return
if (_ie)
e=fr.event
var isLeftButton=false
if (_saf)
isLeftButton=eventIsLeftButton(e,fr)&&(e.button == _leftBtn)
else
isLeftButton=eventIsLeftButton(e,fr)
if (isLeftButton && (window._formatPainterBid != null) && (_formatPainterBid != bid))
{
var p=urlParamsNoBID()
p += "&sTargetBid="+ bid + "&sBid=" + _formatPainterBid
if ((_reportIdxSrc != null) && (_reportIdxSrc != DS.iReportID)){
p += "&reportIdxSrc="+ _reportIdxSrc
}
wt()
setTimeout('setReportUrl("' + _root + "processFormatPainter"+_appExt + p + '")',1);
formatPainterStopIfSingleAction(e)
return false
}
if (_isDDEnabled && DDActionMethod)
{
DDActionMethod(null)
}
var z=getZoom()/100
var rDoc=fr.document
var elt = findByBID(doc, bid)
if (isLeftButton)
{
rDoc.body.ondragstart=bodyDragStart
rDoc.body.onmousemove=globmmove
_feedbackManager.beginMove(e,z)
var pos=getPos(_feedbackManager.getCurrentMoveLayer())
_moveStartX=convertX(pos.x)/z
_moveStartY=convertY(pos.y)/z
traceLog("beginMove bid:"+bid)
var parentElt=getParentContainer(elt);
parentBid=parentElt.bid
var curL = null, containerL = null
if (isStructure) {
curL = getLayerByBid(bid)
containerL = getParentLayerFromBid(curL, parentBid, false)
} else {
var idref = getElementOrParentIdref(o)  
curL = getLayerByIdRef(idref)
containerL = getParentLayerFromBid(curL, parentBid, false)
}
_MoveStartRow=getYRowInContainer(containerL,ypos(containerL,e,rDoc,z)).row
}
var curL=getLayerByIdRef(o.getAttribute("idref"));
setFollowObjectInfo(curL);
_tableBid=null
var cn = elt?elt.className:""
if (!canSelectBid(bid, cn, e, o, fr)) {
return 
}
_chartBid=null;
delayedSelectionChanged()
simulateClick(e)
e.cancelBubble=true
if (!_webKit) {
return false
}
}
}
_accepDDfunc=null
_dropDDfunc=null
_ddMargH=10
_ddMargV=5
_DDTxtCtrl=""
_initialCursorX=null
_initialCursorY=null
_insideReportDD=false
_dropCellZone=null
_dropElement=null
_dropElementLayer=null
_dragElement=null
_prevDDTooltip=null;
function dropCellZone(o,e,doc)
{
var z=getZoom()/100
var fr=getParentWindow(o)
var pos=getPos(o)
var x= (eventGetX(e,fr)-convertX(pos.x) + getScrollX(fr)) / z
var y= (eventGetY(e,fr)-convertY(pos.y) + getScrollY(fr)) / z
var w=o.offsetWidth,h=o.offsetHeight
if (x>(w-_ddMargH))
return _cellRight
if (x<(_ddMargH))
return _cellLeft
if (y>(h-_ddMargV))
return _cellBottom
if (y<(_ddMargV))
return _cellTop
return _cellContent
}
function dragOverCB(ev)
{
var o = this;
var fr=getReportFrame()
var e=_ie?fr.event:ev
var ret = null;
if(_accepDDfunc)
ret = _accepDDfunc(e,o);
if(ret==true)
{
if(e.preventDefault)
e.preventDefault();
else
e.returnValue = false;
}
e.cancelBubble=true;
if(_ie)
Report_showDDTooltip(e,fr,(ret!=null))
}
function dropCB(e)
{
var o=this
var fr=getParentWindow(o)
e=_ie?fr.event:e
if (_dropDDfunc)
{
_dropDDfunc(e,o)
}
if(e.preventDefault)
e.preventDefault();
e.cancelBubble=true
}
function triggerDDCB(e,l)
{
if (eventIsLeftButton(e) && _initialCursorX!=null)
{
var x=eventGetX(e),y=eventGetY(e),threshold=3
if ((x<(_initialCursorX-threshold))||(x>(_initialCursorX+threshold))||(y<(_initialCursorY-threshold))||(y>(_initialCursorY+threshold)))
{
if(_ie)
{
if(l.dragDrop)
{
Report_initDD(e,l);
l.dragDrop();
}
}
else
{
if(l.draggable == false)
{
Report_initDD(e,l);
l.draggable=true;
}
}
}
}
}
function Report_initDD(e,l){
if(l.addEventListener) 
{
l.addEventListener("dragstart",Report_dragStartCB,false)
l.addEventListener("drag",Report_dragCB,false)
l.addEventListener("dragend",Report_dragEndCB,false)
}
else
{
l.ondragstart=Report_dragStartCB
l.ondrag=Report_dragCB
l.ondragend=Report_dragEndCB
}
}
function Report_dragStartCB(e)
{
if (_feedbackManager.isMoving() || _feedbackManager.isResizing())
{
preventDefaultKeyb(e);
return;
}
var fr=getReportFrame(),ev=_ie?fr.event:e,dt=ev.dataTransfer,d=fr.document, source=_ie?ev.srcElement:ev.target;
_accepDDfunc=Report_AcceptDropCB
_dropDDfunc=Report_DropCB
_insideReportDD = true;
_dragElement = source.getAttribute?findByBID(doc,source.getAttribute("bid")):null;
dt.effectAllowed='copyMove'
if(_ffDD ||  _webKit)
{
dt.setData('Text', '');
dt.setDragImage(getFFTooltip(fr), -27, -10); 
}
ev.cancelBubble=true
}
function Report_dragCB(e){
var fr=getReportFrame(),ev=_ie?fr.event:e
ev.cancelBubble=true
if(_ie)
newTooltipWidget().setPos(false,ev);
}
function Report_dragEndCB(){
_insideReportDD = false;
_dragElement=null;
_accepDDfunc=null
_dropDDfunc=null
_initialCursorX = null;
_initialCursorY = null;
newTooltipWidget().show(false)
var fr=getReportFrame(),d=fr.document
showFeedbackElem(d,false)
}
function Report_canStartDrag(elt,zone)
{
if(!_ie && !_ffDD && !_webKit) return false; 
if(_feedbackManager.isResizing()) return false; 
if((zone != _cellContent))  return false;
if(elt==null || elt.className!="reportCell") return false; 
var elts = getSelectedElts();
if ((elts != null) && (elts.length > 1)) return false;
if(elts[0]!=elt) return false;
return true;
}
function Report_getDDTooltip(ctrl, onlyFormula)
{
var t={text:'',src:null,idx:0}
var sAction= onlyFormula?"":((ctrl && _DDTxtCtrl) ?("  ("+_DDTxtCtrl+")"):(_DDTxt?("  ("+_DDTxt)+")":""))
if(_dragElement!=null && _dragElement.className=="reportCell") 
{
var name= _dragElement.formula
if(name.length>30)
name = name.substr(0,30)+"...";
t.text=convStr(name + sAction);
if(_dragElement.kind!="")
{
var icn = mapKindToTreeIcon(_objKindTable.get(_dragElement.kind));
if(icn!=null)
{
t.src = icn.src
t.idx = icn.idx
}
}
}
else if(!_insideReportDD) 
{
var sels = getLPDictionarySelections();
if(sels.length == 1)
{
var name= sels[0].name
if(name.length>30)
name = name.substr(0,30)+"...";
t.text = convStr(name + sAction);
if(sels[0].userData && sels[0].userData.kind)
{
var icn = mapKindToTreeIcon(sels[0].userData.kind);
if(icn!=null)
{
t.src = icn.src
t.idx = icn.idx
}
}
}
else
{
t.text = convStr(sAction);
}
}
return t;
}
function Report_showDDTooltip(e,fr,show)
{
if(!show)
{
newTooltipWidget().show(false)
_prevDDTooltip=null;
}
else
{
setReportTooltipOffset(fr);
var tooltip=Report_getDDTooltip(eventIsCtrl(e));
if(_prevDDTooltip!=null && tooltip.text == _prevDDTooltip.text)
{
newTooltipWidget().setPos(false,e);
}
else
{
_prevDDTooltip = tooltip;
if(tooltip.text == '') 
newTooltipWidget().show(false)
else
newTooltipWidget().show(true,'<nobr>'+tooltip.text+'</nobr>',tooltip.src,16,16,0,16*tooltip.idx,true,e);
}
}
}
function getFFTooltip(fr)
{
var d = fr.document;
var newDiv=d.getElementById("_ffGlobalTooltip");
if(newDiv == null)
{
newDiv = d.createElement("DIV");
newDiv.id="_ffGlobalTooltip"
var divSt=newDiv.style
divSt.zIndex=100
divSt.top=-100
divSt.left=-100
d.body.appendChild(newDiv);
}
var t =  Report_getDDTooltip(false,true);
var s = simpleImgOffset(t.src,16,16,0,16*t.idx,null,null,null,"margin-right:4px;margin-left:0px;",'top')
var str = t.text;
newDiv.innerHTML='<table class="tooltipBorder" cellspacing="0" cellpadding="0"><tr valign="middle">'+(s?'<td align="center">'+s+'</td>':'')+'<td >'+(str)+'</td></tr></table>'
return newDiv;
}
function acceptDictionaryObjects()
{
var sels = getLPDictionarySelections();
if (sels==null || sels.length==0) return false
var len = sels.length
for (var i=0; i < len; i++)
{
if ((sels[i] == null) || (sels[i].userData == null) || !(sels[i].userData.id) || (sels[i].custom)) return false
}
return true
}
_ddInsertCellsLab = "Drop here to insert cell"
_ddInsertCellSectionLab =  "Drop here to insert cell or section"
_ddInsertTableLab =  "Drop here to insert table"
_ddReplaceCellLab =  "Drop here to replace cell"
_ddReplaceSectionLab =  "Drop here to replace section"
_ddSwapColsRowsLab =  "Drop here to swap columns or rows"
_currentfeedId = null
_currentSelectedKind = null
_currentfeedIdref = null
_currentDrawnFeeds = null
function Report_AcceptDropCB(ev,lyr)
{
if (!isEnableUserRight(WS._usrInsertDuplicate)) return false
_DDTxt=_DDTxtCtrl="";
var bid=lyr.getAttribute?lyr.getAttribute("bid"):null
if (bid == null) {
return false
}
var elt = findByBID(doc,bid)
if (elt == null)
return false
var isRealDD=true;
var fromDictionaryDD=!_insideReportDD;
if(fromDictionaryDD && !acceptDictionaryObjects())
return false
var fr=getReportFrame(),d=fr.document, e=_ie?fr.event:ev, ctrl=eventIsCtrl(e);
var zone = isTableCell(elt)?dropCellZone(lyr,e,d):null
var cn = elt.className;
if(_dragElement!=null && _dragElement == elt)
{
showFeedbackElem(d,false)
return false;
}
_dropElement=elt;
_dropCellZone=zone;
_dropElementLayer=lyr;
var fWidth=_ddMargH 
var fHeight=_ddMargV 
if (isTableCell(elt))
{
if (isRealDD && e.dataTransfer) {
e.dataTransfer.dropEffect=ctrl?'copy':'move'
}
var zoneElmt = elt.parent, zcn = zoneElmt.zone, pcn = elt.parent.parent.blockType
if (pcn == "xTable" && zcn == "h-1,h-1") {
return false
}
switch(zone)
{
case _cellBottom:
fHeight=Math.min(fHeight,lyr.offsetHeight)
showFeedbackElem(d,true,
getPos(lyr).x,
getPos(lyr).y+lyr.offsetHeight-fHeight,
lyr.offsetWidth,
fHeight,
lyr,cn,zone)
break
case _cellTop:
fHeight=Math.min(fHeight,lyr.offsetHeight)
showFeedbackElem(d,true,
getPos(lyr).x,
getPos(lyr).y,
lyr.offsetWidth,
fHeight,
lyr,cn,zone)
break
case _cellLeft:
fWidth=Math.min(fWidth,lyr.offsetWidth)
showFeedbackElem(d,true,
getPos(lyr).x,
getPos(lyr).y,
fWidth,
lyr.offsetHeight,
lyr,cn,zone)
break
case _cellRight:
fWidth=Math.min(fWidth,lyr.offsetWidth)
showFeedbackElem(d,true,
getPos(lyr).x+lyr.offsetWidth-fWidth,
getPos(lyr).y,
fWidth,
lyr.offsetHeight,
lyr,cn,zone)
break
case _cellContent:
showFeedbackElem(d,true,
getPos(lyr).x+fWidth,
getPos(lyr).y+fHeight,
Math.max(0,lyr.offsetWidth-2*fWidth),
Math.max(0,lyr.offsetHeight-2*fHeight),
lyr,cn,zone)
break
default:
showFeedbackElem(d,false)
break
}
_DDTxtCtrl=(zone!=_cellContent?_ddInsertCellsLab:_ddReplaceCellLab);
_DDTxt=(zone!=_cellContent? _ddInsertCellsLab:_ddSwapColsRowsLab);
if(fromDictionaryDD) 
_DDTxt = _DDTxtCtrl;
return true
}
if(e.dataTransfer)
e.dataTransfer.dropEffect=ctrl?'copy':'move'
switch (cn)
{  
 case "reportCell":
clearDrawnFeeds()
showFeedbackElem(d,true,
getPos(lyr).x,
getPos(lyr).y,
Math.max(0,lyr.offsetWidth),
Math.max(0,lyr.offsetHeight),
lyr,cn,zone)
_DDTxtCtrl=_ddReplaceCellLab;
_DDTxt=_ddSwapColsRowsLab;
if(fromDictionaryDD) 
{
var sels = getLPDictionarySelections();
if(sels.length>1)
_DDTxt = _DDTxtCtrl = _ddInsertTableLab;
else
_DDTxt = _DDTxtCtrl = _ddReplaceCellLab;
}
return true
case "pageHeader":
case "pageFooter":
case "section":
case "body":
clearDrawnFeeds()
showFeedbackElem(d,false)
if(_dragElement!=null && !isTableCell(_dragElement))
return false;
if(fromDictionaryDD) 
_DDTxt=_DDTxtCtrl=_ddInsertTableLab
else 
_DDTxt=_DDTxtCtrl=_ddInsertCellSectionLab
return true
 case "block":
 if(_dragElement!=null && isGraph(elt)) 
 return false;
return true; 
}
return false
}
function isHeterogenousSelection(sels) {
if (!sels) return true 
return false
}
function getFeed(elt, feedId) {
var feeds = elt.feeds, feedsLen = feeds.length, feed = null 
for (var k = 0; k < feedsLen; k++) {
if (feeds[k].id == feedId) {
feed = feeds[k]
break 
}
}
return feed 
}
function clearDrawnFeeds() {
if (null == _currentDrawnFeeds) return
var l = _currentDrawnFeeds.length 
for (var i=0; i < l; i++) {
Draw.clear(_currentDrawnFeeds[i])
_currentDrawnFeeds[i] = null
}
_currentDrawnFeeds.length = 0
_currentfeedIdref = null
_currentSelectedKind = null
_currentfeedId = null
}
function Report_DropCB(ev,lyr)
{
clearDrawnFeeds() 
var bid = lyr.getAttribute?lyr.getAttribute("bid"):null
if (bid == null) return
var elt = findByBID(doc,bid);
var fr=getReportFrame(),d=fr.document, e=_ie?fr.event:ev, ctrl=eventIsCtrl(e);
var zone = isTableCell(elt)?dropCellZone(lyr,e,d):null
var cn = elt.className;
var fromDictionaryDD=!_insideReportDD;
showFeedbackElem(d,false);
setFollowObjectInfo(lyr);
var processPage="processDragNDrop";
var params=fromDictionaryDD?urlParamsNoBID():urlParams(true);
var targetBid=bid;
var isSection=false;
if(cn=="block" && isGraph(elt))
{
if (null != _currentfeedId) {
params += "&feedId="+ _currentfeedId
} 
}
else if (cn=="reportCell") 
{
var insertTable=false;
var isSingleSelection=true;
var direction=(zone==_cellBottom?"bottom":(zone==_cellTop?"top":(zone==_cellLeft?"left":(zone==_cellRight?"right":"center"))));
if(fromDictionaryDD)
{
var sels = getLPDictionarySelections();
isSingleSelection = (sels.length==1);
updateParentIdRefBid();
if(!isTableCell(elt)) 
{
if(!isSingleSelection)
insertTable=true
else if(isSectionCell(elt) && sels[0].userData && sels[0].userData.kind==_msr)
insertTable=true
} 
if(insertTable) 
{
var parentElt=getParentContainer(elt);
var parentLyr=getParentLayerFromBid(lyr, parentElt.bid);
var xybid = getClickCoordinatesInContainer(parentLyr,e);
targetBid = parentElt.bid; 
params += "&sX=" + pixelToMetrics(xybid.x,_dpi) + "&sY=" +  pixelToMetrics(xybid.y,_dpi) + "&sRow="+ xybid.row
}
}else{
var elts=getSelectedElts();
var e=elts[0];
var isSection=false;
if (e.className == 'section')
isSection=true;
else
if (e.className == 'reportCell' && !isTableCell(e)) 
{
if ((e.parent.parent.className == 'section') && e.isSectionCell)
isSection=true;
} 
}
params += "&sDir=" + direction;
}
else 
{
var xybid = getClickCoordinatesInContainer(lyr,e);
params += "&sX=" + pixelToMetrics(xybid.x,_dpi) + "&sY=" +  pixelToMetrics(xybid.y,_dpi) + "&sRow="+ xybid.row
}
params += "&sTargetBid="+convURL(targetBid);
params += "&sAction="+(ctrl?"copy":"")
params += fromDictionaryDD?("&expsAr="+convURL(getSelectedDictionaryExpsJSON())):"";
if (isSection && direction != "center")
{
params +="&removeSection=true";
checkDeleteSectionCB(processPage+_appExt+params);
return;
}
wt();
setReportUrl(processPage+_appExt+params,true);
_currentfeedId = null
}
function checkDeleteSectionCB(params)
{
hideWt();
var prtdlg= showPromptDialog("Are you sure you want to delete this section?","Confirm Delete",_promptDlgWarning,deleteSectionYesCB,deleteSectionNoCB);
prtdlg.params= params;
}
function deleteSectionYesCB()
{
wt();
setReportUrl(this.params,true);
_currentfeedId = null
}
function deleteSectionNoCB()
{
hideWt();
}
function showFeedbackElem(d,show,x,y,w,h,lyr,cn,zone)
{
var feedElem=getFeebackElem(d)
var css=feedElem.style
if (show)
{
if (_moz)
{
x-=1
y-=1
w=Math.max(0,w-2)
h=Math.max(0,h-2)
}
css.display="block"
css.top    = ""+convertY(y)+"px"
css.left   = ""+convertX(x)+"px"
css.width  = ""+(convertWidth(w)+1)+"px"
css.height = ""+(convertHeight(h)+1)+"px"
} else {
css.display="none"
}
}
function getFeebackElem(d)
{
var feedElem=d.getElementById("__DD_Feedback")
if (feedElem==null)
{
feedElem=d.createElement("DIV")
feedElem.id="__DD_Feedback"
if(feedElem.addEventListener)
{
feedElem.addEventListener("dragover",FeedDragOver,false)
feedElem.addEventListener("drop",FeedDrop,false)
}
else
{
feedElem.ondragover=FeedDragOver
feedElem.ondrop=FeedDrop
feedElem.ondragleave=FeedDragLeave
}
var css=feedElem.style
css.backgroundColor="#195FA0"
css.border="1px solid white"
css.position="absolute"
css.overflow="hidden"
css.zIndex=5000
d.body.appendChild(feedElem)
setLayerTransp(feedElem,60)
}
return feedElem
}
function FeedDragOver(ev)
{
var fr=getReportFrame();
var e=_ie?fr.event:ev, ctrl=eventIsCtrl(e);
if (e.dataTransfer) {
e.dataTransfer.dropEffect=ctrl?'copy':'move'
}
if(e.preventDefault)
e.preventDefault();
else
e.returnValue=false
e.cancelBubble=true
if(_ie)
Report_showDDTooltip(e,fr,true);
}
function FeedDrop(ev)
{
Report_DropCB(ev,_dropElementLayer);
if(ev && ev.preventDefault)
ev.preventDefault();
}
function FeedDragLeave()
{
this.style.display="none"
}
classNamesArr=new Array
codeArr=new Array
function getClassNameByLayer(l)
{
if (l.cdzClassNameCode!=null)
return classNamesArr[l.cdzClassNameCode]
else
{
var bid=getElementOrParentBid(l),elt=findByBID(window.doc,bid),className=elt?elt.className:""
var code=codeArr[className]
if (code==null)
{
code=classNamesArr.length
classNamesArr[code]=className
codeArr[className]=code
}
l.cdzClassNameCode=code
return className
}
}
function getElementOrParentBid(layer)
{
if (layer==null)
return null
var bid=layer.getAttribute ? layer.getAttribute("bid") : null
return bid ? bid : getElementOrParentBid(layer.parentNode)
}
function getElementOrParentIdref(layer)
{
if (layer==null)
return null
var idref=layer.getAttribute ? layer.getAttribute("idref") : null
return idref ? idref : getElementOrParentIdref(layer.parentNode)
}
function isLayerChart(l)
{
var bid=getElementOrParentBid(l),elt=findByBID(window.doc,bid)
return isGraphBlock(elt)
}
function getCellZone(o,e,doc,vertOnly,topOnly,bottomOnly)
{
if (!isEnableUserRight(WS._usrUseFormatting))
return _cellContent
var marg=4
var z=getZoom()/100
var fr=getParentWindow(o)
var pos=getPos(o)
var x= (eventGetX(e,fr)-convertX(pos.x) + getScrollX(fr)) / z
var y= (eventGetY(e,fr)-convertY(pos.y) + getScrollY(fr)) / z
var w=o.offsetWidth,h=o.offsetHeight
vertOnly=vertOnly?true:false
bottomOnly=bottomOnly?true:false
if (vertOnly)
{
if (topOnly) {
if (y<(marg)) return _cellTop
} else if (bottomOnly) {
if (x>(w-marg))return _cellRight
if (y>(h-marg)) return _cellBottom
} else {
if (y>(h-marg)) return _cellBottom
if (y<(marg)) return _cellTop
}
}
else
{
if (x>(w-marg))return _cellRight
if (x<(marg)) return _cellLeft
if (y<(marg)) return _cellTop
if (y>(h-marg)) return _cellBottom
}
return _cellContent
}
_triggerResizeURL=""
function triggerResizeYesCB()
{
wt()
setReportUrl(_triggerResizeURL,true,null,true) 
}
function triggerLeftResize(o,delta,w,baseUrl, h)
{
if (baseUrl=="")
return
_triggerResizeURL="processResize"+_appExt+baseUrl
_triggerResizeURL += h? ("&iH="+(h/_dpi)+"&sElemZoneH=bottom"+"&iOldH="+(o.offsetHeight/_dpi)):""
_triggerResizeURL +="&iW="+(w/_dpi)+"&sElemZoneW=left&iOldW="+(o.offsetWidth/_dpi)
_triggerResizeURL +="&pScale="+getPScale();
var bid=o.getAttribute("bid"),elt=findByBID(window.doc,bid),className=elt?elt.className:""
wt()
if (!isTableCell(elt))
{
var attach = elt.attach
if (attach)
{
if (attach.toH)
{
var posInch = elt.x / 3600 
if ((posInch + (delta/_dpi)) < 0)
{
_triggerResizeURL+="&bKeepAttach=false"
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?","Confirm resize",_promptDlgWarning,triggerResizeYesCB,null)
return
}
else
{
_triggerResizeURL+="&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
return
}
}
}
}
_triggerResizeURL += "&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
}
function triggerTopResize(o,delta,h,baseUrl,w)
{
if (baseUrl=="")
return
_triggerResizeURL="processResize"+_appExt+baseUrl
_triggerResizeURL += w? ("&iW="+(w/_dpi)+"&sElemZoneW=right"+"&iOldW="+(o.offsetWidth/_dpi)):""
_triggerResizeURL += "&iH="+(h/_dpi)+"&sElemZoneH=top&iOldH="+(o.offsetHeight/_dpi)
_triggerResizeURL +="&pScale="+getPScale();
if(o.isSection)
{
var l = o
var r = null
do
{
l= l.parentNode
r= l.getAttribute?l.getAttribute("r"):null
}
while (r==null && l.parentNode!=null)
_triggerResizeURL +="&bFirstInSection="+(r=="0");
}
var bid=o.getAttribute("bid"),elt=findByBID(window.doc,bid),className=elt?elt.className:""
wt()
if (!isTableCell(elt) )
{
var attach = elt.attach
if (attach)
{
if (attach.toV)
{
var breakAttach=false
if (o.isSection)
{
breakAttach=false
}
else
{
var posInch = elt.y / 3600 
breakAttach=(posInch + (delta/_dpi)) < 0;
}
if (breakAttach)
{
_triggerResizeURL+="&bKeepAttach=false"
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?","Confirm resize",_promptDlgWarning,triggerResizeYesCB,null)
return
}
else
{
_triggerResizeURL+="&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
return
}
}
}
}
_triggerResizeURL += "&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
}
function triggerTopLeftResize(o,baseUrl,deltaX,deltaY,w,h)
{
if (baseUrl=="")
return
_triggerResizeURL="processResize"+_appExt+baseUrl
_triggerResizeURL +="&iW="+(w/_dpi)+"&sElemZoneW=left&iOldW="+(o.offsetWidth/_dpi)
_triggerResizeURL +="&iH="+(h/_dpi)+"&sElemZoneH=top&iOldH="+(o.offsetHeight/_dpi)
_triggerResizeURL +="&pScale="+getPScale();
var bid=o.getAttribute("bid"),elt=findByBID(window.doc,bid),className=elt?elt.className:""
wt()
if (!isTableCell(elt) )
{
var attach = elt.attach
if (attach)
{
if (attach.toV)
{
var breakAttach=false
if (o.isSection)
{
breakAttach=false
}
else
{
var posInch = elt.y / 3600 
breakAttach=(posInch + (deltaY/_dpi)) < 0;
}
if (breakAttach)
{
_triggerResizeURL+="&bKeepAttach=false"
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?","Confirm resize",_promptDlgWarning,triggerResizeYesCB,null)
return
}
else
{
_triggerResizeURL+="&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
return
}
}
if (attach.toH)
{
var posInch = elt.x / 3600 
if ((posInch + (deltaX/_dpi)) < 0)
{
_triggerResizeURL+="&bKeepAttach=false"
showPromptDialog("The table or chart that you have moved is positioned relative to another block, cell or section in the report. By moving it, you will disable the default relative positioning. Do you want to continue?","Confirm resize",_promptDlgWarning,triggerResizeYesCB,null)
return
}
else
{
_triggerResizeURL+="&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
return
}
}
}
}
_triggerResizeURL += "&bKeepAttach=true"
setReportUrl(_triggerResizeURL,true,null,true) 
}
function triggerResize(o,e)
{
if ((o!=null)&&(o.mouseMoved))
{
_feedbackManager.bIsResizing = false
var bid = o.getAttribute("bid")
var z=getZoom()/100, p = null
setFollowObjectInfo(o);
if (bid) {
p=urlParamsNoBID()+"&sBid="+bid
} else {
p=urlParams(true)
}
var fr=getParentWindow(o)
if (o.downZone==_cellRight)
{
var w=o.offsetWidth, delta=absxpos(e,z,fr)-o.resizeZoneX
w=Math.max(_minResWidth, w + delta)
wt()
if (p!="")
setReportUrl("processResize"+_appExt+p+"&iW="+(w/_dpi)+"&sElemZoneW=right"+"&pScale="+getPScale(),true,null,true)
}
else if (o.downZone==_cellLeft)
{
var w=o.offsetWidth, delta=absxpos(e,z,fr)-o.resizeZoneX, w=Math.min(-_minResWidth, delta - w)
triggerLeftResize(o,delta,w,p)
}
else if (o.downZone==_cellBottom)
{
var h=o.offsetHeight, delta=absypos(e,z,fr)-o.resizeZoneY
var h=Math.max(_minResHeight, h + delta)
if (p!="")  {
wt()
setReportUrl("processResize"+_appExt+p+"&iH="+(h/_dpi)+"&iOldH="+(o.offsetHeight/_dpi)+"&sElemZoneH=bottom"+"&pScale="+getPScale(),true,null,true) 
}
}
else if (o.downZone==_cellTop)
{
var h=o.offsetHeight, delta=absypos(e,z,fr)-o.resizeZoneY
var h=Math.min(-_minResHeight, delta - h)
triggerTopResize(o,delta,h,p)
}
else if (o.downZone==_cellTopLeft)
{
var h=o.offsetHeight, deltaY=absypos(e,z,fr)-o.resizeZoneY,h=Math.min(-_minResHeight, deltaY - h)
var w=o.offsetWidth, deltaX=absxpos(e,z,fr)-o.resizeZoneX, w=Math.min(-_minResWidth, deltaX - w)
triggerTopLeftResize(o,p,deltaX,deltaY,w,h)
}
else if (o.downZone==_cellTopRight)
{
var h=o.offsetHeight, delta=absypos(e,z,fr)-o.resizeZoneY
var h=Math.min(-_minResHeight, delta - h)
var w=o.offsetWidth, delta=absxpos(e,z,fr)-o.resizeZoneX
w=Math.max(_minResWidth, w + delta)
triggerTopResize(o,delta,h,p,w)
}
else if (o.downZone==_cellBottomLeft)
{
var h=o.offsetHeight, delta=absypos(e,z,fr)-o.resizeZoneY
var h=Math.max(_minResHeight, h + delta)
var w=o.offsetWidth, delta=absxpos(e,z,fr)-o.resizeZoneX, w=Math.min(-_minResWidth, delta - w)
triggerLeftResize(o,delta,w,p,h)
}
else if (o.downZone==_cellBottomRight)
{
var h=o.offsetHeight, delta=absypos(e,z,fr)-o.resizeZoneY
var h=Math.max(_minResHeight, h + delta)
var w=o.offsetWidth, delta=absxpos(e,z,fr)-o.resizeZoneX
w=Math.max(_minResWidth, w + delta)
if (p!="") {
wt()
var url = "processResize"+_appExt+p
url += "&iH="+(h/_dpi)+"&sElemZoneH=bottom"
url += "&iW="+(w/_dpi)+"&sElemZoneW=right"
url += "&pScale="+getPScale();
setReportUrl(url,true,null,true) 
}
}
}
}
function attachSortMenu()
{
var o=this,elts=getSelectedElts()
if (elts.length==1)
{
var elt=elts[0]
if ((elt.className=="block") && isGraph(elt))
{
o.attachMenu(interactivePers.getMenu("chartVarsMenu"))
}
else
{
o.attachMenu(interactivePers.getMenu("sortSubMenu"))
}
}
}
function getSortValue(elts)
{
if ((elts.length==1)&&(getVariableQualification()!=1))
{
var elt=elts[0],ax=getTableCellAxis(elt,false)
if (ax!=-1)
{
var ppp=elt.parent.parent.parent,axis=ppp.axis[ax]
if (isInAxis(axis,elt))
{
var srt = flatFindbyId(ppp.axis[ax].sorts, getCellFormulaOrId(elt))
return srt!=null?srt.kind:0
}
}
else
{
var sect=elt.parent
if ((elt.className=="reportCell")&&(sect.className=="section"))
{
var srt=flatFindbyId(sect.axis[0].sorts,getCellFormulaOrId(elt))
return srt!=null?srt.kind:0
}
}
}
return -1
}
function createFreeCellContextMenu()
{
freeCellContextMenu=m=newMenu("freeCellContextMenu",initFreeCellContext)
addAccelerators(m)
addDrillMenu(m)
m.addSub(formatMenu,"format","Format")
m.addSeparator()
m.addSub(hyperlinkMenu,"cellHyperlinkMenu","Hyperlink")
m.addSeparator()
m.addSub(cellLayeringMenu,"cellLayering","Order")
m.addSeparator()
m.addSub(alignmentMenu,"alignment","Align")
m.addSeparator()
im=m.add("removeCell","Remove Cell","formula",1)
im.setAccelerator("Del")
}
function createInsertMenu()
{
insertMenu1=m=newMenuWidget("insertMenu1",IconMenuWidget_hideCB,insertMenuInit)
insertRow1=insertMenu1.add("insertRow1","New row",clickCB)
insertRow1.attachSubMenu(insertRowMenu)
insertCol1=insertMenu1.add("insertCol1","New column",clickCB)
insertCol1.attachSubMenu(insertColMenu)
insertMenu1.addSeparator()
brkCheck2=insertMenu1.addCheck("brkCheck2","Break",clickCB,_img+"report.gif",3*16,0,true,3*16,16)
insertFilter=insertMenu1.add("insertFilter","Filter",clickCB,_img+"report.gif",0,0,false,0,16)
insertSort=insertMenu1.add("insertSort","Sort")
insertSort.attachSubMenu(sortSubMenu)
insertCalc=insertMenu1.add("insertCalc","Calculation")
insertCalc.attachSubMenu(calcMenu)
}
function insertMenuInit()
{
var o=this,elts=getSelectedElts()
var insRowCol=false,insCalc=false
if (elts.length==1)
{
var elt=elts[0]
if (elt!=null)
{
if (elt.className=="tableCell")
{
insRowCol=true
if (elt.isAggregate!=1)
{
var ax=getTableCellAxis(elt,true)
if (ax!=-1)
{
var ppp=elt.parent.parent.parent,axis=ppp.axis[ax]
if(isInAxis(axis,elt))
{
insCalc=true
}
}
}
}
}
}
insertRow1.setDisabled(!insRowCol)
insertRow2.setDisabled(!insRowCol)
insertCol1.setDisabled(!insRowCol)
insertCol2.setDisabled(!insRowCol)
insertCalc.setDisabled(!insCalc)
if (insCalc)
{
var zone=elts[0].parent,block=zone.parent
insertCalc.attachSubMenu((zone.className=="b")&&(block.className=="crossTable")?matrixCalc:calcMenu)
}
setSort(elts)
setBreak(elts)
setRanking(elts)
setCalc(elts)
initUserRight(insertSort,_usrCreateEditSort)
initUserRight(brkCheck2,_usrCreateEditBreak)
initUserRight(insertCalc,_usrCreateEditCalculation)
initUserRight(insertFilter,_usrCreateEditReportFilter)
initUserRight(insertRow1,WS._usrInsertDuplicate)
initUserRight(insertCol1,WS._usrInsertDuplicate)
repairMenu(o)
}
function initInsertMenu()
{
var o=this,elts=getSelectedElts()
if (elts.length==1)
{
workbenchW.getAction("insertRow").setDisabled(false)
workbenchW.getAction("insertCol").setDisabled(false)
}
else
{
workbenchW.getAction("insertRow").setDisabled(true)
workbenchW.getAction("insertCol").setDisabled(true)
}
}
function insertIntoTable(elts, isAfter, isRow)
{
if ((elts == null)||(elts.length==0))
return
updateParentIdRefBid(); 
var p   = urlParamsNoBID()
frameNav("Report","processRowCol"+_appExt+p+"&sBid="+elts[0].bid+"&isReport="+isAfter+"&sDup="+isRow,true)
}
function initPageFormatMenu()
{
var o=this,elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
if (elts.length==1 && elts[0].className == 'body')
{
var icon = toolboxImg(448)
isPortrait = elts[0].parent.orientation == 'portrait'
if (isPortrait)
icon = toolboxImg(447)
workbenchW.getAction("pageOrientationMenu").changeIcon(icon)
workbenchW.getAction("pageOrientationMenu").setText(isPortrait? "Portrait":"Landscape")
workbenchW.getAction("pageOrientationPortrait").check(isPortrait)
workbenchW.getAction("pageOrientationLandscape").check(!isPortrait)
}
var report = findParentByClassName(elts[0],"report")
if(report != null)
{
var pageFormat = workbenchW.getAction("pageFormat")
if (pageFormat!=null)
{
if (typeof(report.format) != 'undefined')
{
if (report.format!="")
{
var i=0;
for (i=0;i<_pageSizeLabelArr.length;i++)
    {
if ((report.format==_pageSizeLabelArr[i])||(report.format==_pageHashSizeId.get(_pageSizeLabelArr[i])))
    break
    }
pageFormat.select(i)
}
}
}
if (report.orientation && report.orientation!=null)
{
var icon = toolboxImg(448)
isPortrait = report.orientation == 'portrait'
if (isPortrait)
icon = toolboxImg(447)
workbenchW.getAction("pageOrientationMenu").changeIcon(icon)
workbenchW.getAction("pageOrientationMenu").setText(isPortrait? "Portrait":"Landscape")
workbenchW.getAction("pageOrientationPortrait").check(isPortrait)
workbenchW.getAction("pageOrientationLandscape").check(!isPortrait)
}
}
}
function initPageMargins()
{
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var report = findParentByClassName(elts[0],"report")
if(report != null)
{
var topMargin = workbenchW.getAction("topMarginField")
if (topMargin!=null)
{
if(typeof(report.margins) != 'undefined')
topMargin.setValue(metricToUserUnit(report.margins.topMargin))
}
var leftMargin = workbenchW.getAction("leftMarginField")
if (leftMargin!=null)
{
if(typeof(report.margins) != 'undefined')
leftMargin.setValue(metricToUserUnit(report.margins.leftMargin))
}
var rightMargin = workbenchW.getAction("rightMarginField")
if (rightMargin!=null)
{
if(typeof(report.margins) != 'undefined')
rightMargin.setValue(metricToUserUnit(report.margins.rightMargin))
}
var bottomMargin = workbenchW.getAction("bottomMarginField")
if (bottomMargin!=null)
{
if(typeof(report.margins) != 'undefined')
bottomMargin.setValue(metricToUserUnit(report.margins.bottomMargin))
}
}
}
function initHeaderFooterHeight()
{
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var header = findParentByClassName(elts[0],"pageHeader")
var headerHeight = workbenchW.getAction("pageHeaderHeight")
if (headerHeight!=null && header!=null)
{
if(typeof(header.minHeight) != 'undefined')
{
headerHeight.setValue(metricToUserUnit(header.minHeight))
}
}
var footer = findParentByClassName(elts[0],"pageFooter")
var footerHeight = workbenchW.getAction("pageFooterHeight")
if (footerHeight!=null && footer!=null)
{
if(typeof(footer.minHeight) != 'undefined')
footerHeight.setValue(metricToUserUnit(footer.minHeight))
}
var report = findParentByClassName(elts[0],"report")
var pageRows = workbenchW.getAction("pageRows")
if (pageRows!=null && report!=null)
{
if(typeof(report.dataIteration) != 'undefined')
{
if(report.dataIteration.rows>WS._rowsLimitQDM)
pageRows.setValue(WS._rowsLimitQDM)
else
pageRows.setValue(report.dataIteration.rows)
}
}
var pageColumn = workbenchW.getAction("pageColumn")
if (pageColumn!=null && report!=null)
{
if(typeof(report.dataIteration) != 'undefined')
{
if(report.dataIteration.columns>WS._columnsLimitQDM)
pageRows.setValue(WS._columnsLimitQDM)
else
pageColumn.setValue(report.dataIteration.columns)
}
}
}
function setPageFormat()
{
initPageFormatMenu()
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var parent = findParentByClassName(elts[0],"report")
workbenchW.getAction("displayPageHeader").check((parent.showHeader == true)? true:false)
workbenchW.getAction("displayPageFooter").check((parent.showFooter == true)? true:false)
workbenchW.getAction("pageHeaderHeight").setDisabled((parent.showHeader == true)? false:true)
workbenchW.getAction("pageFooterHeight").setDisabled((parent.showFooter == true)? false:true)
parent = findParentByClassName(elts[0],"doc")
workbenchW.getAction("pageRows").setDisabled((parent.pageMode == 'QUICK_DISPLAY')? false:true)
workbenchW.getAction("pageColumn").setDisabled((parent.pageMode == 'QUICK_DISPLAY')? false:true)
}
function formatPage(key, value)
{
if (!checkPageSetupIntegrity(key,value))
{
            showAlertDialog("The value you entered conflicts with the page settings (header and footer height, margins, page size, and orientation) of this report.", "Web Intelligence", 1,formatPageCB)
}
else
{
wt()
var p = urlParams(true)
if (p != "")  
frameNav("Report", "processFormatPage" + _appExt + p + "&general="+encodeURIComponent("{\""+key+"\":\""+value+"\"}"), true);
}
}
function checkPageSetupIntegrity(key,value)
{
var tolerance=1000;
var bContinue=true;
var orientation=doc.children[getReportIdxFromId(DS.iReportID)].orientation;
if (key=="pageOrien") 
{
if (value==0) 
{
var pageHeight=doc.children[getReportIdxFromId(DS.iReportID)].pageWidth;
var pageWidth=doc.children[getReportIdxFromId(DS.iReportID)].pageHeight;
}
else
{
var pageHeight=doc.children[getReportIdxFromId(DS.iReportID)].pageHeight;
var pageWidth=doc.children[getReportIdxFromId(DS.iReportID)].pageWidth;
}
}
else
{
if (orientation=="landscape")
{
var pageHeight=doc.children[getReportIdxFromId(DS.iReportID)].pageWidth;
var pageWidth=doc.children[getReportIdxFromId(DS.iReportID)].pageHeight;
}
else
{
var pageHeight=doc.children[getReportIdxFromId(DS.iReportID)].pageHeight;
var pageWidth=doc.children[getReportIdxFromId(DS.iReportID)].pageWidth;
}
}
var top=doc.children[getReportIdxFromId(DS.iReportID)].margins.topMargin;
var bottom=doc.children[getReportIdxFromId(DS.iReportID)].margins.bottomMargin;
var left=doc.children[getReportIdxFromId(DS.iReportID)].margins.leftMargin;
var right=doc.children[getReportIdxFromId(DS.iReportID)].margins.rightMargin;
var headerHeight=doc.children[getReportIdxFromId(DS.iReportID)].children[0].minHeight; 
var footerHeight=doc.children[getReportIdxFromId(DS.iReportID)].children[2].minHeight; 
var heightTemp=top+bottom+headerHeight+footerHeight;
var widthTemp=left+right;
if (key=="topMargin")
{
if (pageHeight - headerHeight -footerHeight - value - bottom < tolerance)
bContinue=false;
}
if (key=="bottomMargin")
{
if (pageHeight - headerHeight -footerHeight - value - top < tolerance)
bContinue=false;
}
if (key=="leftMargin") 
{
if (pageWidth-value-right<tolerance)
bContinue=false;
}
if (key=="rightMargin") 
{
if (pageWidth-value-left<tolerance)
bContinue=false;
}
if (key=="pageOrien") 
{
if (pageHeight-heightTemp<tolerance)
bContinue=false;
if (pageWidth-widthTemp<tolerance)
bContinue=false;
}
return bContinue;
}
function formatPageCB()
{
    initPageMargins();
}
function formatPageSize(name, width, height)
{
wt()
var p = urlParams(true)
if (p != "")  
frameNav("Report", "processFormatPage" + _appExt + p + "&general="+encodeURIComponent("{\"name\":\""+name+"\", \"width\":\""+width+"\", \"height\":\""+height+"\"}"), true);
}
function hideElementHeaderFooter()
{
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
if (elts.length==1)
{
if(elts[0].className == "pageHeader")
formatPage("showHeader",0)
else if(elts[0].className == "pageFooter")
formatPage("showFooter",0)
}
}
function setClearCell()
{
var o=this,elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
{
workbenchW.getAction("clearCellMenu").setDisabled(true)
return
}
var type = isCompositeSelection(elts)
if (type.sameBlock == true && type.className == 'reportCell')
{
workbenchW.getAction("clearCellMenu").setDisabled(false)
workbenchW.getAction("clearContents").setDisabled(true)
workbenchW.getAction("clearConditionalFormatting").setDisabled(true)
var eltsLen = elts.length
for (var i = 0; i < eltsLen; i++) 
{
if(elts[i].formula != "")
workbenchW.getAction("clearContents").setDisabled(false)
if(typeof(elts[i].alerts) != 'undefined')
workbenchW.getAction("clearConditionalFormatting").setDisabled(false) 
}
}
else
workbenchW.getAction("clearCellMenu").setDisabled(true)
}
function clearCell(type)
{
wt()
switch (type)
{
case "conditionnal":
if ( elt.alerts )
{
for(var i=0; i<elt.alerts.length; i++)
{ 
if (elt.alerts[i].id == id)
return true;
}
}
break;
case "content":
clearContents()
break;
}
}
function createCellLayeringMenu()
{
cellLayeringMenu=m=newMenu("cellLayeringMenu",initLayeringMenu)
m.add("frontMenuItem","Bring to Front","layering",1)
m.add("backMenuItem","Send to Back","layering",2)
m.add("forwardMenuItem","Bring Forward","layering",3)
m.add("backwardsMenuItem","Send Backward","layering",4)
}
function tabEdit_hide()
{
var tabEdit=document.getElementById(_editTabWidget)
if (tabEdit)
{
tabEdit.style.display="none"
tabEdit.isDisplayed=false
}
}
function tabEdit_lostFocus()
{
var tabEdit=document.getElementById(_editTabWidget)
if(tabEdit && tabEdit.isDisplayed)
{
if(_submitEditInPlace)
tabEdit_submit()
tabEdit_hide()
}
}
function tabEdit_mouseDown(e)
{
if (_ie)
e=event
e.cancelBubble=true
}
function tabEdit_submit()
{
var tabEdit=document.getElementById(_editTabWidget)
var newName=tabEdit.value
if (newName!=___oldTabEdirValue) 
{
if (newName.length==0)
{
setTimeout('showAlertDialog("The name must contain at least one character.","Web Intelligence",0)',1);
return
}
if ((trim(newName)).length==0)
{
setTimeout('showAlertDialog("Report names of more than 31 characters or with : \\ / ? * [ ] characters or blanks are invalid in Microsoft Excel. This may cause an error if you save this document as Excel.","Report name",0)',1);
}
if(_showQueryPanel)
setTimeout("delayedRenameDPTabWidget()",1)
else
renameReport(newName);
}
}
function tabEdit_keyDown(e)
{
if (_ie)
e=event
var key=_ie?e.keyCode:e.which
if (key==13) 
{
tabEdit_lostFocus()
}
else if (key==27) 
{
_submitEditInPlace= false;
tabEdit_hide()
}
eventCancelBubble(e);
}
function updateIsQPModified(b)
{
_isQPModified = b;
}
function searchClassName(elt,cn)
{
if (elt==null)
return null
if (elt.className==cn)
return elt
return searchClassName(elt.parent,cn)
}
function getLayerByIdRef(idref, l)
{
if (l==null)
{
var rwin = getReportFrame()
if (rwin==null)
return null
else l=rwin.document.body
}
if (l==null) return null;
var currIdRef=l.getAttribute?l.getAttribute("idref"):null,n=l.childNodes
if (currIdRef==idref)
return l
if (n!=null)
{
var count=n.length
for (var i=0;i<count;i++)
{
var subL = getLayerByIdRef(idref, n[i])
if (subL)
return subL
}
}
return null;
}
function getLayerByBid(bid, l)
{
if (l==null)
{
var rwin = getReportFrame()
if (rwin==null)
return null
else l=rwin.document.body
}
if (l==null) return null;
var currBid = l.getAttribute?l.getAttribute("bid"):null, n=l.childNodes
if (currBid == bid)return l
if (n != null)
{
var count=n.length
for (var i=0; i < count; i++)
{
var subL = getLayerByBid(bid, n[i])
if (subL)
return subL
}
}
return null;
}
function getParentLayerFromBid(l,bid,isSect)
{
if (l==null || bid==null)
return null
var currBid=l.getAttribute?l.getAttribute("bid"):null
if (currBid==bid)
{
return l
}
else
{
l = getParentLayerFromBid(l.parentNode,bid, isSect)
if (l!=null)
return l
}
return null
}
function updateContainerIdRefBid(bGetSection)
{
if(_curIdRef == null) return;
var parentBid=null,elts=getSelectedElts(),isSect=false
var sectionBodyBid=null, sectionBodyElt=null;
if (elts&&elts[0])
{
var elt = elts[0];
var parentElt=searchClassName(elt,"section")
if (parentElt==null)
parentElt=searchClassName(elt,"body")
else
{
isSect=true;
if(!bGetSection) 
{
sectionBodyElt= searchClassName(elt,"bag");
sectionBodyBid = sectionBodyElt?sectionBodyElt.bid:null;
}
}
if (parentElt)parentBid=parentElt.bid
}
var curL=getLayerByIdRef(_curIdRef)
var containerL= getParentLayerFromBid(curL,parentBid,isSect);
var newUIRef = containerL?getUIRefFromLayer(containerL,sectionBodyBid):null;
setFollowObjectInfo(containerL,{curUIRef:newUIRef});
}
function updateParentIdRefBid()
{
if(_curIdRef == null) return;
var curL=getLayerByIdRef(_curIdRef);
var newUIRef = curL?getUIRefFromLayer(curL.parentNode):null;
setFollowObjectInfo(curL,{curUIRef:newUIRef});
}
function updateParentIdRefBidForFilter()
{
var elts=getSelectedElts()
if (elts && elts[0])
{
var elt=elts[0], cn=elt.className
if(cn=="body")
{
var body = bidTable.get(elt.bid);
setFollowObjectInfo(body?body[0]:null); 
}
else if (cn=="section")
{
updateContainerIdRefBid(true);
}
else
{
updateParentIdRefBid();
}
}
}
_feedbackManager = feedbackManager()
function interactiveDelayedWomLoadCB(rWin, rDoc)
{
if (_webKit)
{
rDoc.body.onselectstart=reportBodyMouseDown
}
rWin.cm=rWin.oldCm
rDoc.onmousedown=releaseSelection
rDoc.body.onmouseout=mouseOut
rDoc.onmousemove=globmmove
rDoc.onmouseup=globmup
 if(_ffDD)
 rDoc.body.draggable=true;
 if( _webKit)
 rDoc.body.draggable=false;
_feedbackManager.init(rWin, rDoc, getZoom()/100, _dpi);
Draw.init()
isWOMLoaded=true
restoreSelection()
if (_globalWOMCallback!=null)
_globalWOMCallback()
if (_setFocusToViewer)
{
_setFocusToViewer=false
safeSetFocus(rDoc)
}
rDoc.oncontextmenu=contextMenu
_lastX=0
_lastY=0
_lastLayer=null
_lastElt=null
_row=0
_baseColor=null
_containsChart=false
}
function copyCutPasteCB(action, noCoords)
{
if (!isEnableUserRight(WS._usrInsertDuplicate))
return
action = action?action:this.id;
var fr=getReportFrame()
switch (action) {
case "copy" :
case "cut" :
_srcReport = DS.iReportID
for( var i = 0; i < DS.arrReports.length; i++)
_arrayReports[DS.arrReports[i].reportID] = 0
var elts = getSelectedElts()
if (elts.length < 1) return
switch (elts[0].className) {
case "cell" :
case "block" :
case "reportCell" :
var elt = elts[0]
break
case "tableCell" :
var elt = elts[0].parent.parent.parent
break
default :
return
}
_targetCopyBid=elt.parent.bid
_canPaste=true
_paste = true
if(action == "cut")
selectSingle(fr, _targetCopyBid)
if ((window._copyX==null)||(window._copyY==null)||(window._copyRow==null))
{
window._copyX = toUserUnit(1, true)
window._copyY = toUserUnit(1, true)
window._copyRow = 0;
}
_setFocusToViewer=true
_copyElemCN = elt.className
var p=urlParamsNoBID()
p += "&sBid="+elt.bid
break
case "paste" :
if ((_copyElemCN != null) && (_targetCopyBid != null) && _canPaste) {
_setFocusToViewer=true
var targetReport = DS.iReportID
var isSection = false 
if (targetReport == _srcReport)
_changeReport = false
else
_changeReport = true
if(_arrayReports[targetReport] == null)
 _arrayReports[targetReport] = 0
if(noCoords)
_arrayReports[targetReport]++ 
else
{
elts = getSelectedElts()
if (_lastLayer != null)
{
var bid=_lastLayer.getAttribute?_lastLayer.getAttribute("bid"):null
var elt=findByBID(doc,bid);
var targetBid=bid;
var url="";
var pageContainer = getPageContainer();
var z=getZoom()/100;
var fr=getReportFrame();
var parentElt=null,parentLyr=null;
var isChartZone = (elt.className=="chartArea");
var isSection   = isSectionFn(elt);
if(isTableCell(elt) 
|| isFreeCell(elt) 
|| isSectionCell(elt) || isCellInSection(elt) 
|| isChartZone) 
{
parentElt=getParentContainer(elt);
parentLyr=getParentLayerFromBid(_lastLayer, parentElt.bid, isSection);
}
if(parentLyr!=null)
{
_insertCursorX = _insertCursorParentX
_insertCursorY = _insertCursorParentY
_insertRow = _insertParentRow
}
if(isTableCell(elt) && _copyElemCN=="reportCell")
{
parentElt=null;
}
if(parentElt!=null) {
_targetCopyBid = parentElt.bid;
} else {
_targetCopyBid = targetBid
}
}
}
updateContainerIdRefBid(); 
var p=urlParamsNoBID()
p += "&sTargetBid="+escape(_targetCopyBid) + "&sX=" + _insertCursorX + "&sY=" + _insertCursorY  + "&sDpi=" + _dpi 
p += "&sClickedPaste=" + noCoords + "&sPaste=" + _arrayReports[targetReport] + "&isReport=" + _changeReport + "&sRow=" + _insertRow
}
break
default:
return
}
if (p) {
var url = _root + "processCopyPasteElement"+_appExt
url += p + "&sAction=" + action
wt()
setReportUrl(url, true)
}
}
function resetCopyCutPaste()
{
_paste=false;
_canPaste=false;
_copyElemCN=null;
_targetCopyBid = null;
}
function setSwapMenu(elts,w)
{
var bid=null
if (elts.length==0)
{
w.setDisabled(true)
return
}
if (elts.length==1)
{
var elt=elts[0]
if ((elt!=null)&&(elt.className=="block"))
{
switch(elt.block.blockType)
{
case 9:
case 17:
case 26:
case 27:
case 34:
case 35:
w.setDisabled(false)
break
default:
w.setDisabled(true)
break
}
return
}
}
    var eltsLen = elts.length
    for (var i = 0; i < eltsLen; i++)
{
var elt=elts[i]
if (elt.className=="tableCell")
{
var block=elt.parent.parent
if (block.className!="crossTable")
{
w.setDisabled(true)
return
}
if (bid==null)
bid=block.parent.bid
else if (bid!=block.parent.bid)
{
w.setDisabled(true)
return
}
}
else
{
w.setDisabled(true)
return
}
}
w.setDisabled(false)
}
function axisHasBreaks(axis)
{
if(axis.brks)
{
return (axis.brks.length > 0)
}
return false;
}
function setManageBreaks(elts,w)
{
w.setDisabled(!allowManageBreaks(elts))
}
function allowManageBreaks(elts)
{
if((elts == null ) ||(elts.length == 0 ) ||(!isBlock(elts[0]) && (!isMultiTableCellInSameTable(elts))))
{
return false;
}
var eltsLen = elts.length
for (var i = 0; i < eltsLen; i++)
{
var elt=elts[i]
if (!isTableCell(elt) && !isBlock(elt)) 
{
return false
}
if( isTableCell(elt) && (elt.parent.parent.blockType == "form"))
{
return false
}
}
return true
}
function setSetSectionMenu(elts,w)
{
var isDisabled=true
if ((elts.length==1)&&(elts[0].qualification!="_msr")&&(getTableCellAxis(elts[0],false)!=-1))
{
var elt=elts[0],ax=getTableCellAxis(elt,false)
var pb=elt.parent.parent.parent,axis=pb.axis[ax]
if (isInAxis(axis,elt)&& (pb.block.nDimDetails > 0)) 
isDisabled=false
}
w.setDisabled(isDisabled)
}
function setCalcMenu(elts,w)
{
var e=getCalcStatus(elts)
w.setDisabled(!e)
if (e)
{
var zone=elts[0].parent,block=zone.parent
w.attachSubMenu((zone.className=="b")&&(block.className=="crossTable")?matrixCalc:calcMenu)
}
}
function setInsert(elts,w)
{
if (elts==null)
return
var e=(elts.length==1)
if (e)
e=(isTableCell(elts[0]))
w.setDisabled(!e)
}
function initHyperlinkMenu()
{
var o=this,elts=getSelectedElts()
if (elts == null) return
if (elts.length==1 && elts[0].className=='reportCell')
{
var isWebLink = (elts[0].contType=='weblink');
if (workbenchW.getAction("insertLinkMenu") != null) {
workbenchW.getAction("addHyperlink").setDisabled(isWebLink);
workbenchW.getAction("addHyperlink").check(false);
workbenchW.getAction("editHyperlink").setDisabled(!isWebLink);
workbenchW.getAction("editHyperlink").check(false);
workbenchW.getAction("removeHyperlink").setDisabled(!isWebLink);
workbenchW.getAction("removeHyperlink").check(false);
workbenchW.getAction("setContentAsHyperlink").check(isWebLink);
}
if( workbenchW.getAction("docLinkMenu") != null)
{
var addDoclink = workbenchW.getAction("addDoclink")
if (addDoclink) {
addDoclink.setDisabled(isWebLink);
addDoclink.check(false);
}
workbenchW.getAction("editDoclink").setDisabled(!isWebLink);
workbenchW.getAction("editDoclink").check(false);
workbenchW.getAction("removeDoclink").setDisabled(!isWebLink);
workbenchW.getAction("removeDoclink").check(false);
}
}
}
function setHyperlinkMenu()
{
var o=this,elts=getSelectedElts()
if (elts == null) return
if (elts.length==1 && elts[0].className=='reportCell')
{
workbenchW.getAction("docLinkMenu").setDisabled(false);
workbenchW.getAction("insertLinkMenu").setDisabled(false);
}
else
{
workbenchW.getAction("docLinkMenu").setDisabled(true);
workbenchW.getAction("insertLinkMenu").setDisabled(true);
}
}
function setLayering(elts,w)
{
if ( (elts == null) || (elts.length==0) || 
((elts != null) && (elts.length > 1) && !isMultiTableCellInSameTable(elts)) || 
((elts != null) && (elts.length ==1) && (elts[0].className!='tableCell') && (elts[0].className!='cell') && (elts[0].className!='block') && (elts[0].className!='reportCell')) )
{
w.setDisabled(true)
return
}
w.setDisabled(false)
}
function showMenuRemove(menuItemRemove)
{
var elts=getSelectedElts();
var rc=new Object;
rc.bEnableRow=true;
rc.bEnableCol=true;
for (var i=0; i<elts.length; i++)
{
var r=determineRemoveRowCol(elts[i]);
rc.bEnableRow = rc.bEnableRow && !r.bRow 
rc.bEnableCol = rc.bEnableCol && !r.bCol 
}
return rc;
}
function initRowMenu()
{
var o=this,elts=getSelectedElts()
if (elts.length==1)
{
workbenchW.getAction("insertRowAbove").setDisabled(false);
workbenchW.getAction("insertRowBelow").setDisabled(false);
}
else
{
workbenchW.getAction("insertRowAbove").setDisabled(true);
workbenchW.getAction("insertRowBelow").setDisabled(true);
}
}
function initColMenu()
{
var o=this,elts=getSelectedElts()
if (elts.length==1)
{
workbenchW.getAction("insertColLeft").setDisabled(false);
workbenchW.getAction("insertColRight").setDisabled(false);
}
else
{
workbenchW.getAction("insertColLeft").setDisabled(true);
workbenchW.getAction("insertColRight").setDisabled(true);
}
}
function initBreakMenu()
{
var elts=getSelectedElts()
workbenchW.getAction("breakProperties").setDisabled(false)
var ppp=elts[0].parent.parent.parent
_breakBlockBID=ppp.bid
var rc=getBreakStatus(elts)
if (rc!=null)
{
workbenchW.getAction("addBreak").setDisplay(!rc.hasBreak);
workbenchW.getAction("addBreak").setDisabled(!rc.brkAllowed);
workbenchW.getAction("removeBreak").setDisplay(rc.hasBreak);
workbenchW.getAction("removeBreak").setDisabled(!rc.brkAllowed)
}
else
{
workbenchW.getAction("addBreak").setDisabled(true);
workbenchW.getAction("removeBreak").setDisabled(true);
}
}
function initChartVarsMenu()
{
var o=this,elts=getSelectedElts()
if (elts.length <= 0)
return
var elt=elts[0]
if (!elt||(elt.className!="block"))
return
var mlen=o.items.length,axis=elt.axis,k=0,hasSorts=false
for (var i=3;i<6;i++)
{
var ax=axis[i].vars
var names=axis[i].names
if (axis[i].sorts!=null)
hasSorts=true
var axLen = ax.length
for (var j = 0; j < axLen; j++)
{
var exprID=ax[j],item=null
if (k < mlen) {
item=o.getItem(k)
} else {
item=o.addSub(interactivePers.getMenu("sortSubMenu"),"sort"+k,"a")
o["sort"+k] = item;
}
item.show(true)
item.setText(names[j])
item.sortAxisIndex=i
item.sortIndexInAxis=j
item.exprID=ax[j]
item.isChart=true
if (k==0)
item.setDisabled(false)
k++
}
}
mlen=o.items.length
for (var i=k;i<(mlen-3);i++)
o.getItem(i).show(false)
if (k==0)
{
var item=o.getItem(0)
item.setDisabled(true)
item.setText("Empty")
}
var rmItem=o.items[mlen-1]
if (rmItem.id != "sortProps")
{
o.addSeparator()
o.add("removeSorts","Remove Sorts")
o.add("sortProps","Properties")
}
workbenchW.getAction("removeSorts").setDisabled(!hasSorts)
}
function initSortSubMenu()
{
var o=this,elts=getSelectedElts(),srt=null,srtArr=null,canCustOrder=false,iconDelta=0,par=o.par,expID=null,isChart=false
if (elts.length==1)
{
var elt=elts[0], sect = null
isChart= (par && par.isChart) 
if (isChart) 
{
srt=flatFindbyId(elt.axis[par.sortAxisIndex].sorts,par.exprID)
srt=srt?srt.kind:0
crdr=elt.axis[par.sortAxisIndex].crdr
if (crdr) {
for (var i=0; i < crdr.length; i++) {
if (crdr[i] == par.exprID) {
canCustOrder = true
break
}
}
}
expID=par.exprID
} else {
expID=getCellFormulaOrId(elt)
var type = elt.type
var qualif = getVariableQualification()
canCustOrder = !((qualif == _msr) || ((type == 2) && (qualif != _linkDim)))
if (qualif != _cls) {
srt=getSortValue(elts)
ax=getTableCellAxis(elt,false)
if (ax != -1) {
var ppp=elt.parent.parent.parent,axis=ppp.axis[ax]
srtArr=axis.sorts
} else { 
sect = (elt.className=="section")?elt : elt.parent
axis=sect.axis[0]
if (elt.className=="section")
expID=axis.vars[0]
srtArr=axis.sorts
if (srtArr)
{
var firstSrt=srtArr[0]
if (firstSrt&&firstSrt.id == expID)
srt=firstSrt.kind
else
srt=0
}
else
srt=0
}
}
}
iconDelta = isCustomSort(expID)? 13 : 0
}
for (var i=0;i<3;i++) 
{
if (i>0) 
{
this.getItem(i).setIcon((i + iconDelta) * 16, null, (i + iconDelta) * 16) 
}
this.getItem(i).check(i==srt)
}
workbenchW.getAction("removeSorts").setDisplay(!isChart);
workbenchW.getAction("removeSorts").setDisplay(!isChart);
workbenchW.getAction("sortProps").setDisplay(!isChart);
workbenchW.getAction("customSort").setDisabled(!(canCustOrder && !isLinkedMember(expID)));
workbenchW.getAction("removeSorts").setDisabled(srtArr==null);
workbenchW.getAction("sortProps").setDisabled(srt==null || (sect != null));
}
function getAttFromElts(att,elt,show)
{
var ret=null
var defined=true
var firstVal=null
var allNull=true
if (elt==null)
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
var eltLen = elt.length
if (!eltLen && (eltLen != 0)) { 
ret = elt[att[0]][att[1]]
return {ret:ret,firstVal:firstVal,defined:(ret != null),allNull:false}
}
for (var i = 0; i < eltLen; i++)
{
var e=elt[i]
firstVal=getValFromArray(e,att)
if (e&&att&&(firstVal!=null))
{
allNull=false
break
}
}
if (allNull)
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
allNull=false
  var eltLen = elt.length
  for (var i = 0; i < eltLen; i++)
{
var isNull=false,val=null
if ((elt==null)||(elt[i]==null)||(att==null))
{
isNull=true
}
else
{
var oldAtt=att
if (elt.className=="block")
att=".block"+att
val=getValFromArray(elt[i],att)
att=oldAtt
}
if ((val!=null)&&(ret==null)&&i==0)
ret=val
else
{
if (ret!=val)
{
ret=null
defined=false
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
}
}
}
defined=true
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
}
function get2AttsFromElts(att1, att2, elt,show)
{
var ret=null
var defined=true
var firstVal=null
var allNull=true
if (elt==null)
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
  var eltLen = elt.length
  for (var i = 0; i < eltLen; i++)
{
var e=elt[i]
firstVal=getValFromArray(e,att1)
if (e && att1 && (firstVal!=null))
{
allNull=false
break
}
firstVal=getValFromArray(e,att2)
if (e && att2 && (firstVal!=null))
{
allNull=false
break
}
}
if (allNull)
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
allNull=false
  var eltLen = elt.length
  for (var i = 0; i < eltLen; i++)
{
var isNull=false,val=null
if ((elt==null) || (elt[i]==null) || ((att1==null) && (att2==null)))
{
isNull=true
}
else
{
var oldAtt=att1
if (elt.className=="block")
att1=".block"+att1
val1=getValFromArray(elt[i],att1)
att1=oldAtt
var oldAtt=att2
if (elt.className=="block")
att2=".block"+att2
val2=getValFromArray(elt[i],att2)
att2=oldAtt
val = (val1!=null)? val1 : val2
}
if ((ret==null) && (val!=null))
ret=val
else
{
if ((ret!=null) && (ret != val))
{
ret=null
defined=false
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
}
}
}
defined=true
return {ret:ret,firstVal:firstVal,defined:defined,allNull:allNull}
}
function getValFromArray(obj,arrAtt)
{
if (obj==null)
return null
var len=arrAtt.length
for (var j=0; j<len; j++)
{
obj=obj[arrAtt[j]]
if (obj==null)
{
return null
}
}
return obj;
}
function propsToJsonForColorAssignmt_sav(color)
{
var propsStruct = new Hash;
var sPropsStruct = new Object
sPropsStruct.dataCtxtElems = _currColorAsmChartZoneInfo.v
sPropsStruct.sColorElems = color
propsStruct.set("sPropsStruct", sPropsStruct);
return propsStruct.toJSON();
}
function propsToJsonForColorAssignmt(color)
{
var propsStruct = new Hash;
var arr = new Array;
var tab =  _currColorAsmChartZoneInfo.v
for(var i=0;i<tab.length;i++)
{
var len = arr.length
arr[len] = new Object
arr[len].id  = tab[i].id
arr[len].v  = tab[i].v
}
propsStruct.set("dataCtxtElems",arr);
propsStruct.set("sColorElems", color);
return propsStruct.toJSON();
}
function formatTxt(s)
{
var elts=getSelectedElts(), l = elts.length;
var p= l>0 ? urlParams(false) : urlParamsNoBID()
if (p=="") return
if (_containsChart) {
if(null == _currColorAsmChartZoneInfo)
{
var aid = (null != _areaDefid)?_areaDefid:"chartBlock"
p += "&areaId=" + aid
p += "&sBid=" + getChartBid()
wt();
setReportUrl(_root + "processFormatChartToolbar"+_appExt+p+s,true);
}
else 
{
var bid = getChartBid();
if(_currColorAsmChartZoneInfo.v && (_currColorAsmChartZoneInfo.v.length > 0) && !isGhost(bid))
{
var sPropsStruct = propsToJsonForColorAssignmt(s)
p += "&sBid=" + bid;
wt();
setReportUrl(_root + "processColorAssignment"+_appExt+p+"&sPropsStruct="+encodeURIComponent(sPropsStruct),true);
}
}
} else {
wt();
setReportUrl(_root + "processFormatToolbar"+_appExt+p+s,true);
}
}
function setFontSize(elt,dir)
{
wt();
var elts=getSelectedElts(), l = elts.length;
var p= l>0 ? urlParams(false) : urlParamsNoBID()
if (p=="") return
var size;
var res=getAttFromElts(["font","size"],elt);
var fontSize = _currWorkbench.getAction("fontSize");
if (dir == "up"){ 
if((res.ret >= 1) && (res.ret <fntSizes[0])){
res.ret++;
fontSize.selectItem(null);
if (res.ret >= 1){
_currWorkbench.getAction("decreaseFontSize").setDisabled(false);
}
p += "&s=" + res.ret;
}else if((res.ret >=fntSizes[0]) && (res.ret < fntSizes[fntSizes.length-1])){
for (var i=0; i<fntSizes.length;i++){
size = fntSizes[i];
if (size > res.ret){
break;
}
}
p += "&s=" + size;
}else if((res.ret >= fntSizes[fntSizes.length-1]) && (res.ret <= 1638)){
fontSize.selectItem(null);
res.ret = res.ret + 10;
p += "&s=" + res.ret;
}else if (res.ret >= 1638){
_currWorkbench.getAction("increaseFontSize").setDisabled(true);
}
}else if(dir == "down"){ 
if((res.ret > 1) && (res.ret <=fntSizes[0])){
res.ret--;
fontSize.selectItem(null);
if (res.ret == 1){
_currWorkbench.getAction("decreaseFontSize").setDisabled(true);
}
p += "&s=" + res.ret;
}else if((res.ret >fntSizes[0]) && (res.ret <= fntSizes[fntSizes.length-1])){
for (var i=fntSizes.length-1; i>=0;i--){
size = fntSizes[i];
if (size < res.ret){
size = fntSizes[i];
break;
}
}
p += "&s=" + size;
}else if(res.ret > fntSizes[fntSizes.length-1]){
fontSize.selectItem(null);
if (res.ret < 1638){
_currWorkbench.getAction("increaseFontSize").setDisabled(false);
}
res.ret = res.ret - 10;
p += "&s=" + res.ret;
}
}
if (_areaDefid) {
p += "&areaId=" + _areaDefid
p += "&sBid=" + _chartBid
setReportUrl(_root + "processFormatChartToolbar"+_appExt+p,true);
} else {
setReportUrl(_root + "processFormatToolbar"+_appExt+p,true);
}
}
function processMergeOrSplit (mergeProcess, fctMergeOrSplitEndOk, fctMergeOrSplitCancel)
{
elts=getSelectedElts()
var tmpValue = ""
if (mergeProcess)
{
for (var i=0;i<elts.length;i++)
{
var e=elts[i]
if (e.formula==null)
continue;
if (tmpValue=="" && e.formula != "")
tmpValue=e.formula
if (tmpValue!="" && e.formula != "" && tmpValue != e.formula)
{
showPromptDialog("The selected cells contain multiple values. Merging will keep the contents of the first selected cell only. Are you sure you want to merge the cells?","Confirm Cell Merge",1,fctMergeOrSplitEndOk,fctMergeOrSplitCancel)
return
}
}
}
if (fctMergeOrSplitEndOk)
fctMergeOrSplitEndOk ()
}
function processMergeOrSplitEnd ()
{
var mergeOrSplit = workbenchW.getAction("mergeOrSplit");
if(mergeOrSplit.isChecked())
updateParentIdRefBid();
formatTxt("&bMerge=" + (mergeOrSplit.isChecked()));
}
function processMergeOrSplitCancel ()
{
selectionChanged(false)
}
function setRemoveAllBreaks(elts,w)
{
if((elts == null ) ||(elts.length == 0 ) ||(!isBlock(elts[0]) && (!isMultiTableCellInSameTable(elts))))
{
w.setDisabled(true);
return
}
var elt = elts[0];
var block = null;
var hasBreaks = false;
if (isTableCell(elt))
{
block = elt.parent.parent
}
else if(isBlock(elt))
{
block = elt;
}
if(block != null)
{
for(var i=0;i<block.axis.length;i++)
{
hasBreaks = axisHasBreaks(block.axis[i])
if(hasBreaks)
break;
}
}
w.setDisabled(!hasBreaks);
}
function axisHasBreaks(axis)
{
if(axis.brks)
{
return (axis.brks.length > 0)
}
return false;
}
function cellHasBreak(elt)
{
_isBHCheck = false
_isBFCheck = false
_isBHHCheck = false
_isBHFCheck = false
_isBVHCheck = false
_isBVFCheck = false
var tableCell = new Object
tableCell.elt = elt
tableCell.hasBreak = false
tableCell.hasHBreak = false
tableCell.hasVBreak = false
if (isTableCell(elt))
{
var eltFID = getTableCellFormulaID(elt)
if(eltFID != null && (elt.parent.zone == 'b'|| elt.parent.zone == 'b,b'))
{
var axis = elt.parent.parent.axis;
if(axis && (axis.length > 0))
{
for (var j=0;j<axis.length;j++)
{
if (axis[j].brks && (axis[j].brks.length > 0))
{
for (var i=0;i<axis[j].brks.length;i++)
{
if (eltFID.id == axis[j].brks[i].id)
{
_isBHCheck = axis[j].brks[i].isHeaderPresent
_isBFCheck = axis[j].brks[i].isFooterPresent
tableCell.hasBreak = true
return tableCell
}
}
}
}
return tableCell
}
else return tableCell;
}
else if(eltFID != null && (elt.parent.zone == "b,h-1" || elt.parent.zone == "h-1,b"))
{
var axis = elt.parent.parent.axis;
if(axis && (axis.length > 0))
{
for (var j=0;j<axis.length;j++)
{
if (axis[j].brks && (axis[j].brks.length > 0))
{
for (var i=0;i<axis[j].brks.length;i++)
{
if (axis[j].name == "row")
{
if (eltFID.id == axis[j].brks[i].id)
{
_isBHHCheck = axis[j].brks[i].isHeaderPresent
_isBHFCheck = axis[j].brks[i].isFooterPresent
tableCell.hasHBreak = true
return tableCell
}
}
else if  (axis[j].name == "col")
{
if (eltFID.id == axis[j].brks[i].id)
{
_isBVHCheck = axis[j].brks[i].isHeaderPresent
_isBVFCheck = axis[j].brks[i].isFooterPresent
tableCell.hasVBreak = true
return tableCell
}
}
}
}
}
return tableCell
}
else return tableCell;
}
}
return tableCell;
}
function applyBreakBtnDefautAction(defautlAction)
{
switch(defautlAction)
{
case "rmv_brk":
addOrRemoveBreak(0);
break;
case "add_brk":
addOrRemoveBreak(1);
break;
case "manage_brk":
launchManageBreak()
break;
}
}
function hasBrksFn(elt)
{
if((elt)  && isTableCell(elt) && elt.id)
{
var blk = elt.parent.parent
var brk = null;
for(var i=0; i<blk.axis.length;i++)
{
if(blk.axis[i].brks && blk.axis[i].brks.length > 0)
{
brk = flatFindbyId(blk.axis[i].brks,elt.id)
if(brk)
return true;
}
}
return (brk != null)
}
return false;   
}
function setBreak(elts)
{
var rc=getBreakStatus(elts)
var breakBtn = workbenchW.getAction("breakBtn");
var addBreak = workbenchW.getAction("addBreak");
var removeBreak = workbenchW.getAction("removeBreak");
if (rc!=null) 
{
breakBtn.updateRadioBtn(rc.hasBreak, 252);
_breakBtnDefaultAction = rc.brkAllowed?(rc.hasBreak?"rmv_brk":"add_brk"):allowManageBreaks(elts)?"manage_brk":null
breakBtn.setDisabled(_breakBtnDefaultAction == null)
removeBreak.setDisabled(!rc.hasBreak)
addBreak.setDisabled(rc.hasBreak || !rc.brkAllowed)
}
else
{
breakBtn.setDisabled(true)
removeBreak.setDisabled(true)
addBreak.setDisabled(true)
}
}
function getBreakStatus(elts)
{
var hasBrk=false,isbrkAllowed=false
var qualif=0;
if ( (elts!=null) && (elts.length==1) && ((qualif=getVariableQualification())!=1) )
{
var elt=elts[0]
if (!isTableCell(elt))
return {hasBreak:false, brkAllowed:false}
var ax=getTableCellAxis(elt,true)
var type=elt.type
var zone=elt.parent
if (elt.parent.parent)
var ppp=elt.parent.parent
else
return {hasBreak:false, brkAllowed:false}
if (ppp==null)
return {hasBreak:false, brkAllowed:false}
var cn=elt.className
var isInForm=(ppp.block)?(ppp.block.blockType==10):false
if ( (ax!=-1) && isInAxis(ppp.axis[ax], elt, false, true) && !isInForm
) 
{
isbrkAllowed=true
var brkelt = flatFindbyId(ppp.axis[ax].brks,getCellFormulaOrId(elt))
if (brkelt)
hasBrk=true
else
hasBrk=false
}
else
{
hasBrk=false
isbrkAllowed=false
}
}
else
{
hasBrk=false
isbrkAllowed=false
}
return {hasBreak:hasBrk, brkAllowed:isbrkAllowed}
}
function getRankingStatus(elts)
{
if ( (elts!=null) && (elts.length==1) )
{
var elt=elts[0]
if ((elt.className == "block") || (isTableCell(elt))  ) 
{
if (elt.hasRank )
{
return {hasRanking:true, rankingAllowed:true}
}
else
{
return {hasRanking:false, rankingAllowed:true}
}
}
else
{
return null
}
}             
}
function getTableCellParentBID(elt)
{
if (isTableCell(elt))
return elt.parent.parent.bid
else if ((elt.className=="block")&& !isGraph(elt))
return elt.bid
else
return null
}
function getSectionCellParentBID(elt)
{
if (isCellInSection(elt))
return elt.parent.parent.bid
else if ((elt.className=="section"))
return elt.bid
else
return null
}
function getSectionCell(elt)
{
    if (elt.className=="section")
    {
        if (elt.children && elt.children[0].className=="bag")
        {
            var bag=elt.children[0];
            if (bag.children && bag.children[0].className=="reportCell")
            {
                return bag.children[0];
            }        
        }
    }
    return null;
}
function isMultiTableCellInSameTable(elts)
{
isOK=true,len=elts.length,tableBID = null
for (var i=0;i<len;i++)
{
var currBID=getTableCellParentBID(elts[i])
if (currBID==null){
tableBID = null
return false
}
if (tableBID==null) 
{
tableBID=currBID
} else if (tableBID != currBID)
{
tableBID = null
return false
}
}
return true
}
function areAllEltsInSameSection(elts)
{
var len=elts.length,sectionBID=null,elt=null,par=null
for (var i=0;i<len;i++)
{
elt=elts[i]
switch (elt.className)
{
case 'cell':
case 'reportCell':
case 'block':
par=elt.parent
break
case 'tableCell':
par=elt.parent.parent.parent.parent
break
}
if (sectionBID==null)
sectionBID=par.bid
if (sectionBID!=par.bid)
return false
}
return true
}
function getTableClassNameIfTableSelected(elts, selectedBlockType)
{
if (elts == null || selectedBlockType == null) return
var len=elts.length,elt=null
var parent=elts[0].parent.bid
selectedBlockType.sameParent = true
for (var i=0;i<len;i++)
{
elt=elts[i]
var className = elt.className            
if (parent != elt.parent.bid)
selectedBlockType.sameParent = false    
if (className == 'reportCell' ) 
{
if (!isTableCell(elt))
selectedBlockType.freeCell=1
}
else if (className == 'block')
{
switch (elt.blockType)
{
case "vTable": 
selectedBlockType.vTable=1; 
break;
case "hTable": 
selectedBlockType.hTable=1; 
break;
case "xTable":
selectedBlockType.xTable=1;
break;
}
}
else if (className == 'section')
selectedBlockType.section=1
}
}
function escKeyCB() 
{
escapeFormatPainter()
mouseOut()
_isDDEnabled=false;
if(_feedbackManager.isMoving())
{
_feedbackManager.bIsMoving=false
_feedbackManager.showMoveZone(false)
}
if(_feedbackManager.isResizing())
{
_feedbackManager.bIsResizing=false
_feedbackManager.hideFeedbackObjects()
_feedbackManager.setResizeObj(null)
}
}
function beforeShowBordersCB_getEltType(elt)
{
var group=null;
switch (elt.className)
{
case 'reportCell':
case 'cell':
group='cell';
break;
case 'tableCell':
var pp=elt.parent.parent
if (pp==null) break;
if ( (pp.className=='hTable')||(pp.className=='vTable')||(pp.className=='crossTable') ||(pp.className=='form'))
{
group='cell';
}
break;
case 'block':
if (isGraph(elt))
{
group='chart';
}
else
{
var type=elt.children[0].className;
if ( (type=='hTable')||(type=='vTable')||(type=='crossTable')||(type=='form') )
{
group='table';
}
}
break;
}
return group;
}
function beforeShowBordersCB()
{
var elts=getSelectedElts();
var disable=false;
if (elts.length > 1)
{
var group=beforeShowBordersCB_getEltType(elts[0]);
for (var i=1;i<elts.length;i++)
{
if (group!=beforeShowBordersCB_getEltType(elts[i]))
disable=true;
}
}
this.getItemByID("border_12").setDisabled(disable);
}
function processBorders(bordersBtn)
{
var ret=bordersBtn.getSelectedBorder()
if ( ret==null )
return
var elts=getSelectedElts()
if ( ret.top == -2 )
{
var elt=elts[0]
switch (elt.className)
{
case 'reportCell':
case 'cell':
_fcDlgSelectedPane = 4
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatCellDlg.html?tabIndex="+_formatCellDlgTab.border)
break
case 'block':
if (isGraph(elt))
{
_fchartDlgSelectedPane = 1
frameNav("DlgFrame", _root + "language/"+_lang+"/html/applyFormatChartDialog.html")
}
else
{
var type=elt.blockType;
if ( (type=='hTable')||(type=='vTable')||(type=='xTable')||(type=='form') )
{
_ftDlgSelectedPane = 1
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatTableDlg.html?tabIndex="+_formatTableDlgTab.border)
}
}
break
case 'tableCell':
var pp=elt.parent.parent
if (pp==null)
return
if ( (pp.blockType=='hTable')||(pp.blockType=='vTable')||(pp.blockType=='xTable') ||(pp.blockType=='form'))
{
_fcDlgSelectedPane = 4
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatCellDlg.html?tabIndex="+_formatCellDlgTab.border)
}
break
case 'pageHeader':
case 'pageFooter':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportHdrFtrDlg.html?header="+ ("pageHeader" == elt.className))
break
}
return
}
var s=getBIDsWithoutEmbeddedTableCells(elts)
if (s=='')
return
var p=urlParamsNoBID()
if (p=="")
return
p+="&bids="+escape(s)
p+='&tb='+ret.top
p+='&bb='+ret.bot
p+='&lb='+ret.left
p+='&rb='+ret.right
frameNav("Report","processFormatToolbar"+_appExt+p,true)
}
function setCellSizePadding(s)
{
wt()
var elts=getSelectedElts()
if(elts == null || elts.length == 0)
return 
var p=urlParams(false)
if (p=="") 
return
p+=s
frameNav("Report","processFormatToolbar"+_appExt+p,true)
}
function getBIDsWithoutEmbeddedTableCells(elts)
{
var arrTableBID=new Array
for (var i=0;i<elts.length;i++)
{
var elt=elts[i]
if (elt.className=='block')
{
var c0=elt.children[0]
if ( c0 && ((c0.className=='hTable') || (c0.className=='vTable') || (c0.className=='crossTable') || (c0.className=='form')) )
arrTableBID[arrTableBID.length]=elt.bid
}
}
var s=''
for (var i=0;i<elts.length;i++)
{
var elt=elts[i], found=false
if (elt.className=='tableCell') 
{
var pp=elt.parent.parent.parent
for (var j=0; j<arrTableBID.length;j++)
{
if ( pp.bid == arrTableBID[j] )
found=true
}
if (!found)
{
if (s!='')
s+=','
s+=elt.bid
}
}
else
{
if (s!='')
s+=','
s+=elt.bid
}
}
return s
}
function saveLastSelectedBID(bid)
{
if (_lastSelectedBIDArr.length > 0 && _lastSelectedBIDArr[_lastSelectedBIDArr.length-1]== bid) return;
if (_lastSelectedBIDArr.length < 10)
{
_lastSelectedBIDArr[_lastSelectedBIDArr.length] = bid;
}else 
{
for(var i = 0; i< 9;i++)
{
_lastSelectedBIDArr[i] = _lastSelectedBIDArr[i+1];
}
_lastSelectedBIDArr[9]=bid;
}
}
function deselectSingle(fr, bid)
{
if (selectedBid == null) return
selectedBid.unset(bid);
selectObj(fr, bidTable.get(bid), false, bid);
var elts=getSelectedElts();
if (!_useParentContextMenu && elts.length < 1 )
{
_bodrill=null
_drillPathInfo=null
}
}
function blockFeedback_mouseDown(e)
{
if (_ie)
e=getParentWindow(this).event
e.cancelBubble=true
simulateClick(e)
}
function blockFeedback_mouseOver(e)
{
if (_ie)
e=getParentWindow(this).event
e.cancelBubble=true
}
function blockFeedback_ContextMenu(e)
{
if (_saf)
this.onmousedown(e)
if (_ie)
e=getParentWindow(this).event
e.cancelBubble=true
incContextMenu(this,e)
return false;
}
function setLayeringLevelTo(level)
{
wt();
if (level==null)
return
var p=urlParams(true)
if (p!="")
frameNav("Report","processLayering"+_appExt+p+"&level="+level,true)
}
function initLayeringMenu()
{
var o=this
var res=getLayeringValue()
workbenchW.getAction("frontMenuItem").setDisabled(res.toFront)
workbenchW.getAction("backMenuItem").setDisabled(res.toBack)
workbenchW.getAction("forwardMenuItem").setDisabled(res.toForward)
workbenchW.getAction("backwardsMenuItem").setDisabled(res.toBackward)
}
function getLayeringValue()
{
var toFront=toBack=toForward=toBackward=true
var elts=getSelectedElts()
var elt=elts[0], res=null
if (elt.className=="tableCell")
{
var arrElt=new Array
arrElt[0]=elt.parent.parent.parent
res=getAttFromElts(["layering"],arrElt)
}
else
res=getAttFromElts(["layering"],elts)
if (res.defined && res.ret!=null)
{
var level = res.ret
switch (level)
{
case 'back-most':
toFront=toForward=false
break
case 'front-most':
toBack=toBackward=false
break
case 'middle':
toFront=toBack=toForward=toBackward=false
break
}
}
var ret=new Object
ret.toFront=toFront
ret.toBack=toBack
ret.toForward=toForward
ret.toBackward=toBackward
return ret
}
function setAlignment(elts,w)
{
if ( (elts == null) || (elts.length==0) || ((elts.length==1)&&(elts[0].className!='cell')&&(elts[0].className!='reportCell')&&(elts[0].className!='tableCell')&&(elts[0].className!='block')) )
{
w.setDisabled(true)
return
}
w.setDisabled(false)
}
function processAlignment()
{
frameNav("Report","processAlignment"+_appExt+_alignURL+"&bdeleteAttach=true",true)
}
function initAlignmentMenu()
{
var o=this, elts=getSelectedElts()
var len=(elts!=null)?elts.length:0
var oneEltSelected=(len>1)?false:true
if (isMultiTableCellInSameTable(elts))
oneEltSelected=true
var selectedTableClassName=new Object;
getTableClassNameIfTableSelected(elts, selectedTableClassName)
var oneHTableSelected=(selectedTableClassName.hTable!=undefined)
var oneVTableSelected=(selectedTableClassName.vTable!=undefined)
var oneXTableSelected=(selectedTableClassName.xTable!=undefined)
var oneSectionSelected=(selectedTableClassName.section!=undefined)
workbenchW.getAction("alignLeftItem").setDisabled(oneEltSelected || oneSectionSelected);
workbenchW.getAction("alignCenter").setDisabled(oneEltSelected || oneSectionSelected || (oneXTableSelected || oneHTableSelected));
workbenchW.getAction("alignRight").setDisabled(oneEltSelected || oneSectionSelected || (oneXTableSelected || oneHTableSelected));
workbenchW.getAction("alignTop").setDisabled(oneEltSelected || oneSectionSelected || (!selectedTableClassName.sameParent));
workbenchW.getAction("alignMiddle").setDisabled(oneEltSelected || oneSectionSelected || (!selectedTableClassName.sameParent)|| oneXTableSelected || oneVTableSelected);
workbenchW.getAction("alignBottom").setDisabled(oneEltSelected || oneSectionSelected || (!selectedTableClassName.sameParent)|| oneXTableSelected || oneVTableSelected);
workbenchW.getAction("relativePos").setDisabled(!oneEltSelected || oneSectionSelected);
}
function initFormatSizePadding()
{
var o=this,elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
if (elts.length==1 && elts[0].className == 'reportCell')
{
if(typeof(elts[0].size) != 'undefined')
{
var size = elts[0].size
var width = workbenchW.getAction("widthField")
if (width!=null)
width.setValue(metricToUserUnit(size.width))
var height = workbenchW.getAction("heightField")
if (height!=null)
height.setValue(metricToUserUnit(size.height))
}
if(typeof(elts[0].padding) != 'undefined')
{
var padding = elts[0].padding
var vPadding = workbenchW.getAction("verticalPadding")
if (vPadding!=null)
{
if (padding.top == padding.bottom)
vPadding.setValue(metricToUserUnit(padding.top))
else
vPadding.setValue(metricToUserUnit(0))
}
var hPadding = workbenchW.getAction("horizontalPadding")
if (hPadding!=null)
{
if (padding.left == padding.right)
hPadding.setValue(metricToUserUnit(padding.left))
else
hPadding.setValue(metricToUserUnit(0))
}
}
}
}
function setFormat(elts)
{
initFormatSizePadding()
var wb = _currWorkbench.getAction("formatBtn")
if (elts != null&&elts.length>0)
{
var type = isCompositeSelection(elts)
if(type != null)
{
_typeFormat = elts[0].className
if(type.sameBlock  && (type.className == 'reportCell'))
{
_currWorkbench.getAction("widthField").setDisabled(false)
_currWorkbench.getAction("heightField").setDisabled(false)
_currWorkbench.getAction("verticalPadding").setDisabled(false)
_currWorkbench.getAction("horizontalPadding").setDisabled(false)
}
else
{
_currWorkbench.getAction("widthField").setDisabled(true)
_currWorkbench.getAction("heightField").setDisabled(true)
_currWorkbench.getAction("verticalPadding").setDisabled(true)
_currWorkbench.getAction("horizontalPadding").setDisabled(true)
}
if (elts.length > 1)
{
if (type.isComposite || (!type.isComposite  && (type.className == 'block')))
{
wb.setDisabled(true)
return
}
}
else if (elts.length == 1)
{
if (type.isTable)
_typeBlock = 'table'
else if (type.isGraph)
_typeBlock = 'chart'
else
_typeBlock = null
wb.setDisabled(false)
return
}
}
}
else
{
wb.setDisabled(true)
}
}
function setFormatting()
{
wt();
switch(_typeFormat)
{
        case "pageHeader":
        frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportHdrFtrDlg.html?header=true");          
            break;
        case "pageFooter":
        frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportHdrFtrDlg.html?header=false");           
            break;
        case "body":
            frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportDlg.html?tabIndex="+_formatReportDlgTab.general);            
            break;
        case "reportCell":
            frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatCellDlg.html");
            break;
        case "block":
if (_typeBlock == 'table')
            frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatTableDlg.html");
else if (_typeBlock == 'chart')
frameNav("DlgFrame", _root + "language/"+_lang+"/html/applyFormatChartDialog.html")
            break;
        case "section":
            frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatSectionDlg.html");
            break;
}
}
function resetFormat()
{
wt();
var s = ""
var isReport = false 
var elts=getSelectedElts()
if ((elts != null) && (_typeFormat != null))
{
if (_typeFormat == 'body')
isReport = true
if(!isReport)
{
for(var i=0; i<elts.length; i++)
{
if ((elts[i].className == 'section') || (elts[i].className == 'block') || 
(elts[i].className == 'reportCell')|| (elts[i].className == 'pageHeader') || 
(elts[i].className == 'pageFooter'))
if (i==0)
s += elts[i].bid
else 
s += "," + elts[i].bid
} 
}
var p=urlParamsNoBID()
p += "&Bids=" + escape(s) + "&isReport=" + isReport 
setReportUrl(_root + "processResetFormat"+_appExt+p,true);
}
}
function clearContents(action)
{
wt();
var s = ""
var elts=getSelectedElts()
if (elts != null)
{
for(var i=0; i<elts.length; i++)
{
if (elts[i].className == 'reportCell')
{
if (i==0)
s += elts[i].bid
else 
s += "," + elts[i].bid
}
} 
var p=urlParamsNoBID()
p += "&Bids=" + escape(s) 
setReportUrl(_root + "processClear"+_appExt+p+"&iAction="+action,true);
}
}
function initRankingMenu()
{
var elts=getSelectedElts()
var elt = elts[0]
var isRankingSet = false;
var isBlock = false;
if (isTableCell(elt)|| isCellInSection(elt))
{
elt=elts[0].parent.parent
}
if (elt)
{
isRankingSet = elt.hasRanking?elt.hasRanking:false;
isBlock = (elt.className=='block');
}
var rankBut = workbenchW.getAction("rankingBtn")
rankBut.updateRadioBtn(isRankingSet)
if (isBlock|| isTableCell(elt)||isSectionFn(elt)|| isCellInSection(elt))
{
rankBut.setDisabled(false);
workbenchW.getAction("removeRanking").setDisabled(!isRankingSet);
workbenchW.getAction("editRanking").setDisplay(isRankingSet);
workbenchW.getAction("addRanking").setDisplay(!isRankingSet);
} else {
rankBut.setDisabled(true);
}
}
function align_getEltWidthFromHTMLContentInPx(bid)
{
var obj=bidTable.get(bid);
return obj?obj[0].offsetWidth:0;
}
function align_getEltHeightFromHTMLContentInPx(bid)
{
var obj=bidTable.get(bid);
return obj?obj[0].offsetHeight:0;;
}
function align_getTableWidthInMetrics(elt)
{
if (!elt) return 0;
return pixelsToMetrics(align_getEltWidthFromHTMLContentInPx(elt.bid));
}
function align_getTableHeightInMetrics(elt)
{
if (!elt) return 0;
return pixelsToMetrics(align_getEltHeightFromHTMLContentInPx(elt.bid));
}
function align_getReportEltWidthInMetrics(elt)
{
if (elt == null)
return 0;
switch (elt.className)
{
case 'reportCell':
return  pixelsToMetrics(align_getEltWidthFromHTMLContentInPx(elt.bid))
case 'block':
{
if (isGraph(elt)) 
return elt.w;
else
return align_getTableWidthInMetrics(elt);
}
}
return 0
}
function align_getReportEltHeightInMetrics(elt)
{
if (elt == null)
return 0;
switch (elt.className)
{
case 'reportCell':
return  pixelsToMetrics(align_getEltHeightFromHTMLContentInPx(elt.bid))
case 'block':
{
if (isGraph(elt)) 
return elt.h;
else
return align_getTableHeightInMetrics(elt);
break;
}
}
return 0
}
function align_getAbsoluteXinMetrics(elt)
{
if (!elt) return 0;
var x=elt.x
if (elt.attach)
{
var attachBid=elt.attach.toH;
if (attachBid)
{
var attachElt = findByBID(doc, attachBid);
switch (elt.attach.h)
{
case 1:
x+=align_getAbsoluteXinMetrics(attachElt);
break;
case 2:
x+=align_getAbsoluteXinMetrics(attachElt)+align_getReportEltWidthInMetrics(attachElt);
break;
}
}
}
return x;
}
function align_getAbsoluteYinMetrics(elt)
{
if (!elt) return 0;
var y=elt.y;
if (elt.attach)
{
var attachBid=elt.attach.toV;
if (attachBid)
{
var attachElt = findByBID(doc, attachBid);
switch (elt.attach.v)
{
case 1:
y+=align_getAbsoluteYinMetrics(attachElt);
break;
case 2:
y+=align_getAbsoluteYinMetrics(attachElt)+align_getReportEltHeightInMetrics(attachElt);
break;
}
}
}
return y;
}
_alignURL=''
function setAlignmentTo(alignment)
{
wt()
_alignURL=''
if (alignment==null)
return
var elts=getSelectedElts()
if (alignment=='relativePos')
{
var elt=elts[0]
switch (elt.className)
{
case 'reportCell':
if (isFreeCell(elt) || isSectionCell(elt))
frameNav("DlgFrame", "language/"+_lang+"/html/formatCellDlg.html"+"?tabIndex="+_formatCellDlgTab.layout)
else if(isTableCell(elt))
frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html"+"?tabIndex="+_formatTableDlgTab.layout)
break
case 'block':
if (isGraph(elt))
{
_fchartDlgSelectedPane = 6
_fchartDlgSelectedPaneValue = "layout"
_areaDefid = "chartBlock"
newBlockWhileWaitWidget().show(false)
frameNav("DlgFrame", _root + "language/"+_lang+"/html/applyFormatChartDialog.html")
}
else
{
frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html"+"?tabIndex="+_formatTableDlgTab.layout)
}
break
}
return
}
var s='', arr=new Array, attach=false
var arrSelected=new Array;
var HoriDirection=false;
switch(alignment)
{
case "left":
case "center":
case "right":
HoriDirection=true;
break;
case "top":
case "middle":
case "bottom":
HoriDirection=false;
break;
}
for (var i=0;i<elts.length;i++)
{
var found=false,elt=elts[i]
if (elt.className=='reportCell')
{
var wob = elt.parent
if (wob.className=='wob')
{
var table = wob.parent
if (table.className=="block")
elt=table
}
}
var bid=elt.bid
for (var j=0;j<arr.length;j++)
{
if (arr[j]==bid)
{
found=true
break
}
}
if (!found)
{
arr[arr.length]=bid
if (s!='')
s+=','
s+=bid
arrSelected[arrSelected.length]=elt;
}
if (elt.attach)
{
var isAttached=((HoriDirection&&elt.attach.toH) || (!HoriDirection&&elt.attach.toV))
attach=attach||isAttached
}
}
var p=urlParamsNoBID()
if (p=="")
return
p+="&bids="+escape(s)+"&alignment="+alignment
var sWidth='';
var sHeight='';
var arrWidth=new Array;
var arrHeight=new Array;
if (alignment=='center' || alignment=='right')
{
for (var i=0;i<arrSelected.length;i++)
{
var elt=arrSelected[i];
var w=align_getReportEltWidthInMetrics(elt);
if (w>0)
{
if (sWidth!='')
sWidth+=',';
sWidth+=w;
arrWidth[arrWidth.length]=w;
}
}
p+="&sAlignW="+escape(sWidth);
}
else
if (alignment=='middle' || alignment=='bottom')
{
for (var i=0;i<arrSelected.length;i++)
{
var elt=arrSelected[i];
var h=align_getReportEltHeightInMetrics(elt);
if (h>0)
{
if (sHeight!='')
sHeight+=',';
sHeight+=h;
arrHeight[arrHeight.length]=h;
}
}
p+="&sAlignH="+escape(sHeight)
}
var leftMost=0;
if ( alignment=='left' || alignment=='center')
{
var left=0;
for (var i=0;i<arrSelected.length;i++)
{
left=align_getAbsoluteXinMetrics(arrSelected[i]);
if (leftMost==0)
leftMost=left;
else
{
if (left<leftMost)
leftMost=left;
}
}
p+="&align_leftMost="+leftMost;
}
var rightMost=0;
if ( alignment=='right' || alignment=='center')
{
var right=0;
for (var i=0;i<arrSelected.length;i++)
{
right=align_getAbsoluteXinMetrics(arrSelected[i])+arrWidth[i];
if (right>rightMost)
rightMost=right;
}
p+="&align_rightMost="+rightMost;
}
var topMost=0;
if ( alignment=='top' || alignment=='middle')
{
var top=0;
for (var i=0;i<arrSelected.length;i++)
{
top=align_getAbsoluteYinMetrics(arrSelected[i]);
if (topMost==0)
topMost=top;
else
{
if (top<topMost)
topMost=top;
}
}
p+="&align_topMost="+topMost;
}
var bottomMost=0;
if ( alignment=='middle' || alignment=='bottom')
{
var bottom=0;
for (var i=0;i<arrSelected.length;i++)
{
bottom=align_getAbsoluteYinMetrics(arrSelected[i])+arrHeight[i];
if (bottom>bottomMost)
bottomMost=bottom;
}
p+="&align_bottomMost="+bottomMost;
}
_alignURL=p
if (attach)
showPromptDialog("One selected table or chart is positioned relative to another block, cell, or section. By moving it you will disable this relative positioning. Do you want to continue?","Align",1,processAlignment)
else
frameNav("Report","processAlignment"+_appExt+_alignURL,true)
}
function showHyperlinkDialog(id,isDoc)
{
_isDoc = isDoc
var elts=getSelectedElts()
if (elts.length==1)
{
if (id=="removeHyperlink" || id=="removeDoclink")
{
eventManager.notify(_EVT_VARS_UPDATE);
var url=_root+"processHyperlink"+_appExt
url+=urlParamsNoBID()+"&sBid="+escape(elts[0].bid)+"&sAction=R"
frameNav("Report",url,true)
}
else if (id=="setContentAsHyperlink")
{
var url=_root+"processHyperlink"+_appExt
url+=urlParamsNoBID()+"&sBid="+escape(elts[0].bid)+"&sAction=S&sHyperlink="+((elts[0].contType=='weblink')?"true":"false");
frameNav("Report",url,true)
}
else
frameNav("DlgFrame","language/"+_lang+"/html/hyperlinkDialog.html")
}
}
function findReportBid(elt)
{
var reportElt=searchClassName(elt,"report")
return (reportElt!=null)?reportElt.bid:null
}
function processBackgroundImage()
{
var elts=getSelectedElts()
var elt=elts[0]
wt()
switch (elt.className)
{
case 'reportCell':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatCellDlg.html?tabIndex="+_formatCellDlgTab.appearance)
break
case 'section':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatSectionDlg.html?tabIndex="+_formatSectionDlgTab.appearance)
break
case 'block':
if ( (elt.blockType=='hTable')||(elt.blockType=='vTable')||(elt.blockType=='crossTable')||(elt.blockType=='form') )
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatTableDlg.html?tabIndex="+_formatTableDlgTab.appearance)
break
case 'pageHeader':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportDlg.html?tabIndex="+_formatReportDlgTab.header)
break
case 'pageFooter':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportDlg.html?tabIndex="+_formatReportDlgTab.footer)
break
case 'body':
frameNav("DlgFrame", _root + "language/"+_lang+"/html/formatReportDlg.html?tabIndex="+_formatReportDlgTab.appearance)
break
}
return
}
function getCellFormulaOrId(elt)
{
return elt ? ((elt.id&&(elt.id!="null"))?elt.id:elt.formula) : null
}
function isInAxis(axis,elt,isSection, forBreak)
{
var arr=axis.vars
var forBreak = forBreak?true:false
var id = getCellFormulaOrId(elt)
if (forBreak) { 
if (id.startsWith("=") && (elt.nestedExpressionID)) {
id = elt.nestedExpressionID
}
} 
if (arr!=null)
{
var len=arr.length
for (var i=0;i<len;i++)
{
var itemID = isSection ?arr[i]:arr[i].id
if (itemID==id)
return true
}
}
id=elt.name
if (arr!=null)
{
var len=arr.length
for (var i=0;i<len;i++)
{
if (arr[i]==id)
return true
}
}
return false
}
function getVariableQualification()
{
var elts = getSelectedElts(),qualif=""
var res=getAttFromElts(["kind"],elts)
if (res.defined && res.ret!=null)
qualif=_objKindTable.get(res.ret)
else
{
var id = getVariableId();
var obj = null;
if(id!="")
{
obj = getDictionaryObjectFromId(id);
qualif=(obj!=null)?obj.kind:""
}
}
return qualif
}
function getAssociatedDim()
{
var id = getVariableId(), associatedDim="";
var obj = null;
if(id!="")
{
obj = getDictionaryObjectFromId(id);
associatedDim=(obj!=null)?obj.associatedDim:""
}
return associatedDim;
}
function getVariableDefinition()
{
var elts = getSelectedElts(),def="",endIdx=0
var res=getAttFromElts(["formula"],elts)
if (res.defined && res.ret!=null)
def = res.ret
return def
}
function getVariableName()
{
var elts = getSelectedElts(),def="",endIdx=0
var res=getAttFromElts(["formula"],elts)
if (res.defined && res.ret!=null)
{
def = res.ret
endIdx= def.length-1
if (endIdx>0) def=def.slice(2,endIdx)
}
return def
}
function getVariableId()
{
var elts = getSelectedElts(),id="",endIdx=0
var res=getAttFromElts(["id"],elts)
if (res.defined && res.ret!=null)
id = res.ret
return id
}
function getVariableDataType()
{
var id = getVariableId(), dType="", obj = null;
if(id!="")
{
obj = getDictionaryObjectFromId(id);
dType=(obj!=null)?obj.dataType:""
}
return dType;
}
function getRow(elt)
{
var elts=null,def=""
if (elt!=null)
{
elts=new Array
elts[0]=elt
}
else 
elts=getSelectedElts()
var res=getAttFromElts(".row",elts)
if (res.defined && res.ret!=null)
def = res.ret
return def
}
function getCol(elt)
{
var elts=null,def=""
if (elt!=null)
{
elts=new Array
elts[0]=elt
}
else 
elts=getSelectedElts()
var res=getAttFromElts(".col",elts)
if (res.defined && res.ret!=null)
def = res.ret
return def
}
function getRowSpan()
{
var elts = getSelectedElts(),def=""
var res=getAttFromElts(".rowSpan",elts)
if (res.defined && res.ret!=null)
def = res.ret
return def
}
function getColSpan()
{
var elts = getSelectedElts(),def=""
var res=getAttFromElts(".colSpan",elts)
if (res.defined && res.ret!=null)
def = res.ret
return def
}
function isReportCellWithoutAxis(elt)
{
var p=elt.parent
var block=elt.parent.parent
var ax= getNumAxis(block,elt.id)
if (ax == -1)
{
if(typeof(elt.nestedExpressionID) != "undefined")
{
var ax2 = getNestedExpressionAxis(elt)
return (null == ax2 || ax2 == -1 )? true: false
}
return true
}
return false
}
function getNumAxis(block,objId)
{
var axis = block.axis
var id = objId
if (axis!=null)
{
var len=axis.length
for (var i=0;i<len;i++)
{
if (axis[i].vars && axis[i].vars.length > 0)
{
for (var j=0;j<axis[i].vars.length;j++)
{
if(axis[i].vars[j].id == id)
return i
}
}
}
}
return -1;
}
function getNestedExpressionAxis(elt)
{
if (elt && !isTableCell(elt)) return null;
var wob=elt.parent,block=wob.parent
var axis = block.axis
if(typeof(elt.nestedExpressionID) != "undefined")
{
var id =elt.nestedExpressionID 
if (axis!=null)
{
var len=axis.length
for (var i=0;i<len;i++)
{
if (axis[i].vars && axis[i].vars.length > 0)
{
for (var j=0;j<axis[i].vars.length;j++)
{
if(axis[i].vars[j].id == id)
return i
}
}
}
}
}
else
return null
return -1
}
function getTableCellAxisName(elt,allowBreakCalc)
{
if (!isTableCell(elt)) return "";
var wob=elt.parent,block=wob.parent
if (allowBreakCalc)
{
if (block.blockType=="form") return "";
}
var zone=wob.zone
switch(block.blockType)
{
case "vTable":
return zone=="b" ? "row" : "" 
case "hTable":
return zone=="b" ? "col" : "" 
case "xTable":
switch (zone)
{
case "b,h-1": 
case "b,b":   
return "row"
case "h-1,b": 
return "col"
}
break;
case "form":
return "row" 
}
return ""
}
function getTableCellAxis(elt,allowBreakCalc)
{
if (!isTableCell(elt)) return -1
var wob=elt.parent,block=wob.parent
if (allowBreakCalc)
{
if (block.blockType=="form") return -1
}
var zone=wob.zone
switch(block.blockType)
{
case "vTable":
return zone=="b" ? 1 : -1 
case "hTable":
return zone=="b" ? 0 : -1 
case "xTable":
switch (zone)
{
case "b,h-1": 
return 1
case "h-1,b": 
return 0;
case "b,b":   
return 2 
}
break;
case "form":
return 1 
}
return -1
}
function getTableCellZone(elt,allowBreakCalc)
{
if (!isTableCell(elt)) return -1
var wob=elt.parent,block=wob.parent
if (allowBreakCalc)
{
if (block.blockType=="form") return -1
}
var zone=wob.zone
switch(block.blockType)
{
case "vTable":
case "hTable":
case "xTable":
switch (zone)
{
case "h-1,b": 
return 0
case "b,h-1": 
return 1
case "b,b":   
return 2 
case "h-1":   
return 3
case "b":     
return 4 
}
break;
case "form":
return 1 
}
return -1
}
function flatFindbyId(arr,id)
{
if (arr!=null)
{
var len=arr.length
for (var i=0;i<len;i++)
{
var elem=arr[i]
if (elem.id==id)
return elem
}
}
return null
}
function isCustomSort(id)
{
return doc._CSArr[id] ? true : false
}
function isLinkedMember(id)
{
if (id && doc._links)
{
var len=doc._links.length;
for (var i=0; i<len; i++)
{
if (doc._links[i]==id)
return true;
}
}
return false;
}
function setPageCap()
{
var index=parseInt(DS.iReportID)
var report = doc.children[index];
if (report)
{
workbenchW.getAction("pageHeader").check(report.showHeader)
workbenchW.getAction("pageFooter").check(report.showFooter)
}
}
function isBreakable(elts)
{
if(elts)
{
var elt = elts[0];
if (elt && elt.className=="reportCell")
{
var wob = elt.parent;
if (wob && wob.className=="wob")
{
var block = wob.parent
if (block && isTableFn(block))
return true
}
}
else if(elt && isTableFn(elt))
{
return true
}
}
return false
}
function isTableFn(elt)
{
if(elt)
{
if(isBlock(elt))
{
return ( (elt.blockType == "vTable") || (elt.blockType == "hTable") ||(elt.blockType == "xTable") ||(elt.blockType == "form") )
}
}
return false;
}
function setSortMenuDefaultAction(selSort)
{
switch(selSort)
{
case -1 :
_sortMenuDefaultAction = "manage_sort"
break;
case 0 :
_sortMenuDefaultAction = "add_sort"
break;
case 1 :
case 2 :
_sortMenuDefaultAction = "remove_sort"
break;
}
}
function launchManageSort()
{
wt()
var elts=getSelectedElts();
_isTable = false, _isSection = false, _sortBlockID = null, _sortCellBid = null, _sectionBid = null
if((elts != null) && (elts.length > 0))
{
var elt = elts[0], cn = elt.className 
if (cn == "block")
{
_sortBlockID= elt.bid;
_sortCellBid = null;
_isTable =isTableFn(elt);
if(!_isTable)
_blockType =elt.blockType;
} else if (cn == "reportCell") {
var container = elt.parent.parent
if ("section" == container.className) {
elt = container
cn = elt.className 
_sectionBid = elt.bid
_isSection = true
} else {
_isTable =isTableFn(container);
if(!_isTable)
_blockType = container.blockType;
_sortBlockID = container.bid;
_sortCellBid = elt.bid;
}
} else if (cn == "section") {
_sectionBid = elt.bid
_isSection = true
}
if ((cn == "block")|| (cn == "reportCell") || (cn == "section"))
{
var url = "language/"+_lang+"/html/sortDialog.html"
if((cn == "reportCell") && hasSortsFn(elt)) {
url += "?selSort=" + elt.id
}
frameNav("DlgFrame",url)
}
}
}
function applySortMenuDefautAction(defautlAction)
{
switch(defautlAction)
{
case "remove_sort":
addOrRemoveSort(0); 
break;
case "add_sort":
addOrRemoveSort(1); 
break;
case "manage_sort":
launchManageSort()
break;
}
}
function setSelSort(selSort,bSort,bSection,isMiniSubMenu)
{
var isMini = (typeof("isMiniSubMenu")!="undefinied")?isMiniSubMenu:false
var noSort = (isMini)?workbenchW.getAction("noSortBis"):workbenchW.getAction("noSort");
var ascendingSort = (isMini)?workbenchW.getAction("ascendingSortBis"):workbenchW.getAction("ascendingSort");
var descendingSort = (isMini)?workbenchW.getAction("descendingSortBis"):workbenchW.getAction("descendingSort");
if(!isMini)
{
var removeAllSorts = workbenchW.getAction("removeAllSorts");
var manageSorts = workbenchW.getAction("manageSorts");
    var sortMenu        = workbenchW.getAction("sortMenu");
    }
if(selSort == -1)
{
noSort.setDisabled(true);
ascendingSort.setDisabled(true);
descendingSort.setDisabled(true);
noSort.check(false);
ascendingSort.check(false);
descendingSort.check(false);
}
else
{
noSort.setDisabled(false);
ascendingSort.setDisabled(false);
descendingSort.setDisabled(false);
noSort.check(selSort == 0);
ascendingSort.check(selSort == 1);
descendingSort.check(selSort == 2);
}
if(!isMini)
{
removeAllSorts.setDisabled(!bSort);
removeAllSorts.check(false);
sortMenu.updateRadioBtn((selSort == 1||selSort == 2)?true:false, (selSort==2)?26:25);
setSortMenuDefaultAction(selSort);
}
}
function isBody(ax)
{
return ax == 2;
}
function getBodyAxis(block)
{
if(block && ( block.axis))
{
return block.axis[1] 
}
return null;
}
function setDisabledtoAllInputCtrlSubMenu(isDisabled)
{
var insertComboBoxControl = workbenchW.getAction("insertComboBoxControl");
var insertListBoxControl = workbenchW.getAction("insertListBoxControl");
var insertRadioButtonControl = workbenchW.getAction("insertRadioButtonControl");
var insertSingleListBoxControl = workbenchW.getAction("insertSingleListBoxControl");
var insertListCheckBoxControl = workbenchW.getAction("insertListCheckBoxControl");
var insertCalendarControl = workbenchW.getAction("insertCalendarControl");
var insertSpinnerControl = workbenchW.getAction("insertSpinnerControl");
var insertSingleSliderControl = workbenchW.getAction("insertSingleSliderControl");
var insertDoubleSliderControl = workbenchW.getAction("insertDoubleSliderControl");
var insertEntryFieldControl = workbenchW.getAction("insertEntryFieldControl");
var insertTreeviewControl = workbenchW.getAction("insertTreeviewControl");
var insertTreeview_multControl = workbenchW.getAction("insertTreeview_multControl");
insertEntryFieldControl.setDisabled(isDisabled);
insertComboBoxControl.setDisabled(isDisabled);
insertRadioButtonControl.setDisabled(isDisabled);
insertListBoxControl.setDisabled(isDisabled);
insertCalendarControl.setDisabled(isDisabled);
insertSingleListBoxControl.setDisabled(isDisabled);
insertListCheckBoxControl.setDisabled(isDisabled);
insertDoubleSliderControl.setDisabled(isDisabled);
insertSpinnerControl.setDisabled(isDisabled);
insertSingleSliderControl.setDisabled(isDisabled);
insertTreeviewControl.setDisabled(isDisabled);
insertTreeview_multControl.setDisabled(isDisabled);
}
function setInputCTRLMenu(elts)
{
if ((elts!=null)&&(elts.length==1) && isTableCell(elts[0]))
{
var dataType = elts[0].dataType;
var kind = elts[0].kind;
var insertComboBoxControl = workbenchW.getAction("insertComboBoxControl");
var insertListBoxControl = workbenchW.getAction("insertListBoxControl");
var insertRadioButtonControl = workbenchW.getAction("insertRadioButtonControl");
var insertSingleListBoxControl = workbenchW.getAction("insertSingleListBoxControl");
var insertListCheckBoxControl = workbenchW.getAction("insertListCheckBoxControl");
var insertCalendarControl = workbenchW.getAction("insertCalendarControl");
var insertSpinnerControl = workbenchW.getAction("insertSpinnerControl");
var insertSingleSliderControl = workbenchW.getAction("insertSingleSliderControl");
var insertDoubleSliderControl = workbenchW.getAction("insertDoubleSliderControl");
var insertEntryFieldControl = workbenchW.getAction("insertEntryFieldControl");
var insertTreeviewControl = workbenchW.getAction("insertTreeviewControl");
var insertTreeview_multControl = workbenchW.getAction("insertTreeview_multControl");
if(kind == "HIERARCHY")
{
insertEntryFieldControl.setDisabled(true);
insertComboBoxControl.setDisabled(true);
insertRadioButtonControl.setDisabled(true);
insertListBoxControl.setDisabled(true);
insertCalendarControl.setDisabled(true);
insertSingleListBoxControl.setDisabled(true);
insertListCheckBoxControl.setDisabled(true);
insertDoubleSliderControl.setDisabled(true);
insertSpinnerControl.setDisabled(true);
insertSingleSliderControl.setDisabled(true);
insertTreeviewControl.setDisabled(false);
insertTreeview_multControl.setDisabled(false);
}
else
{
switch(dataType)
{
case _dataType.date:
case _dataType.dateTime:
insertEntryFieldControl.setDisabled(false);
insertComboBoxControl.setDisabled(false);
insertRadioButtonControl.setDisabled(false);
insertListBoxControl.setDisabled(false);
insertCalendarControl.setDisabled(false);
insertSingleListBoxControl.setDisabled(false);
insertListCheckBoxControl.setDisabled(false);
insertDoubleSliderControl.setDisabled(true);
insertSpinnerControl.setDisabled(true);
insertSingleSliderControl.setDisabled(true);
break;
case  _dataType.num :
if (kind == "MEASURE")
{
insertEntryFieldControl.setDisabled(false);
insertComboBoxControl.setDisabled(true);
insertRadioButtonControl.setDisabled(true);
insertListBoxControl.setDisabled(true);
insertCalendarControl.setDisabled(true);
insertSingleListBoxControl.setDisabled(true);
insertListCheckBoxControl.setDisabled(true);
insertDoubleSliderControl.setDisabled(false);
insertSpinnerControl.setDisabled(false);
insertSingleSliderControl.setDisabled(false);
}
else if ((kind == "DIMENSION") || (kind == "ATTRIBUTE"))
{
insertEntryFieldControl.setDisabled(false);
insertComboBoxControl.setDisabled(false);
insertRadioButtonControl.setDisabled(false);
insertListBoxControl.setDisabled(false);
insertCalendarControl.setDisabled(true);
insertSingleListBoxControl.setDisabled(false);
insertListCheckBoxControl.setDisabled(false);
insertDoubleSliderControl.setDisabled(false);
insertSpinnerControl.setDisabled(false);
insertSingleSliderControl.setDisabled(false);
}
break;
case  _dataType.txt :
if ((kind == "DIMENSION") || (kind == "ATTRIBUTE"))
{
insertEntryFieldControl.setDisabled(false);
insertComboBoxControl.setDisabled(false);
insertRadioButtonControl.setDisabled(false);
insertListBoxControl.setDisabled(false);
insertCalendarControl.setDisabled(true);
insertSingleListBoxControl.setDisabled(false);
insertListCheckBoxControl.setDisabled(false);
insertDoubleSliderControl.setDisabled(true);
insertSpinnerControl.setDisabled(true);
insertSingleSliderControl.setDisabled(true);
}
break;
}
}
}
else
{
setDisabledtoAllInputCtrlSubMenu(true)
}
}
function getBlock(elt)
{
if(elt)
{
if(elt.className == "block")
return elt
if(isTableCell(elt)) 
return elt.parent.parent
}
return null;
}
function getBlockBidFromElt(elt)
{
if(elt)
{
if(elt.className == "block")
return elt.bid
if(isTableCell(elt)) 
return elt.parent.parent.bid
}
return null;
}
function setElemLink(elts)
{
var elemLinkMenu=workbenchW.getAction("elementLinkMenu");
var addElementlink=workbenchW.getAction("addElementlink");
var editElementlink=workbenchW.getAction("editElementlink");
var removeElementlink=workbenchW.getAction("removeElementlink");
var filterByInputControl = workbenchW.getAction("filterByInputControl");
if ((elts!=null)&&(elts.length==1) && (elts[0].className == "block" || isTableCell(elts[0])) && _supportInputForms )
{
elemLinkMenu.setDisabled(false);
addElementlink.setDisabled(false);
editElementlink.setDisabled(true);
removeElementlink.setDisabled(true);
filterByInputControl.setDisabled(false);
addElementlink.check(false);
editElementlink.check(false);
removeElementlink.check(false);
if(_inputFormBlocks!=null)
{
var blkID = getBlockBidFromElt(elts[0])
for(var i=0; i<_inputFormBlocks.length; i++)
{
if(blkID == _inputFormBlocks[i].bid)
{
addElementlink.setDisabled(true);
editElementlink.setDisabled(false);
removeElementlink.setDisabled(false);
filterByInputControl.setDisabled(true);
break;
}
}
}
}
else
{
elemLinkMenu.setDisabled(true);
addElementlink.setDisabled(true);
editElementlink.setDisabled(true);
removeElementlink.setDisabled(true);
filterByInputControl.setDisabled(true);
addElementlink.check(false);
editElementlink.check(false);
removeElementlink.check(false);
}
}
function getSort(block, ax,id)
{        
var axis;
if(isBody(ax))
axis = getBodyAxis(block);
else   
axis=block.axis[ax]
    if( id == null && isSectionFn(block) ) 
{        
    id = block.axis[1].vars[0]
}                
return  flatFindbyId(axis.sorts,id)                    
}
function hasSortsFn(elt) 
{
if((elt) && (isTableFn(elt) || isGraphBlock(elt)))
{
var axisArr = isGraphBlock(elt)?elt.groups:elt.axis
for(var i=0;i<axisArr.length;i++)
{
if(( axisArr[i].sorts) && ( axisArr[i].sorts.length >0 ))
return true;
}
}
else if((elt)  && isTableCell(elt) )
{
var blk = elt.parent.parent
var srt = null
for(var i=0; i<blk.axis.length;i++)
{
if(blk.axis[i].sorts && blk.axis[i].sorts.length > 0)
{
var srt = flatFindbyId(blk.axis[i].sorts,elt.id) 
if(srt)
return true;
}
}
return (srt != null)
}
return false;
}
function setSort(elts,id,bReportCellWithoutAxis)
{
var selSort=null, ax=-1, iconDelta=0, bSort = null;
var row= 1, bSection = true;
var sortMenu = (typeof(id)=="undefined")?workbenchW.getAction("sortMenu"):workbenchW.getAction(id)
var subSort = workbenchW.getAction("sortSubMenu")
if ((elts!=null)&&(elts.length==1))
{
var elt=elts[0]
if (elt!=null)
{
var id=getCellFormulaOrId(elt), block=null,cn=elt.className, axis = null;
var srt = null;
if (cn=="reportCell")
{
if(isSectionCell(elt) || 
(isCellInSection(elt) && (elt.kind && elt.kind == "MEASURE")))
{
var section = elt.parent.parent;
srt = getSort(section,row,id);
if(srt)
bSort = true;
else
bSort = hasSortsFn(section);
selSort= srt!= null?getNumSortKind(srt.kind):0
setSelSort(selSort,bSort,bSection); 
sortMenu.setDisabled(false);
subSort.setDisabled(false);
}
else if (isTableCell(elt) )
{
var p=elt.parent
block=elt.parent.parent
var ax=getTableCellAxis(elt,false)
if(!bReportCellWithoutAxis) 
bReportCellWithoutAxis = isReportCellWithoutAxis(elt)
if (ax!=-1 && (typeof(elt.nestedExpressionID) == "undefined"))
{
axis=block.axis[ax]
if (isInAxis(axis,elt) || !bReportCellWithoutAxis)
{
srt = getSort(block,ax,id);
if(srt)
bSort = true;
else
bSort = hasSortsFn(block);
selSort= srt!= null?getNumSortKind(srt.kind):0
setSelSort(selSort,bSort); 
sortMenu.setDisabled(false);
subSort.setDisabled(false);
} 
else {
   if(bReportCellWithoutAxis)
   {
    var block = elt.parent.parent
bSort=  hasSortsFn(block)
setSelSort(-1,bSort);
sortMenu.setDisabled(false);
subSort.setDisabled(false);
   }
}
}
else if(typeof(elt.nestedExpressionID) != "undefined")
{ 
ax = getNestedExpressionAxis(elt)
if( ax != -1)
{
var exp = elt.formula
if (elt.isNameOf) { 
exp = elt.nestedExpressionID 
}
srt = getSort(block, ax, exp);
if(srt)
bSort = true;
else
bSort = hasSortsFn(block);
selSort= srt!= null?getNumSortKind(srt.kind):0
setSelSort(selSort,bSort); 
sortMenu.setDisabled(false);
subSort.setDisabled(false);
}
}
else  
{      
   if(!bReportCellWithoutAxis) 
   bReportCellWithoutAxis = isReportCellWithoutAxis(elt)
   if(bReportCellWithoutAxis)
   {
    var block = elt.parent.parent
bSort=  hasSortsFn(block)
setSelSort(-1,bSort);
sortMenu.setDisabled(false);
subSort.setDisabled(false);
   }
                    }
}
else
{
    setSelSort(0,false); 
sortMenu.setDisabled(true);
subSort.setDisabled(true);
                }
}
else if(elt.className=="section")
{
srt = getSort(elt,row,null);
if(srt)
bSort = true;
else
bSort = hasSortsFn(elt);
selSort= srt!= null?getNumSortKind(srt.kind):0
setSelSort(selSort,bSort,bSection); 
sortMenu.setDisabled(false);
subSort.setDisabled(false);
}
else if(isTableFn(elt) || isGraphBlock(elt))
{ 
bSort=  hasSortsFn(elt)
setSelSort(-1,bSort);
if(selectedChartArea)
sortMenu.setDisabled(true);
else
{
sortMenu.setDisabled(false);
subSort.setDisabled(false);
}
} 
else
{
sortMenu.setDisabled(true)
subSort.setDisabled(true);
}
}
else 
{
sortMenu.setDisabled(true)
subSort.setDisabled(true);
}
}
else 
{
sortMenu.setDisabled(true)
subSort.setDisabled(true);
}
}
function getNumSortKind(strKind)
{
return strKind=="asc"?1:2
}
function resetFormula()
{
var elts = getSelectedElts();
setFormula(elts)
}
function getAggregationLabel(aggFct)
{
var label="";
switch (aggFct)
{
case 'AVERAGE':
label='Average'
break
case 'COUNT':
label='Count'
break
case 'DELEGATED':
label='Database delegated'
break
case 'MAX':
label='Max'
break
case 'MIN':
label='Min'
break
case 'NONE':
label='None'
break
case 'SUM':
label='Sum'
break
}
return label;
}
function initCurrentBlockType(intTypeToXYType, sBid) 
{
var blockElt=null
var blockType=-1
if (doc&&(sBid==null))
{
if (selectedBid)
{
selectedBid.each(function(pair) {
var i = pair.key;
sBid=""+i
throw $break;
});
}
}
if (sBid!="")
{
var elt = findByBID(doc,sBid)
if (elt)
{
if (elt.className=="block") {
blockElt=elt
} else if (elt.className=="tableCell") {
blockElt=elt.parent.parent.parent
}
if (blockElt) {
applyBid = blockElt.bid
blockType=blockElt.blockType
nDimDetails=blockElt.block.nDimDetails
nMeasures=blockElt.block.nMeasures
}
}
}
var a = new Array
a = intTypeToXYType[blockType]
if (a)
{
curBlockType = a[0]
curBlockSubType = a[1]
}
}
function canApplyTurnTo(selBlockType, selBlockSubType, nDimDetails, nMeasures)
{
if (selBlockType == -1)
return false
if (selBlockSubType == -1) 
return false
if ((selBlockType == curBlockType) && (selBlockSubType == curBlockSubType)) 
return false
if (selBlockType == 0) 
return true;
if (selBlockType == 4) 
return ((nDimDetails >= 1) && (nMeasures >= 1))
if ((selBlockType == 5) && (selBlockSubType >= 2)) 
return ((nDimDetails >= 0) && (nMeasures >= 1))
return ((nDimDetails >= 1) && (nMeasures >= 1))
}
function selectNewBlock()
{
_globalWOMCallback = selectNewBlock_globalWOMCallback
oldEntry = strEntry
}
function selectNewBlock_globalWOMCallback()
{
_globalWOMCallback = null
if (sNewChartBID == "") return
changeEntry(strEntry)
_newBlockBid = parseInt(sNewChartBID)
    deselectAll(_newBlockBid)
    selectSingle(_newBlockBid)
frameNav('DlgFrame', url)
}
function simulateDragDropAction(reType, type)
{
DDInitMethod = DDInitAction
DDActionMethod = DDExecuteAction
_DDType =type;
_DDReType = reType;
_isDDEnabled=true;
}
function DDInitAction(lyr,cn)
{
var doAction = true;
_DDTxt="No action is allowed here" + " " + "(Press ESC Key to cancel this action)"
_DDAction=null
var _srcIsTable=false,_srcIsChart=false,_srcIsCell=false, _srcIsSect=false, _tgIsCont=false,_tgIsHeaderFooter=false,_tgIsTable=false,_tgIsChart=false,_tgIsCell=false
if (_DDReType == "table")
{
_srcIsTable=true
} else if (_DDReType == "chart") 
{
_srcIsChart=true
} else if (_DDReType == "section") 
{
_srcIsSect=true
} else 
{
_srcIsCell=true
}
var bid=lyr.getAttribute?lyr.getAttribute("bid"):null
var elt=findByBID(doc,bid);
switch (cn)
{
case "pageHeader":
case "pageFooter":
_tgIsHeaderFooter=true;
_tgIsCont=true
break
case "body":
case "section":
case "cell":
case "reportCell":
_tgIsCont=true 
break
case "block":
_tgIsCont=true 
break
}
if (_tgIsCont) {
if (_srcIsChart) {
_DDTxt = "Click to insert the chart here" + " " + "(Press ESC Key to cancel this action)"
_DDAction = _DDActionAdd
}
else 
if (_srcIsTable) {
_DDTxt = "Click to insert the table here" + " " + "(Press ESC Key to cancel this action)"
_DDAction = _DDActionAdd
}
else 
if (_srcIsCell) {
_DDTxt = "Click to insert the cell here" + " " + "(Press ESC Key to cancel this action)"
_DDAction = _DDActionAdd
}
else 
if (_srcIsSect) {
if (!_tgIsHeaderFooter) {
_DDTxt = "Click to insert the section here" + " " + "(Press ESC Key to cancel this action)"
_DDAction = _DDActionAdd
}
}
} 
else 
{
doAction = false
}
_DDIconUrl=null;
if (doAction) {
if (_DDReType == "table") {
_DDIconUrl = _img + "typeIcons.gif"
_DDIdx = getTableTypeIcon(_DDType);
}
else if (_DDReType == "chart") {
_DDIconUrl = _root + chartImg(_DDType).src;
_DDIdx = 0;
}
else if (_DDReType == "section") {
_DDIconUrl = _img + "typeIcons.gif"
_DDIdx = 2;
}
else if (_DDReType == "cell") {
_DDIconUrl = _img + "typeIcons.gif"
_DDIdx = 53;
}
}
}
function DDExecuteAction(lyr,cn,e)
{
_isDDEnabled=false
if (lyr && _DDAction!=null)
{ 
var bid=lyr.getAttribute?lyr.getAttribute("bid"):null
var elt=findByBID(doc,bid);
var targetBid=bid;
var url="";
var pageContainer = getPageContainer();
var z=getZoom()/100;
var fr=getReportFrame();
var parentElt=null,parentLyr=null;
var isChartZone = (cn=="chartArea");
if(isTableCell(elt) 
|| isFreeCell(elt) 
|| isSectionCell(elt) || isCellInSection(elt) 
|| isChartZone ) 
{
parentElt=getParentContainer(elt);
parentLyr=getParentLayerFromBid(lyr, parentElt.bid);
updateContainerIdRefBid();
}
if(parentLyr!=null)
{
var xybid = getClickCoordinatesInContainer(parentLyr,e);
_insertCursorX=xybid.x
_insertCursorY=xybid.y
_insertRow=xybid.row
}
if(parentElt!=null)
targetBid = parentElt.bid;
var p=urlParams(false,true);
if (p!="") 
{
wt()
p += "&sX=" + pixelToMetrics(_insertCursorX, _dpi) 
p += "&sY=" + pixelToMetrics(_insertCursorY, _dpi) 
p += "&sRow="  + _insertRow
if (_DDReType == "table") 
{
url = "processTurnToTable"+_appExt
p += "&tableType=" + _DDType
p += "&sTargetBid=" + targetBid
if (_DDAction == _DDActionAdd)
{
if(_showTurnToDlg)
{
iAction= ChartDialogLayout.InsertFull
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type="+_DDType+"&bid="+targetBid)
return;
}
p += "&expsAr="+ convURL(getSelectedDictionaryExpsJSON());
}
else
{
if(_showTurnToDlg)
{
iAction= ChartDialogLayout.TableTurnTo
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type="+_DDType+"&bid="+targetBid)
return;
}
p +="&sAction=turnTo";
}
}
if (_DDReType == "chart") {
url = "processTurnToChart" + _appExt
p += "&chartType=" + _DDType
p += "&sTargetBid=" + targetBid
if (_DDAction == _DDActionAdd) 
{
if(_showTurnToDlg)
{
iAction= ChartDialogLayout.InsertFull
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type="+_DDType+"&bid="+targetBid)
return;
}
p += "&expsAr="+ convURL(getSelectedDictionaryExpsJSON());
}
else
{
if(_showTurnToDlg)
{
iAction= ChartDialogLayout.TableTurnTo
wt()
frameNav("DlgFrame","language/"+_lang+"/html/blockTypeAndFeedDialog.html?type="+_DDType+"&bid="+targetBid)
return;
}
p +="&sAction=turnTo";
}
}
if (_DDReType == "section") 
{
url = "processSetSection"+_appExt
p += "&sTargetBid=" + targetBid
p += "&sRefreshRMNode=yes"
_paramsInsertSection = url+p;
showDictionaryDialog(selectSectionOKCB,false,"dp",null,preFilterSection);
return;
}
if (_DDReType == "cell") 
{
url = "processAddCell"+_appExt
p += "&sTargetBid=" + targetBid
p += "&sNewCellType=" + _DDType
}
setReportUrl(url+p,true);
}
}
}
function preFilterSection()
{
return getFilteredDictionaryByKind(null,_msr);
}
function selectSectionOKCB(tree)
{
var sels = tree.getSelections();
var sectionId =  getSectionExpJSON(sels);
if(sectionId!="")
{
_paramsInsertSection+="&expsAr="+convURL(sectionId);
wt();
setReportUrl(_paramsInsertSection,true);
}
}
function getSectionExpJSON(sels)
{
var expsJson="";
if(sels && sels.length >0)
{
var ids = new Array;
for (var i = 0; i < sels.length; i++) 
{
var sel=sels[i];
if(!(sel.custom) && (sel.userData) && (sel.userData.kind!=_msr))
{
ids[0] = sel.userData.id
break;
}
}
if(ids.length>0)
expsJson=ids.toJSON();
}
return expsJson;
}
function getLPDictionarySelections()
{
var sels = new Array;
if(WS._showLeftPane==_paneState.normal && WS._leftPaneSel=="resultObj")
{
var lPane = workbenchW.getPerspective().getLeftPane().getFrame();
sels = lPane.dicTree.getSelections();
}
return sels;
}
function getSelectedDictionaryExpsJSON()
{
var expsJson="";
var sels = getLPDictionarySelections();
if(sels.length >0)
{
var ids = new Array, cpt=0;
for (var i = 0; i < sels.length; i++) 
{
var sel=sels[i];
if(!sel.custom && sel.userData)
{
ids[cpt++] = sel.userData.id
}
}
if(ids.length>0)
expsJson=ids.toJSON();
}
return expsJson;
}
_aboutStructure = null
_aboutAjaxProcessing=false 
function ajaxAboutStructure(postCB)
{
if (_aboutStructure != null)
{
frameNav("DlgFrame","language/"+_lang+"/html/aboutDialog.html")
return
}
if(_aboutAjaxProcessing) return; 
_aboutStructure = null 
_aboutAjaxProcessing = true 
var url =  _root + "ajaxIncAbout" + _appExt
url += urlParamsNoBID()
ajaxUpdater({"url":url, "postCB":postCB, "ajaxErrorCB":manageAjaxError})
}
function fillAboutDefStructure(aboutObj)
{
_aboutAjaxProcessing = false; 
if (typeof(aboutObj.displayErrorMessage) != "undefined")
return;
_aboutStructure = aboutObj
frameNav("DlgFrame","language/"+_lang+"/html/aboutDialog.html")
}
function updateAboutEvent()
{
ajaxAboutStructure(fillAboutDefStructure);
}
function showAboutDialog()
{
wt()
updateAboutEvent();
}
_dictionaryDialog=null 
_dictionaryTree=null 
_dictionaryStructure=null 
_dictionaryParams=new Object 
_dictionaryAjaxProcessing=false 
function getDictionary()
{
return _dictionaryStructure;
}
function setDictionary(dico)
{
_dictionaryStructure=dico;
}
function isMultiDP() {
var dict = getDictionary()
if (null == dict) return false
return (dict.byQuery.DataProviders.size() > 1)
}
function getDPNameFromId(id) {
var dict = getDictionary(), splitDPid = id.split(".")
if ((null == dict) || (splitDPid.length < 2)) return false
var DPs = dict.byQuery.DataProviders, DPid = splitDPid[0]
for (var i=0; i < DPs.length; i++) {
if (DPid == DPs[i].id) return DPs[i].name
}
return null
}
function isDPNotDS(id) {
var splitDPid = id.split(".")
if (splitDPid.length > 1) {
return (splitDPid[0].indexOf("DP") == 0)
}
return false
}
function getDictionaryWithoutStrippedObjects()
{
return getFilteredDictionaryByParam("isStripped",false);
}
function ajaxDictionaryStructure(postCB)
{
if(_dictionaryAjaxProcessing) return; 
setDictionary(null); 
_dictionaryAjaxProcessing = true; 
var url =  _root + "ajaxIncObjects" + _appExt
url += urlParamsNoBID()
ajaxUpdater({"url":url, "postCB":postCB, "ajaxErrorCB":manageAjaxError});
}
function fillDictionaryStructure(jsonObj)
{
setDictionary(jsonObj);
_dictionaryAjaxProcessing = false; 
}
function updateDictionaryEvent()
{
ajaxDictionaryStructure(fillDictionaryStructure);
}
function showDictionaryDialog(okCB,multi,display,beforeShowCB,customizeDicoCB,clickTreeCB,dlgLabel,xtraNodeCB)
{
_dictionaryParams.okCB = okCB; 
_dictionaryParams.beforeShowCB = beforeShowCB; 
_dictionaryParams.multi = multi?multi:false; 
_dictionaryParams.display = display?display:"dp"; 
_dictionaryParams.customizeCB = customizeDicoCB; 
_dictionaryParams.clickCB = clickTreeCB;
_dictionaryParams.label = dlgLabel;
_dictionaryParams.xtraNodeCB = xtraNodeCB;
if(_dictionaryStructure == null)
ajaxDictionaryStructure(delayShowDictionaryDialog);
else
delayShowDictionaryDialog();
}
function delayShowDictionaryDialog(jsonObj)
{
if(jsonObj) 
fillDictionaryStructure(jsonObj)
var initialW = 350;
var initialH = 350;
if(_dictionaryDialog == null)
{
_dictionaryDialog=new_FrameDlgWidget({ type:_noNaviFrame,
             id:"_dictionaryDialog",title:"Available Objects",
             width:initialW,height:initialH,
             defaultCB:dictionaryDialogOKCB,             
             resizeable:true,
             resizeCB:resizeDictionaryDlgCB, minWidth:150, minHeight:150
             });
_dictionaryTree = new_TreeWidget({id:"_dictionaryTree",w:initialW-16, h:initialH-60, bgClass:"panelzone",clickCB:dictionaryTreeClickCB, doubleClickCB:dictionaryTreeDClickCB});    
_dictionaryLabel = new_Widget({id:"_dictionaryLabel"});
if (!_dictionaryDialog.isHTMLSet())
{
var html="<div id='_dictionaryLabel' style='margin-left:4px;margin-bottom:4px;' ></div>";
html+=_dictionaryTree.getHTML();
_dictionaryDialog.setFrameHTML(html);
}
_dictionaryDialog.init();
_dictionaryTree.init();
_dictionaryLabel.init();
}
_dictionaryTree.setMultiSelection(_dictionaryParams.multi);
_dictionaryDialog.getOKBtn().setDisabled(false);
_dictionaryLabel.setDisplay(_dictionaryParams.label!=null);
_dictionaryLabel.setHTML((_dictionaryParams.label!=null)?_dictionaryParams.label:"");
resizeDictionaryDlgCB(initialW, initialH);
var customDico = null;
if(_dictionaryParams.customizeCB)
customDico=_dictionaryParams.customizeCB();
buildDSLTree(_dictionaryTree, self, _dictionaryParams.display, customDico, _dictionaryParams.xtraNodeCB);
if(_dictionaryParams.beforeShowCB)
_dictionaryParams.beforeShowCB(_dictionaryTree);
_dictionaryDialog.show(true);
var sub = _dictionaryTree.sub
if (sub && sub[0])
sub[0].select(true)
}
function greyNonUsableObject(node)
{
if (node.userData.isNotReportUsable) {
node.userData.allowInFilter=false
node.setGrayStyle(true);
}
node.expanded=true
}
function treeItemclickCBForNonUsableReportObj(userData)
{
var dlgOKBtn = _dictionaryDialog.okBtn;
if (userData && userData.isNotReportUsable) {
dlgOKBtn.setDisabled(true)
} else {
dlgOKBtn.setDisabled(false)
}
}
function resizeDictionaryDlgCB(w,h)
{
var hButton = 70;
var hLabel = _dictionaryLabel.isDisplayed()?(_dictionaryLabel.getHeight()+5):0;
_dictionaryDialog.resize(w,h);
_dictionaryTree.resize(w-15,h-hButton-hLabel);    
}
function dictionaryDialogOKCB()
{
var sels = _dictionaryTree.getSelections();
if(sels.length == 0 || sels[0].userData == null || sels[0].userData.kind == null ) 
return;
_dictionaryDialog.show(false);
if(_dictionaryParams.okCB)
_dictionaryParams.okCB(_dictionaryTree);
}
function dictionaryTreeClickCB(data)
{
if(_dictionaryParams.clickCB)
_dictionaryParams.clickCB(data);
}
function dictionaryTreeDClickCB(data)
{
var dlg = _dictionaryDialog;
if(!dlg.getOKBtn().isDisabled()) 
dictionaryDialogOKCB()
}
function fillDictionaryTree(tree,win,display,afterCB,customizeCB,xtraNodeCB)
{
var delay = function() { fillDictionaryTree(tree,win,display,afterCB,customizeCB,xtraNodeCB)};
if(_dictionaryStructure == null)
{
ajaxDictionaryStructure(fillDictionaryStructure);
setTimeout(delay,100);
}
else 
{
var customDico=customizeCB? customizeCB():null;
buildDSLTree(tree,win,display,customDico,xtraNodeCB) 
if(afterCB)
afterCB(tree);
}
}
function buildDSLTree(tree,win,display,customDictionary,xtraNodeCB)
{
var dico = getDictionary();
if(customDictionary!=null) 
dico = customDictionary;
var jsonObj = display=="dp"? dico.byQuery:dico.byAlpha;
var elem,root,node;
var imgPath = _root+_img;
var docName = getMLDocumentName();
tree.setCustomTooltipWidget(new_ChildrenCustomTooltipWidget({id:tree.id+"_customTooltip",win:win}));
tree.setTooltipOnMouseOver(true);
tree.deleteAll();
elem=win.newTreeWidgetElemParams({
iconId:2,
name:docName,
userData:null,
iconUrl:imgPath+"docmap.gif"
});
elem.expanded=true; 
elem.custom = true; 
elem.filterable =false; 
elem.documentFolder = true; 
root = tree.add(elem);
if(!jsonObj) return; 
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = 0; i<len; i++ )
{
var dp = dps[i];
var name = dp.name +  (dp.dsName?(" - "+dp.dsName):"");
elem=win.newTreeWidgetElemParams({
iconId:1,
iconSelId:9, 
name:name,
userData:dp,
iconUrl:imgPath+"qualificationIcons.gif"
});
elem.expanded=true;
elem.custom = true; 
elem.filterable =false; 
node = root.add(elem);
if(dp.children)
{
for(var j=0; j<dp.children.size(); j++)
{
buildDSLTreeNode(node,dp.children[j],win,null,xtraNodeCB);
}
}
}
}
if(jsonObj.Links && jsonObj.Links.length>0)
{
var links = jsonObj.Links, len = links.length
elem=win.newTreeWidgetElemParams({
iconId:1,
iconSelId:9, 
name:"Merged Dimensions",
userData:links,
iconUrl:imgPath+"qualificationIcons.gif"
});
elem.custom = true; 
elem.filterable =false; 
elem.mergeFolder = true; 
node = root.add(elem);
if(len>0)
elem.expanded=true;
for(var i = 0; i<len; i++)
{
var link = links[i];
var obj = new_BOObj(link);
obj.DPNames= new Array();
for(var j = 0; j<link.children.length; j++)
{
obj.DPNames[j]= link.children[j].dpName;
}
completeObjectWithDPName(link.children,true);
buildDSLTreeNode(node,link,win,obj,xtraNodeCB);
}
}
if(jsonObj.AvailableObjects)
{
var objects = jsonObj.AvailableObjects, len = objects.length
completeObjectWithDPName(objects);
for(var i = 0; i<len; i++)
{
if(objects[i].kind == _linkDim) 
{
var link = objects[i]; 
var obj = new_BOObj(link);
obj.DPNames= new Array();
for(var j = 0; j<link.children.length; j++)
{
obj.DPNames[j]= link.children[j].dpName;
}
completeObjectWithDPName(link.children,true);
buildDSLTreeNode(root,link,win,obj,xtraNodeCB);
}
else
buildDSLTreeNode(root,objects[i],win,null,xtraNodeCB);
}
}
if(jsonObj.Variables)
{
var vars = jsonObj.Variables, len = vars.length
elem=win.newTreeWidgetElemParams({
iconId:1,
iconSelId:9, 
name:"Variables",
userData:vars,
iconUrl:imgPath+"qualificationIcons.gif"
});
elem.custom = true; 
elem.filterable =false; 
elem.variableFolder = true; 
node = root.add(elem);
if(len>0)
elem.expanded=true;
for(var i = 0; i<len; i++)
{
var item = vars[i];
var obj = new_BOObj(item);
obj.isVariable=true; 
buildDSLTreeNode(node,item,win,obj,xtraNodeCB);
}
}
if(jsonObj.Formulas)
{
var fmls = jsonObj.Formulas, len = fmls.length
elem=win.newTreeWidgetElemParams({
iconId:1,
iconSelId:9, 
name:"Formulas",
userData:fmls,
iconUrl:imgPath+"qualificationIcons.gif"
});
elem.custom = true; 
elem.filterable =false; 
node = root.add(elem);
if(len>0)
elem.expanded=true;
for(var i = 0; i<len; i++)
{
var item = fmls[i];
var obj = new_BOObj(item);
obj.isFormula=true; 
buildDSLTreeNode(node,item,win,obj,xtraNodeCB);
}
}
tree.rebuildHTML();
}
function buildDSLTreeNode(node,item,win,boObj,xtraNodeCB)
{
var imgPath = _root+_img;
var obj = boObj? boObj: new_BOObj(item); 
var name = item.completeName?item.completeName:item.name;
var icn = mapCustomKindToTreeIcon(item);
var elem=win.newTreeWidgetElemParams({
iconId:icn.idx,
name:name,
userData:obj,
tooltip:getCustomTooltip(obj),
iconUrl:icn.src
});
elem.setBoldStyle(obj.isStripped);
if(xtraNodeCB)
xtraNodeCB(elem);
var newnode = node.add(elem); 
if(item.children)
{
for(var i=0; i<item.children.size(); i++)
{
buildDSLTreeNode(newnode,item.children[i],win, null, xtraNodeCB)
}
}
}
function completeObjectWithDPName(arr,isMerge)
{
var len = arr.length;
if(isMerge == true)
{
for(var i=0;i<len;i++)
arr[i].completeName=arr[i].name+" ("+arr[i].dpName+")";
}
else
{
var arrNames = new Array;
for(var i=0;i<len;i++)
arrNames[i]=arr[i].name;
for(var i=0;i<len;i++)
{
if(arr[i].completeName) continue;
var s = arr[i].name;
var hasSibling = (arrNames.lastIndexOf(s)!=i);
if(hasSibling)
{
for(var j=i;j<len;j++)
{
if((arr[j].name == s) && (arr[j].dpName))
arr[j].completeName=s+"("+arr[j].dpName+")";
}
}
}
}
}
function getCustomTooltip(obj)
{
var tooltip="",isEmpty=true,name=obj.name,isHtml=false;
if(obj.dataType)
{
tooltip+="Type:" +  " " + _labDataType[obj.dataType];
isEmpty=false;
}
if((obj.kind == _msr) && (obj.aggregateFct!=""))
{
tooltip+= (isEmpty?"":"\n")+"Aggregation:"+ " " + getAggregationLabel(obj.aggregateFct);
isEmpty=false;
}
if(obj.desc)
{
tooltip+= (isEmpty?"":"\n\n")+ obj.desc;
isEmpty=false;
isHtml=true;
}
if(obj.formula)
{
tooltip+= (isEmpty?"":"\n\n")+ obj.formula;
isEmpty=false;
isHtml=false;
}
if(obj.isFormula)
name="Formulas"
return {title:name,text:tooltip,isHTML:isHtml};
}
var _kindIconArr=[    
       toolboxImg(917), 
       null, 
       toolboxImg(305), 
       toolboxImg(308),
   toolboxImg(383),
       toolboxImg(310),
       null,
       null,
       toolboxImg(304),
       toolboxImg(309),
       toolboxImg(306)
           ];
function mapKindToTreeIcon(kind)
{
var icn = {idx:-1,src:null};
var img = _kindIconArr[kind];
if(img != null)
{
icn.idx = (img.dy/img.h);
icn.src = _root+img.src;
}
return icn;
}
function mapCustomKindToTreeIcon(item)
{
var icnNull = {idx:-1,src:null};
var icn = mapKindToTreeIcon(item.kind);
if(icn.idx==-1)
{
var id = item.id
if(id == "MND")
{
icn.idx = 0;
icn.src = _img + "mnd.png"
}
}
return icn;
}
function getCloneDictionary()
{
var d=getDictionary();
if(d == null)
return null;
var clone = Object.clone(d);
clone.byQuery=Object.clone(d.byQuery);
if(d.byQuery.DataProviders)
{
clone.byQuery.DataProviders=d.byQuery.DataProviders.clone();
cloneChildren(clone.byQuery.DataProviders,d.byQuery.DataProviders)
}
if(d.byQuery.Links)
{
clone.byQuery.Links=d.byQuery.Links.clone();
cloneChildren(clone.byQuery.Links,d.byQuery.Links)
}
if(d.byQuery.Variables)
clone.byQuery.Variables=d.byQuery.Variables.clone();
clone.byAlpha=Object.clone(d.byAlpha);
if(d.byAlpha.AvailableObjects)
{
clone.byAlpha.AvailableObjects=d.byAlpha.AvailableObjects.clone();
cloneChildren(clone.byAlpha.AvailableObjects,d.byAlpha.AvailableObjects)
}
if(d.byAlpha.Variables)
clone.byAlpha.Variables=d.byAlpha.Variables.clone();
if(d.flatDico)
clone.flatDico=d.flatDico.clone();
return clone;
}
function cloneChildren(clone,source)
{
for(var i=0;i<source.size();i++)
{
clone[i]=Object.clone(source[i])
if(source[i].children)
{
clone[i].children=source[i].children.clone();
cloneChildren(clone[i].children,source[i].children);
}
}
}
function getFilteredDictionaryByKind(kind,excludeKind,dico)
{
var newDico = dico?dico:getCloneDictionary();
if(newDico == null) return null; 
for(var view=0;view<2;view ++)
{
var jsonObj = (view==0)?newDico.byQuery:newDico.byAlpha;
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = len-1; i>=0; i--)
{
var dp = dps[i];
if(dp.children)
iterFilterByKind(dp.children,kind,excludeKind);
}
}
if(jsonObj.Links)
iterFilterByKind(jsonObj.Links,kind,excludeKind);
if(jsonObj.AvailableObjects)
iterFilterByKind(jsonObj.AvailableObjects,kind,excludeKind);
if(jsonObj.Variables)
iterFilterByKind(jsonObj.Variables,kind,excludeKind);
if(jsonObj.Formulas)
iterFilterByKind(jsonObj.Formulas,kind,excludeKind);
}
return newDico;
}
function getFilteredDictionaryWithoutStripping(customDico)
{
var newDico = customDico?customDico:getCloneDictionary();
if(newDico == null) return null; 
for(var view=0;view<2;view ++)
{
var jsonObj = (view==0)?newDico.byQuery:newDico.byAlpha;
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = len-1; i>=0; i--)
{
var dp = dps[i];
if(dp.children)
iterFilterWithoutStripping(dp.children);
}
}
if(jsonObj.Links)
iterFilterWithoutStripping(jsonObj.Links);
if(jsonObj.AvailableObjects)
iterFilterWithoutStripping(jsonObj.AvailableObjects);
if(jsonObj.Variables)
iterFilterWithoutStripping(jsonObj.Variables);
if(jsonObj.Formulas)
iterFilterWithoutStripping(jsonObj.Formulas);
}
return newDico;
}
function getFilteredDictionaryByKindArr(kindArr,excludeKind,dico)
{
var newDico = dico?dico:getCloneDictionary();
if(newDico == null) return null; 
for(var view=0;view<2;view ++)
{
var jsonObj = (view==0)?newDico.byQuery:newDico.byAlpha;
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = len-1; i>=0; i--)
{
var dp = dps[i];
if(dp.children)
iterFilterByKindArr(dp.children,kindArr,excludeKind);
}
}
if(jsonObj.Links)
iterFilterByKindArr(jsonObj.Links,kindArr,excludeKind);
if(jsonObj.AvailableObjects)
iterFilterByKindArr(jsonObj.AvailableObjects,kindArr,excludeKind);
if(jsonObj.Variables)
iterFilterByKindArr(jsonObj.Variables,kindArr,excludeKind);
if(jsonObj.Formulas)
iterFilterByKindArr(jsonObj.Formulas,kindArr,excludeKind);
}
return newDico;
}
function iterFilterWithoutHierarchyStripping(arr)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
iterFilterWithoutHierarchyStripping(item.children);
if( (item.kind!=null) && ( ( item.kind==_hchy)  || (item.isStripped)) )
{
arr.splice(i,1);
}
}
}
function iterFilterWithoutStripping(arr)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
{
if(item.kind && item.kind == _hchy)
{
item.children.length=0
}
else
iterFilterWithoutStripping(item.children);
}
if( (item.kind!=null) && item.isStripped )
{
arr.splice(i,1);
}
}
}
function iterFilterByKind(arr,kind,excludeKind)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
iterFilterByKind(item.children,kind,excludeKind);
if(item.kind!=null && ((kind && item.kind!=kind) || (excludeKind && item.kind==excludeKind)))
{
if(!item.children || item.children.size()==0) 
arr.splice(i,1);
}
}
}
function iterFilterByKindArr(arr,kindArr,excludeKind,bBlkCtrl)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
iterFilterByKindArr(item.children,kindArr,excludeKind);
if(item.kind!=null && ((kindArr && kindArr.indexOf(item.kind)<0) || (excludeKind && item.kind==excludeKind)))
{
if(!item.children || item.children.size()==0) 
arr.splice(i,1);
}
}
}
function iterFilterByKindArr(arr,kindArr,excludeKindArr)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
iterFilterByKindArr(item.children,kindArr,excludeKindArr);
if(item.kind!=null && ((kindArr && kindArr.indexOf(item.kind)<0) || (excludeKindArr && excludeKindArr.indexOf(item.kind)>=0)))
{
if(!item.children || item.children.size()==0) 
arr.splice(i,1);
}
}
}
function getFilteredDictionaryByIds(ids,dico)
{
var newDico = dico?dico:getCloneDictionary();
if(newDico == null) return null; 
for(var view=0;view<2;view++)
{
var jsonObj = (view==0)?newDico.byQuery:newDico.byAlpha;
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = len-1; i>=0; i--)
{
var dp = dps[i];
if(dp.children)
iterFilterByIds(dp.children,ids);
}
}
if(jsonObj.Links)
iterFilterByIds(jsonObj.Links,ids);
if(jsonObj.AvailableObjects)
iterFilterByIds(jsonObj.AvailableObjects,ids);
if(jsonObj.Variables)
iterFilterByIds(jsonObj.Variables,ids);
}
return newDico;
}
function iterFilterByIds(arr,ids)
{
if(arr==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
var bRemove=true;
if (ids)
{
if(item.children)
iterFilterByIds(item.children,ids);
for(var j=0;j<ids.length;j++)
{
if(item.id==ids[j])
{
bRemove=false;
break;
}
}
}
if(bRemove)
{
if(!item.children || item.children.size()==0) 
arr.splice(i,1);
}
}
}
function getFilteredDictionaryByParam(key,value,dico)
{
var newDico = dico?dico:getCloneDictionary();
if(newDico == null) return null; 
for(var view=0;view<2;view ++)
{
var jsonObj = (view==0)?newDico.byQuery:newDico.byAlpha;
if(jsonObj.DataProviders)
{
var dps = jsonObj.DataProviders, len = dps.length;
for(var i = len-1; i>=0; i--)
{
var dp = dps[i];
if(dp.children)
iterFilterByParam(dp.children,key,value);
}
}
if(jsonObj.Links)
iterFilterByParam(jsonObj.Links,key,value);
if(jsonObj.AvailableObjects)
iterFilterByParam(jsonObj.AvailableObjects,key,value);
if(jsonObj.Variables)
iterFilterByParam(jsonObj.Variables,key,value);
if(jsonObj.Formulas)
iterFilterByParam(jsonObj.Formulas,key,value);
}
if(newDico.flatDico)
iterFilterByParam(newDico.flatDico,key,value);
return newDico;
}
function iterFilterByParam(arr,key,value)
{
if(arr==null || key==null) return;
var len=arr.size?arr.size():arr.length;
for(var i=len-1;i>=0;i--)
{
var item=arr[i];
if(item.children)
iterFilterByParam(item.children,key,value);
if(typeof(item[key])!="undefined" && item[key]!=value)
arr.splice(i,1);
}
}
function getDictionaryObjectFromId(id)
{
var dico = getDictionary();
if(dico == null || id == null) return null; 
var alpha = dico.byAlpha;
if (alpha.AvailableObjects) 
{
var objs = alpha.AvailableObjects;
for (var i = 0; i < objs.length; i++) {
if (objs[i].id == id) 
return objs[i];
else 
if (objs[i].children) {
var c = objs[i].children;
for (var j = 0; j < c.length; j++) {
if (c[j].id == id) 
return c[j];
}
}
}
}
if (alpha.Variables) 
{
var vars = alpha.Variables;
for (var i = 0; i < vars.length; i++) 
if (vars[i].id == id) 
return vars[i];
}
return null;
}
var dsImgUrl = _root+_img+"typeIcons.gif";
var dsLabelMax = 100;
function fillDocumentStructureTree(ajaxObj,tree,win,excludeClassNames,xtraNodeInfoCB)
{
tree.deleteAll();
if(excludeClassNames==null) 
excludeClassNames=[];
buildDSTree(tree,win,ajaxObj,excludeClassNames,xtraNodeInfoCB);
tree.rebuildHTML();
}
function getDocumentStructureTree(ajaxObj,tree,win,excludeClassNames,xtraNodeInfoCB,isIFMap)
{
if(excludeClassNames==null) 
excludeClassNames=[];
buildDSTree(tree,win,ajaxObj,excludeClassNames,xtraNodeInfoCB,isIFMap);
return tree;
}
function buildDSTree(node,win,ajaxObj,excludeClassNames,xtraNodeInfoCB,isIFMap)
{
var elem=null;
var newNode=null; 
var expanded=false;  
var className = ajaxObj.className ;      
switch(className)
{
case "doc":
var docName = getMLDocumentName(ajaxObj.name);
if (excludeClassNames.indexOf(className) < 0) {
elem=win.newTreeWidgetElemParams({
iconId:_documentIconID,
name:docName,
userData:ajaxObj,
textClass:"treeFilter",
textSelectedClass:"treeFilterSelected",
iconUrl:dsImgUrl
});
elem.expanded = true;
}
    break;
case "report":
if (excludeClassNames.indexOf(className) < 0) {
elem=win.newTreeWidgetElemParams({
iconId:_reportIconID,
name:ajaxObj.name,
userData:ajaxObj,
textClass:"treeFilter",
textSelectedClass:"treeFilterSelected",
iconUrl:dsImgUrl
});
elem.reportIndex = ajaxObj.index;
elem.reportID = ajaxObj.id; 
elem.expanded = (elem.reportIndex == getSelectedReportIndex());
}
break;
case "header":
if (excludeClassNames.indexOf(className) < 0) {
elem=win.newTreeWidgetElemParams({
iconId:_headerIconID,
name:_pageHeader,
userData:ajaxObj,
textClass:(ajaxObj.hidden?'treeGray':'treeFilter'),
textSelectedClass:"treeFilterSelected",
iconUrl:dsImgUrl
});
}            
    break;
case "footer":
if (excludeClassNames.indexOf(className) < 0) {
elem=win.newTreeWidgetElemParams({
iconId:_footerIconID,
name:_pageFooter,
userData:ajaxObj,
textClass:(ajaxObj.hidden?'treeGray':'treeFilter'),
textSelectedClass:"treeFilterSelected",
iconUrl:dsImgUrl
});
}
    break;
case "body":
if (isIFMap)
{
if (excludeClassNames.indexOf(className) < 0) {
elem = win.newTreeWidgetElemParams({
iconId: _bodyIconID,
name: _pageBody,
userData: ajaxObj,
textClass: "treeFilter",
textSelectedClass: "treeFilterSelected",
iconUrl: dsImgUrl
});
elem.expanded = true;
}
}
newNode = node;
    break;
case "section":
if (excludeClassNames.indexOf(className) < 0) {
elem = win.newTreeWidgetElemParams({
iconId: _sectionIconID,
name: ajaxObj.name,
userData: ajaxObj,
textClass:(ajaxObj.hidden?'treeGray':'treeFilter'),
textSelectedClass: "treeFilterSelected",
iconUrl: dsImgUrl
});
elem.expanded = true;
}
    break;
case "wob":
if (excludeClassNames.indexOf(className) < 0) {
elem = win.newTreeWidgetElemParams({
iconId: -1,
name: "Wob",
userData: ajaxObj,
textClass: "treeFilter",
textSelectedClass: "treeFilterSelected",
iconUrl: dsImgUrl
});
}
    break;
case "bag":
newNode = node;
    break;
case "block":
if (excludeClassNames.indexOf(className) < 0) {
var isVisu = ajaxObj.isVisualization, type = ajaxObj.blockType
var url = isVisu ? _root + (chartImg(type)).src : dsImgUrl;
var icon = isVisu ? 0 : getTableTypeIcon(type);
var name = ""
if (isVisu) {
name += ajaxObj.typeName + " : "
} else {
switch(type) {
case  "hTable": 
name += "Horizontal Table" + " : "
break
case "vTable": 
name += "Vertical Table" + " : "
break
case "xTable": 
name += "Cross Table" + " : "
break
case "form": 
name += "Form" + " : "
break
}
}
name += ajaxObj.name
elem = win.newTreeWidgetElemParams({
iconId: icon,
name: name,
userData: ajaxObj,
textClass:(ajaxObj.hidden?'treeGray':'treeFilter'),
textSelectedClass: 'treeFilterSelected',
iconUrl: url
});
}            
    break;
case "reportCell":
if (excludeClassNames.indexOf(className) < 0) {
var name =  shrinkTooltip(ajaxObj.name,dsLabelMax);
elem = win.newTreeWidgetElemParams({
iconId: _cellIconID,
name: name,
userData: ajaxObj,
textClass:(ajaxObj.hidden?'treeGray':'treeFilter'),
textSelectedClass: "treeFilterSelected",
iconUrl: dsImgUrl
});
elem.isSectCell = ajaxObj.isSectCell;
}
    break;
    default: 
        break;                       
}
if (elem != null) 
{
if(xtraNodeInfoCB)
xtraNodeInfoCB(elem);
newNode = node.add(elem);
}
else 
newNode = node;
if( ajaxObj.filters)
{
buildDSFilterTree(newNode,win,ajaxObj.filters,true);           
}
if( ajaxObj.axisSnD)
{
buildDSAxisSnD(newNode,win,ajaxObj.axisSnD,ajaxObj.isVisualization);           
}
if(ajaxObj.children && newNode!=null)
{
var arr = ajaxObj.children;            
    for(var i = 0;i<arr.length;i++)
    { 
buildDSTree(newNode,win,arr[i],excludeClassNames,xtraNodeInfoCB,isIFMap);
    }
}
}
function buildDSFilterTree(node,win,filter,isRoot)
{
var elem = null;
var newNode = null;
var label ="",tooltip=null;
 if(isRoot)
     label+="Filter: "
if(filter.className == "filterNode")
{               
    label+=(filter.combination=="and")?_labOperand[AND]:_labOperand[OR]            
}
if(filter.className == "filter")
{
var name = filter.name
        if (isMultiDP()) {
        var dpName = getDPNameFromId(filter.id)
        if (null != dpName) {
        name = name + " (" + dpName+ ")";
        }
        } 
    label += name +" "+_labFil[filter.operator]+" "; 
    if(filter.values)
    {
    var arr = filter["values"];                
        for(var i = 0;i<arr.length;i++)
        { 
            if(i>0)
                label+=";";
        label += arr[i];
        }
    }
tooltip = label;     
label = shrinkTooltip(label,dsLabelMax);
}
elem=win.newTreeWidgetElemParams({
iconId:_filterIconID,
name:label,
userData:filter,
tooltip:tooltip,
textClass:(filter.fromInputForm?'treeGray':'treeFilter'),
textSelectedClass:'treeFilterSelected',
iconUrl: dsImgUrl
});     
if(elem!=null)
{
elem.expanded=true; 
newNode = node.add(elem); 
}  
if(filter.items)
{
var arr = filter["items"];            
    for(var i = 0;i<arr.length;i++)
buildDSFilterTree(newNode,win,arr[i],false);
}         
}
function buildDSAxisSnD(node,win,axis,isGraph)
{                        
var elem = null;
var newNode = null;
if(axis.length == 1)
{
var items = axis[0].items;
for(var i=0;i<items.length;i++)
{
    var item=items[i];
    var icn = mapKindToTreeIcon(item.kind);
var name=shrinkTooltip(item.name,dsLabelMax);
    elem=win.newTreeWidgetElemParams({
iconId:icn.idx,
name:name,
userData:item,
textClass:(item.hidden?'treeGray':'treeFilter'),
textSelectedClass:'treeFilterSelected',
iconUrl:icn.src
});        
elem.isAxis=true; 
    newNode = node.add(elem); 
} 
}
else
{
if(isGraph)
{
buildAxis(node,win,axis,null);
}
else 
{
buildAxis(node,win,axis,"I_HORIZONTAL");
buildAxis(node,win,axis,"I_VERTICAL");
buildAxis(node,win,axis,"I_BODY");
}
}               
}
function getAxisTitle(axis) 
{
var name =  axis.label;
var id = axis.className;
switch (id)
{
case "I_BODY":
name="Body";
break;
case "I_HORIZONTAL":
name="Columns";
break;
case "I_VERTICAL":
name="Rows";
break;
}
return name; 
}
function buildAxis(node,win,axis,axisId)
{
var elem = null;
var newNode = null;
for(var j=0;j<axis.length;j++)
{
if((axisId==null) || (axisId!=null && axisId==axis[j].className ))
{
elem=win.newTreeWidgetElemParams({
iconId:1,
iconSelId:9, 
name:getAxisTitle(axis[j]),
userData:axis[j],
textClass:'treeFilter',
textSelectedClass:'treeFilterSelected',
iconUrl:_root+_img+"qualificationIcons.gif"
});
elem.expanded=true; 
elem.isAxisFolder=true; 
newNode = node.add(elem);
var items = axis[j].items;
    for(var i=0;i<items.length;i++)
    {
        var item=items[i];
        var icn = mapKindToTreeIcon(item.kind);
var name = shrinkTooltip(item.name,dsLabelMax);
        elem=win.newTreeWidgetElemParams({
iconId:icn.idx,
name:name,
userData:item,
textClass:(item.hidden?'treeGray':'treeFilter'),
textSelectedClass:'treeFilterSelected',
iconUrl:icn.src
});
elem.isAxis=true; 
        newNode.add(elem); 
    } 
}
}
}
function deleteReport()
{ 
goToProcessReportTab(1, _EVT_REP_DELETED,  getReportIdxFromId(DS.iReportID))
}
function addReport()
{
goToProcessReportTab(2, _EVT_REP_ADDED, null, _defaultRepName)
}
function duplicateReport()
{
goToProcessReportTab(3, _EVT_REP_DUPLICATED,  getReportIdxFromId(DS.iReportID))
}
function moveReport(dir)
{
var dest=0;
var from = getReportIdxFromId(DS.iReportID);
if (dir=="first")
dest = 0;
else if ( dir=="previous" )
dest = parseInt(from)-1;
else if ( dir=="next" )
dest = parseInt(from)+1;
else if ( dir=="last" )
dest = DS.arrReports.length-1;
if(dest<0 || dest>=DS.arrReports.length) return;
var data = new Object()
data.from=getReportIdxFromId(DS.iReportID)
data.dest=dest
goToProcessReportTab(4, _EVT_REP_MOVED, data, null, dest)
}
function hasTheSameReportName(newReportName)
{
var len = DS.arrReports.length;
for(var i=0;i<len;i++)
{
if((remSpaceAround(DS.arrReports[i].name))== (remSpaceAround(newReportName)))
{
return true;
}
}
return false;
}
function renameReport(newName)
{
if (newName.length==0)
{
setTimeout('showAlertDialog("The name must contain at least one character.","Web Intelligence",0)',1);
return
}
if (!hasTheSameReportName(newName) )
{
goToProcessReportTab(0, _EVT_REP_RENAMED, getReportIdxFromId(DS.iReportID), newName)
}
}
function goToProcessReportTab(iAction, notify, data, name, sTo)
{
if (notify!=null)
eventManager.notify(notify,data)
var rep = getReportFromId(DS.iReportID)
var drillBar = rep.drillBar
var drillLite = rep.drillLite
var p=urlParams(true,true)
wt()
if (p!="")
{
var frm=self.document.viewerForm
frm.action=_root+"processReportTabs"+_appExt+p+"&iAction="+iAction+(sTo!=null ? ("&sTo="+sTo) : "" ) + (drillLite!=null ? ("&sDrillLite="+drillLite) : "" ) + (drillBar!=null ? ("&sDrillBar="+drillBar) : "" )
frm.target="DlgFrame"
frm.sParam1.value=name ? name : ""
frm.submit();
}
}
function doExpandCollapse(action, elts,expandLevel)
{
wt()
var p = null;
if (_curExpandColInfo == null)
{
p = urlParams(true);
p += "&sExpCollAction=" + action;
}
else {
_curExpandColInfo.action  = action;
if(action == "RESET_COLLAPSE") 
updateParentIdRefBid(); 
p = urlParamsNoBID()
p += "&sExpCollAction=" + _curExpandColInfo.action + "&bid=" + _curExpandColInfo.bid + "&mid=" + _curExpandColInfo.mid + "&refId=" + _curExpandColInfo.idRef
}
p += "&sExpandLevel="+expandLevel;
setReportUrl("processExpandCollapse" + _appExt + p)
} 
function doChartExpandCollapse(action, expColChartZoneInfo,expandLevel)
{
wt()
var p = null;
if(expColChartZoneInfo==null)
 expColChartZoneInfo = _ExpColChartZoneInfoFromContextualMenu;
if (expColChartZoneInfo == null)
{
p = urlParams(true);
p += "&sExpCollAction=" + action;
}
else
{
p = urlParamsNoBID()
p += "&sExpCollAction=" +action + "&bid=" + expColChartZoneInfo.bid + "&mid=" + expColChartZoneInfo.mid +"&refId=" + expColChartZoneInfo.ref
}
p += "&sExpandLevel="+expandLevel;
setReportUrl("processChartExpandCollapse" + _appExt + p)
resetExpColChartZoneInfo();
} 
function interactiveTabsDblClickCB(tab)
{
var tabs = workbenchW.getPerspective().getNaviBar();
var tabEdit=document.getElementById(_editTabWidget)
if (tabEdit==null)
{
append(document.body,'<input ondragstart="return true" onselectstart="event.cancelBubble=true;return true" class="textinputs" type="text" id="'+_editTabWidget+'" style="display:none;zindex:200;position:absolute">',document)
tabEdit=document.getElementById(_editTabWidget)
tabEdit.onkeydown=tabEdit_keyDown
tabEdit.onblur=tabEdit_lostFocus
tabEdit.onmousedown=tabEdit_mouseDown
}
var l = tab.midimgLyr
var st=tabEdit.style
st.position="absolute"
st.zIndex=2000
st.left=""+(getPos(l).x-tabs.divLyr.scrollLeft)+"px"
st.top=""+(getPos(l).y + (_saf ? -2 : 1))+"px"
st.width=""+(l.offsetWidth-5)+"px"
st.height=""+(tab.txtLyr.offsetHeight+(_saf ? -1 : -7))+"px"
st.display=""
___oldTabEdirValue=tab.name
tabEdit.value=tab.name
tabEdit.isDisplayed=true
_submitEditInPlace=true;
setTimeout("delayed_dblClickTabWidget()",1)
}
function delayed_dblClickTabWidget()
{
var tabEdit=document.getElementById(_editTabWidget)
tabEdit.select()
}
function reportNameKeyUpCB()
{
if (_ie)
e=event
var key=_ie?e.keyCode:e.which
if (key==27) 
{
setReportNameToolbox();
eventCancelBubble(e);
}
}
function removeReportElement(elts,confirm, cellOnly)
{
if (!isEnableUserRight(WS._usrInsertDuplicate)) return
if (elts.length==0) return
var cellOnly = cellOnly?cellOnly:false
_arrRMSecElts = new Array
_elementBID = new Array
var _elementHHFBID = new Array
var _elementVHFBID = new Array
var _elementXHBID  = new Array
var _elementXFBID  = new Array
var _elementForm   = new Array
_isRow = new Array
var arrSectMsCells = new Array
var countElts = elts.length
var askRow = false
var askCol = false
var askRowCol = false
for (var i = 0; i < elts.length; i++)
{
var e=elts[i];
if (e.className == 'section')
{
if (typeof(arrSectMsCells[e.bid]) == 'undefined')
{
_arrRMSecElts.push(e)
arrSectMsCells[e.bid]=1
}
}
else
if (e.className == 'reportCell' && !isTableCell(e)) 
{
if ((e.parent.parent.className == 'section') && e.isSectionCell)
{
if (confirm)
{
if (typeof(arrSectMsCells[e.parent.parent.bid]) == 'undefined')
{
arrSectMsCells[e.parent.parent.bid]=1
_arrRMSecElts.push(e)
}
}
else
{
addElementBID(e.bid,false)
if (!cellOnly) addElementBID(e.parent.parent.bid,false)
}
}
else
addElementBID(e.bid,false)
} else if (isTableCell(e)) {
askRow = e.isRow
askCol = e.isCol
askRowCol = askRow && askCol
addElementBID(e.bid, askRowCol?null:(askRow && !askCol))
} else if (isTableBlock(e)||isGraph(e)) {
if (_areaDefid == null)
addElementBID(e.bid,false)
}
}
if (askRowCol) {
frameNav("DlgFrame",_root+"language/"+_lang+"/html/removeTableCellDialog.html")
return
}
if (_arrRMSecElts.length==0)    
doRemoveReportElement()
else
{
_usrRMSect=null;
waitRMSectionsAnswer(0, false, _arrRMSecElts)
}
}
function doRemoveReportElement()
{
if (_elementBID.length == 0 || _elementBID == null) return;
updateContainerIdRefBid()
var p=urlParamsNoBID()
if (p != null)
{
wt()
setReportUrl(_root +"processRemoveReportElements"+_appExt + p +"&bids="+_elementBID.join(",")+"&isRow="+_isRow.join(",")+"&sRefreshRMNode=yes",true)
}
}
function waitRMSectionsAnswer(i, show, elts)
{
if (elts.length == 0 || elts == null) return
if (i == null) i=0
if (i >= elts.length) 
{
_arrRMSecElts = new Array
doRemoveReportElement()
return;
}
var msg=""
var title=""
var sectionName = ""
_currentSectMsCell = i
var isSection = (elts[i].className == 'section') ? true : false
if (isSection)
{
sectionName = elts[i].children[0].children[0].formula
if (sectionName!="" && typeof(sectionName)!="undefined")
{
var idxBegin=sectionName.indexOf("=[")
var idxEnd=sectionName.indexOf("]")
if ((idxBegin >=0) && (idxEnd>0) && (idxEnd>idxBegin))
sectionName=sectionName.substring(idxBegin+2, idxEnd)
}
else
sectionName = ""
window._remSectionMsg="Are you sure you want to delete this section?"
window._remSectionTitle="Confirm Delete"+" "+sectionName
setTimeout('showPromptDialog(_remSectionMsg,_remSectionTitle,1,getCellBID, getNoBID)',1)
}
else
{
sectionName = elts[i].formula
if (sectionName!="" && typeof(sectionName)!="undefined")
{
idxBegin = sectionName.indexOf("=[")
idxEnd = sectionName.indexOf("]")
if ((idxBegin >=0) && (idxEnd>0) && (idxEnd>idxBegin))
sectionName=sectionName.substring(idxBegin+2, idxEnd)
}
else
sectionName = ""
window._remSectionMsg="You are deleting a section master cell. Do you want to delete the associated section on "+" "+sectionName+"?"
window._remSectionTitle="Confirm Delete"
setTimeout('show3ButtonsPromptDialog(_remSectionMsg,_remSectionTitle,_promptDlgWarning,getCellAndSectBID,getCellBID)',1)
}
}
function addElementBID(bid,isRow)
{
_elementBID.push(bid)
_isRow.push(isRow)
}
function getCellAndSectBID()
{
addElementBID(_arrRMSecElts[_currentSectMsCell].bid,false)
addElementBID(_arrRMSecElts[_currentSectMsCell].parent.parent.bid,false)
waitRMSectionsAnswer(++_currentSectMsCell, false, _arrRMSecElts)
}
function getCellBID()
{
addElementBID(_arrRMSecElts[_currentSectMsCell].bid,false)
waitRMSectionsAnswer(++_currentSectMsCell, false, _arrRMSecElts)
}
function getNoBID()
{
waitRMSectionsAnswer(++_currentSectMsCell, false, _arrRMSecElts)
}
function getTableType(elts)
{
var type = new Object
var block = elts[0].parent.parent.blockType
type.isVTable = type.isHTable = type.isXTable = false
if(block == 'vTable')
type.isVTable = true
else if(block == 'hTable')
type.isHTable = true
else if(block == 'xTable')
type.isXTable = true
return type
}
function isVerticalTable(block)
{
return (block && block.blockType == 'vTable');
}
function isHorizontalTable(block)
{
return (block && block.blockType == 'hTable' );
}
function isCrossTable(block)
{
return (block && block.blockType == 'xTable' );
}
function setDeleteTablecells_ContextualMenu(m,elts)
{
var res=getTableType(elts)
var disMenuItem=m.getItemByActionId("deleteTableCell");
if (disMenuItem && disMenuItem.sub)
{
var menuAction=disMenuItem.sub;
if (res.isVTable || res.isHTable) {
menuAction.getItemByActionId("deleteRow").setDisabled(res.isVTable)
menuAction.getItemByActionId("deleteColumn").setDisabled(res.isHTable)
}
else if (res.isXTable) 
{
var zone = elts[0].parent.zone
switch (zone) {
case 'h-1,b':
menuAction.getItemByActionId("deleteRow").setDisabled(res.isVTable)
menuAction.getItemByActionId("deleteColumn").setDisabled(res.isXTable)
break
case 'b,h-1':
menuAction.getItemByActionId("deleteRow").setDisabled(res.isXTable)
menuAction.getItemByActionId("deleteColumn").setDisabled(res.isHTable)
break
case 'b,b':
menuAction.getItemByActionId("deleteRow").setDisabled(res.isHTable)
menuAction.getItemByActionId("deleteColumn").setDisabled(res.isVTable)
break
}
}
}
}
function initScaling()
{   
    var fitToWidth=_currWorkbench.getAction("fitToWidth");
    var fitToHeight=_currWorkbench.getAction("fitToHeight");
    var fitToScale= _currWorkbench.getAction("toScaling");
    if (!fitToWidth ||  !fitToHeight || !fitToScale) return;
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var report = findParentByClassName(elts[0],"report")
if (report == null) return
    var scalingInfo = report.scaling
    var w=0;
    if (typeof(scalingInfo.scalingWide)!="undefined")
    {
        w=scalingInfo.scalingWide;
    }
    var h=0;
    if (typeof(scalingInfo.scalingTall)!="undefined")
    {
        h=scalingInfo.scalingTall;
    }
    var s=100;
    if (typeof(scalingInfo.scaling)!="undefined")
    {
        s=scalingInfo.scaling;
    }
    fitToWidth.valueSelect(w);
    fitToHeight.valueSelect(h);
    fitToScale.valueSelect(s);  
fitToScale.setDisabled(!(w==0 && h==0)); 
}
function fitToPageCheckCB()
{
    var o=this;
    var v=parseInt(o.getTextValue());
    if (!(v>=1 && v<=100))
    {
var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var report = findParentByClassName(elts[0],"report")
if (report == null) return
    var scalingInfo = report.scaling
       var wh=(o.actionId=="fitToWidth")?scalingInfo.scalingWide:scalingInfo.scalingTall;
        o.valueSelect(wh);
        return false;  
    }
    return true;
}
function fitToPageChangeCB(fitToWidth, fitToHeight)
{    
    var fitToScale= _currWorkbench.getAction("toScaling")  
    if (!fitToWidth ||  !fitToHeight || !fitToScale) return;
    var valueArr=[0,0];
    var sel=fitToWidth.getSelection();     
    valueArr[0]=parseInt(sel.value);    
    sel=fitToHeight.getSelection();
    valueArr[1]=parseInt(sel.value);
    var v=valueArr[0]+valueArr[1];
    fitToScale.setDisabled((v==0)?false:true);  
    if (v==0)
    {
        fitToScalingChangeCB.call(fitToScale);
    }
    else
    {
        var param={"scalingWide":valueArr[0], "scalingTall":valueArr[1]};
        processFitToPage(param);
    }
}
function fitToPageWidthCB()
{
    fitToPageChangeCB(this, _currWorkbench.getAction("fitToHeight"));   
}
function fitToPageHeightCB()
{
    fitToPageChangeCB(_currWorkbench.getAction("fitToWidth"), this);   
}
function fitToScalingCheckCB()
{
    var o=this;
    var v=parseInt(o.getTextValue());
 var elts=getSelectedElts()
if ((elts == null)||(elts.length==0))
return
var report = findParentByClassName(elts[0],"report")
if (report == null) return
   var scaling=scalingInfo.scaling
    if (!(v>=10 && v<=400))
    {
        o.valueSelect(scaling);  
        return false;      
    }
    return true;
}
function fitToScalingChangeCB()
{
    var sel=this.getSelection();     
    var param={"scaling":parseInt(sel.value)};
    processFitToPage(param);
}
function processFitToPage(param)
{
    var p=urlParamsNoBID()
if (p!="")
    {   
wt()                
        var url=_root + "processFitToScale"+_appExt+p+"&fitToScaling="+Object.toJSON(param);
        setReportUrl(url, true) 
}
}
function setAlignment_ContextualMenu(m, value)
{
var disMenuItem=m.getItemByActionId("align1ElementSubMenu");
if (disMenuItem && disMenuItem.sub)
{
var menuAction=disMenuItem.sub;
menuAction.getItemByActionId("alignLeftItem").setDisabled(value);
menuAction.getItemByActionId("alignCenter").setDisabled(value);
menuAction.getItemByActionId("alignRight").setDisabled(value);
menuAction.getItemByActionId("alignTop").setDisabled(value);
    menuAction.getItemByActionId("alignMiddle").setDisabled(value);
menuAction.getItemByActionId("alignBottom").setDisabled(value);
}
}
function setLayering_ContextualMenu(m)
{
var res=getLayeringValue()
var disMenuItem=m.getItemByActionId("orderSubMenu");
if (disMenuItem && disMenuItem.sub)
{
var menuAction=disMenuItem.sub;
menuAction.getItemByActionId("frontMenuItem").setDisabled(res.toFront)
menuAction.getItemByActionId("backMenuItem").setDisabled(res.toBack)
menuAction.getItemByActionId("forwardMenuItem").setDisabled(res.toForward)
menuAction.getItemByActionId("backwardsMenuItem").setDisabled(res.toBackward)
}
}
function setNavigation_ContextualMenu(m,elts)
{
var disMenuItem=m.getItemByActionId("navigation");
if (disMenuItem && disMenuItem.sub && elts && elts.length > 0)
{
var isWebLink = (elts[0].contType=='weblink');
var menuNavigation=disMenuItem.sub;
var addHyperlink = menuNavigation.getItemByActionId("addHyperlink")
if (addHyperlink)
{
addHyperlink.setDisabled(isWebLink);
addHyperlink.check(false);
var addDoclink = menuNavigation.getItemByActionId("addDoclink")
if (addDoclink) {
addDoclink.setDisabled(isWebLink);
addDoclink.check(false);
}
var editLink = menuNavigation.getItemByActionId("editLink")
if (editLink) {
editLink.setDisabled(!isWebLink);
editLink.check(false);
}
var removeHyperlink = menuNavigation.getItemByActionId("removeHyperlink")
if (removeHyperlink) {
removeHyperlink.setDisabled(!isWebLink);
removeHyperlink.check(false);
}
var setContentAsHyperlink = menuNavigation.getItemByActionId("setContentAsHyperlink")
if (setContentAsHyperlink) {
setContentAsHyperlink.check(isWebLink);
}
}
}
}
var _tableHeaderFooterActionIds=
{
    "vTable":
    [
        "vTableHeaderMenu",
        "vTableFooterMenu"
    ],
    "hTable": 
    [
        "hTableHeaderMenu",
        "hTableFooterMenu"
    ],
    "xTable":
    [
        "xTableVHeaderMenu",
        "xTableHHeaderMenu",
        "xTableVFooterMenu",         
        "xTableHFooterMenu"    
    ],
    "form": []
};
function setTableHeaderFooter(elts)
{
if (elts != null && elts.length >0)
{
var elt = elts[0]
var isSingle = (elts.length == 1)?true:false
if(isTableCell(elt) || isTableBlock(elt))
{
var arr
var displayed
var typeTable = (elt.className=="reportCell")? elt.parent.parent.blockType : elt.blockType
for (i in _tableHeaderFooterActionIds)
{
displayed=(i==typeTable)?true:false;
arr=_tableHeaderFooterActionIds[i];
arr.each(function(actionId){
            _currWorkbench.getAction(actionId).setDisplay(displayed); 
_currWorkbench.getAction(actionId).setDisabled(false);  
})
}
if (isTableBlock(elt))
{
switch(typeTable)
{
case "vTable":
_currWorkbench.getAction("showHideTableVHeader").check(elt.headerVisible)
_currWorkbench.getAction("showHideTableVFooter").check(elt.footerVisible)
_currWorkbench.getAction("showHideBreakHeader").setDisabled(true); 
_currWorkbench.getAction("showHideBreakHeader").check(false); 
_currWorkbench.getAction("showHideBreakFooter").setDisabled(true); 
_currWorkbench.getAction("showHideBreakFooter").check(false); 
break
case "hTable":
_currWorkbench.getAction("showHideTableHHeader").check(elt.headerVisible)
_currWorkbench.getAction("showHideTableHFooter").check(elt.footerVisible)
_currWorkbench.getAction("showHideBreakHeader").setDisabled(true); 
_currWorkbench.getAction("showHideBreakHeader").check(false); 
_currWorkbench.getAction("showHideBreakFooter").setDisabled(true); 
_currWorkbench.getAction("showHideBreakFooter").check(false); 
break
case "xTable":
_currWorkbench.getAction("showHideXTableHHeader").check(elt.topHeaderVisible)
_currWorkbench.getAction("showHideBreakHHeader").setDisabled(true); 
_currWorkbench.getAction("showHideBreakHHeader").check(false); 
_currWorkbench.getAction("showHideXTableVHeader").check(elt.leftHeaderVisible)
_currWorkbench.getAction("showHideBreakVHeader").setDisabled(true); 
_currWorkbench.getAction("showHideBreakVHeader").check(false); 
_currWorkbench.getAction("showHideXTableHFooter").check(elt.bottomFooterVisible)
_currWorkbench.getAction("showHideBreakHFooter").setDisabled(true); 
_currWorkbench.getAction("showHideBreakHFooter").check(false);
_currWorkbench.getAction("showHideXTableVFooter").check(elt.rightFooterVisible)
_currWorkbench.getAction("showHideBreakVFooter").setDisabled(true); 
_currWorkbench.getAction("showHideBreakVFooter").check(false); 
break
}
}
else if(isTableCell(elt))
{
var cell = cellHasBreak(elt)
switch(typeTable)
{
case "vTable":
_currWorkbench.getAction("showHideTableVHeader").check(elt.parent.parent.headerVisible)
_currWorkbench.getAction("showHideTableVFooter").check(elt.parent.parent.footerVisible)
_currWorkbench.getAction("showHideBreakHeader").setDisabled(!cell.hasBreak || !isSingle); 
_currWorkbench.getAction("showHideBreakFooter").setDisabled(!cell.hasBreak || !isSingle); 
_currWorkbench.getAction("showHideBreakHeader").check(_isBHCheck && isSingle); 
_currWorkbench.getAction("showHideBreakFooter").check(_isBFCheck && isSingle); 
break
case "hTable":
_currWorkbench.getAction("showHideTableHHeader").check(elt.parent.parent.headerVisible)
_currWorkbench.getAction("showHideTableHFooter").check(elt.parent.parent.footerVisible)
_currWorkbench.getAction("showHideBreakHeader").setDisabled(!cell.hasBreak || !isSingle);
_currWorkbench.getAction("showHideBreakFooter").setDisabled(!cell.hasBreak || !isSingle);  
_currWorkbench.getAction("showHideBreakHeader").check(_isBHCheck && isSingle); 
_currWorkbench.getAction("showHideBreakFooter").check(_isBFCheck && isSingle); 
break
case "xTable":
_currWorkbench.getAction("showHideXTableHHeader").check(elt.parent.parent.topHeaderVisible)
_currWorkbench.getAction("showHideBreakHHeader").setDisabled(!cell.hasVBreak || !isSingle);
_currWorkbench.getAction("showHideBreakHHeader").check(_isBVHCheck && isSingle);
_currWorkbench.getAction("showHideXTableVHeader").check(elt.parent.parent.leftHeaderVisible)
_currWorkbench.getAction("showHideBreakVHeader").setDisabled(!cell.hasHBreak || !isSingle);
_currWorkbench.getAction("showHideBreakVHeader").check(_isBHHCheck && isSingle);
_currWorkbench.getAction("showHideXTableHFooter").check(elt.parent.parent.bottomFooterVisible)
_currWorkbench.getAction("showHideBreakHFooter").setDisabled(!cell.hasVBreak || !isSingle);
_currWorkbench.getAction("showHideBreakHFooter").check(_isBVFCheck && isSingle);
_currWorkbench.getAction("showHideXTableVFooter").check(elt.parent.parent.rightFooterVisible)
_currWorkbench.getAction("showHideBreakVFooter").setDisabled(!cell.hasHBreak || !isSingle);
_currWorkbench.getAction("showHideBreakVFooter").check(_isBHFCheck && isSingle);
break
}
}
}
}   
}
function handleRepeat(actionId, doRepeat)
{
var elts=getSelectedElts(), bid = null;
if((elts != null) && (elts.length == 1))
{
var elt = elts[0];
bid = elt.bid
if (isTableCell(elt))
{
bid = elt.parent.parent.bid
}
} 
var p = urlParamsNoBID() 
p +=  ("repeatRE" != actionId)?("&actionId=" + actionId):"" 
p += "&repeat=" + doRepeat
p += "&bids=" + bid
wt()
setReportUrl(_root + "processFormatToolbar" + _appExt + p)
}
function handleStartNewPageBreaks(actionId, state)
{
var p = urlParams()
if (p != "") {
wt()
p += "&actionId=" + actionId 
p += "&actionState=" + state 
setReportUrl(_root + "processFormatToolbar" + _appExt + p)
}
}
function showHideTableVHeader(actionId)
{
var elts=getSelectedElts();
if((elts != null) && (elts.length == 1))
{
var elt = elts[0];
if (isTableCell(elt))
{
if (actionId=="showHideBreakHeader" || actionId=="showHideBreakHHeader")
{
wt()
var p = urlParamsNoBID()
var eltRef = getTableCellFormulaID(elt)
if (p != "" && eltRef != null)  
frameNav("Report", "processFormatTable" + _appExt + p + "&general="+encodeURIComponent("{'hidebreakheader':'"+(actionId=="showHideBreakHeader"?!_isBHCheck:_isBHHCheck)+"'}")+"&bid="+tableBID+"&sBid="+eltRef.bid, true);
}
else
{
if(typeof(elt.parent.parent.headerVisible)!='undefined')
showTableHeaderFooter("hideheader",elt.parent.parent.headerVisible,elt.parent.parent.bid)
else if(typeof(elt.parent.parent.leftHeaderVisible)!='undefined'||typeof(elt.parent.parent.topHeaderVisible)!='undefined')
{
switch (elt.parent.zone)
{
case "h-1,b":
case "h-1,f-1":
showTableHeaderFooter("topheader",elt.parent.parent.topHeaderVisible,elt.parent.parent.bid)
break;
case "b,h-1":
case "f-1,h-1":
showTableHeaderFooter("leftheader",elt.parent.parent.leftHeaderVisible,elt.parent.parent.bid)
break;
case "b,b":
case "b,f-1":
case "f-1,b":
case "f-1,f-1":
case "h-1,h-1":
if (actionId=="showHideXTableHHeader")
showTableHeaderFooter("topheader",elt.parent.parent.topHeaderVisible,elt.parent.parent.bid)
else if (actionId=="showHideXTableVHeader")
showTableHeaderFooter("leftheader",elt.parent.parent.leftHeaderVisible,elt.parent.parent.bid)
else
showTableHeaderFooter("bothheader",(elt.parent.parent.leftHeaderVisible||elt.parent.parent.topHeaderVisible),elt.parent.parent.bid)
break;
}
}
}
}
else if(isTableBlock(elt))
{
if(typeof(elt.headerVisible)!='undefined')
showTableHeaderFooter("hideheader",elt.headerVisible,elt.bid)
else if(typeof(elt.leftHeaderVisible)!='undefined'||typeof(elt.topHeaderVisible)!='undefined')
{
switch (actionId)
{
case "showHideXTableHHeader":
showTableHeaderFooter("topheader",elt.topHeaderVisible,elt.bid)
break
case "showHideXTableVHeader":
showTableHeaderFooter("leftheader",elt.leftHeaderVisible,elt.bid)
break
}
}
}
}
}
function showHideTableVFooter(actionId)
{
var elts=getSelectedElts();
if((elts != null) && (elts.length == 1))
{
var elt = elts[0];
if (isTableCell(elt))
{
if(actionId=="showHideBreakFooter")
{
wt()
var p = urlParams(true)
if (p != "" )  
frameNav("Report", "processFormatTable" + _appExt + p + "&general="+encodeURIComponent("{'hidebreakfooter':'"+!_isBFCheck+"'}")+"&bid="+tableBID, true);
}
else if(typeof(elt.parent.parent.footerVisible)!='undefined' && (actionId =='showHideTableVFooter' || actionId =='showHideTableHFooter'))
showTableHeaderFooter("hidefooter",elt.parent.parent.footerVisible,elt.parent.parent.bid)
else if(typeof(elt.parent.parent.rightFooterVisible)!='undefined' && actionId =='showHideXTableVFooter')
showTableHeaderFooter("rightfooter",elt.parent.parent.rightFooterVisible,elt.parent.parent.bid)
else if(typeof(elt.parent.parent.bottomFooterVisible)!='undefined' && actionId =='showHideXTableHFooter')
showTableHeaderFooter("bottomfooter",elt.parent.parent.bottomFooterVisible,elt.parent.parent.bid)
}
else if(isTableBlock(elt))
{
if(typeof(elt.footerVisible)!='undefined' && (actionId =='showHideTableVFooter' || actionId =='showHideTableHFooter'))
showTableHeaderFooter("hidefooter",elt.footerVisible,elt.bid)
else if(typeof(elt.rightFooterVisible)!='undefined' && actionId =='showHideXTableVFooter')
showTableHeaderFooter("rightfooter",elt.rightFooterVisible,elt.bid)
else if(typeof(elt.bottomFooterVisible)!='undefined' && actionId =='showHideXTableHFooter')
showTableHeaderFooter("bottomfooter",elt.bottomFooterVisible,elt.bid)
}
}
}
function showTableHeaderFooter(key, value, tableBID)
{
wt()
var p = urlParams(true)
if (p != "")  
frameNav("Report", "processFormatTable" + _appExt + p + "&general="+encodeURIComponent("{'"+key+"':'"+value+"'}")+"&bid="+tableBID, true);
}
function isTableBlock(elt)
{
    return ((elt.className == "block") && !isGraph(elt));
}
function isGraphBlock(elt)
{
    return ((elt.className == "block") && isGraph(elt));
}
function isCompositeSelection(elts)
{
var type = new Object
var sameBlock = true
var isComposite = false
var isSameTable = true
var tableBID  = -1 
var classname = elts[0] ? elts[0].className : ""
var isTable = elts[0] ? isTableBlock(elts[0]) : false
var isGraph = elts[0] ? isGraphBlock(elts[0]) : false
for(var i=0;i<elts.length;i++)
{
if (elts[i].className != "reportCell" || !isTableCell(elts[i])) 
isSameTable = false
if (elts[i].className != classname) {
sameBlock = false
isComposite = true
isSameTable = false
break
}
if ((isTable && (!isTableBlock(elts[i]))) || (isGraph && (!isGraphBlock(elts[i]))))
sameBlock = false
if (isTableCell(elts[i]))
{
if(tableBID != -1 && (elts[i].parent.parent.bid != tableBID))
isSameTable = false
tableBID = elts[i].parent.parent.bid
}
}
type.isComposite = isComposite
type.sameBlock = sameBlock
type.isTable = isTable
type.isGraph = isGraph
type.className = elts[0] ? elts[0].className : ""
type.isSameTable = isSameTable
return type
}
function formulaBarResizeCB(w,h)
{
var textArea = workbenchW.getAction("formulaText").items[0];
var marge=10, icnsW = 5*24+marge;
textArea.resizePixels(Math.max(10,(w-icnsW)),null);
}
function formulaBarExpandCollapse(srcWidget)
{
var formulaBar = interactivePers.getFormulaBar();
var formulaTextWidget = srcWidget.getParentContainer().getItemByValue("formulaText")
var minPixel = 18, maxPixel = 40;
if(!formulaBar.expanded) 
{
srcWidget.changeImg(16*9,0,null);
srcWidget.setCustomTooltip({title:"Collapse", text:"Expand or collapse the formula bar."});
formulaTextWidget.resizePixels(null,maxPixel);
formulaBar.expanded = true;
}
else 
{
srcWidget.changeImg(16*8,0,null);
srcWidget.setCustomTooltip({title:"Expand", text:"Expand or collapse the formula bar."});
formulaTextWidget.resizePixels(null,minPixel);
formulaBar.expanded = false;
}
interactivePers.resizeElements();
}
function formulaBarInitCB()
{
interactivePers.getFormulaBar().expanded = false;
var textArea = workbenchW.getAction("formulaText").items[0];
textArea.resizePixels(null,18);
textArea.allowCR=false;
}
function isSameDataType_FormatNumber(elts)
{
    if (!elts) return null;
    var dataType=null;   
    var formatNumber=null;
    var elt;
    for (var i=0; i<elts.length; i++)
    {
        elt=elts[i];
        if (elt.className=="reportCell")
        {
            if (dataType==null)
            {
                dataType=elt.dataType;
                formatNumber=elt.formatNumber;
            }                
            else
            if (dataType==elt.dataType || 
                ((dataType==_dataType.date || dataType==_dataType.dateTime) && (elt.dataType==_dataType.date || elt.dataType==_dataType.dateTime))) 
            {
                if (formatNumber!=elt.formatNumber)
                    formatNumber=null;
            }
            else
            {
                return null;    
            }
        }                
    }
    return {dataType:dataType, formatNumber:formatNumber};
}
function setFormatNumber(elts)
{               
    var arr=null;   
    var dataType_formatNumber=null; 
    if (elts)
    {           
        dataType_formatNumber=isSameDataType_FormatNumber(elts);          
        if (dataType_formatNumber!=null)
        {      
            if (dataType_formatNumber.dataType==_dataType.num)
                arr=DS.formatNumericArr;
            else
            if (dataType_formatNumber.dataType==_dataType.date || dataType_formatNumber.dataType==_dataType.dateTime)      
                arr=DS.formatDateArr;       
        }            
    }
    var disable=(!arr)?true:false;  
    var changeNumberFormat=_currWorkbench.getAction("changeNumberFormat");
    changeNumberFormat.selectItem();
    changeNumberFormat.setDisabled(disable);
    if (disable) return;
    if (!changeNumberFormat.userData || changeNumberFormat.userData!=dataType_formatNumber.dataType)
    {
        changeNumberFormat.del();
        var formatInfo;          
        for (var i=0; i<arr.length;i++)
        {
            formatInfo=arr[i];
            changeNumberFormat.add(formatInfo.template,formatInfo.token);
            if (typeof(formatInfo.poscolor)!="undefined" || typeof(formatInfo.negcolor)!="undefined")
            {
                var menuItem=changeNumberFormat.getItemByIndex(i);
                if (menuItem)
                {
                    var poscolor=formatInfo.poscolor?'color:'+formatInfo.poscolor+';':'';
                    var negcolor =formatInfo.negcolor?'color:'+formatInfo.negcolor+';':'';
                    menuItem.setTextOnlyStyle({textArr:[formatInfo.positive,formatInfo.negative], styleArr:[poscolor, negcolor]});                                
                }
            }
        }
        changeNumberFormat.userData=dataType_formatNumber.dataType;
    }
    var formatNumber=dataType_formatNumber.formatNumber;
    if (formatNumber==null && elts)
    {
        formatNumber=elts[0].formatNumber;
    changeNumberFormat.setUndefined(true);  
    }
    else if (formatNumber!=null && typeof(formatNumber)!="undefined")
    {
    changeNumberFormat.setUndefined(false);                  
        changeNumberFormat.valueSelect(formatNumber);                        
    }        
    else
    {
    changeNumberFormat.setUndefined(false);  
        changeNumberFormat.valueSelect("");      
    }
}
function setFormatNumberCurrency(elts)
{               
    var arr=null;   
    var dataType_formatNumber=null; 
    if (elts)
    {           
        dataType_formatNumber=isSameDataType_FormatNumber(elts);          
        if (dataType_formatNumber!=null)
        {      
            if (dataType_formatNumber.dataType==_dataType.num)
                arr=DS.formatNumericArr;
        }            
    }
    var disable=(!arr)?true:false;  
    var changeNumberFormat=_currWorkbench.getAction("formatNumberCurrencyMenu");
    changeNumberFormat.selectItem();
    changeNumberFormat.setDisabled(disable);
    var changeNumberFormatPercent=_currWorkbench.getAction("formatPercent");
    changeNumberFormatPercent.selectItem();
    changeNumberFormatPercent.setDisabled(disable);
    if (disable) return;
    if (!changeNumberFormat.userData || changeNumberFormat.userData!=dataType_formatNumber.dataType)
    {
        changeNumberFormat.del();
        changeNumberFormat.add("'$'#,##0","L[$]T[#]T[gs]T[#]T[#]T[0]");
            changeNumberFormat.add("'�'#,##0","L[�]T[#]T[gs]T[#]T[#]T[0]");
            changeNumberFormat.add("'�'#,##0","L[�]T[#]T[gs]T[#]T[#]T[0]");
        changeNumberFormat.userData=dataType_formatNumber.dataType;
    }
    var formatNumber=dataType_formatNumber.formatNumber;
    if (formatNumber==null && elts)
    {
        formatNumber=elts[0].formatNumber;
    changeNumberFormat.setUndefined(true);  
    }
    else if (formatNumber!=null && typeof(formatNumber)!="undefined")
    {
    changeNumberFormat.setUndefined(false);                  
        changeNumberFormat.valueSelect(formatNumber);                        
    }        
    else
    {
    changeNumberFormat.setUndefined(false);  
        changeNumberFormat.valueSelect("");      
    }
}
function invokeMergeDimsAction()
{
var sels = getLPDictionarySelections();
if(md_canMergeDims(sels))
md_processMergeDims("merge", sels);
else
showDictionaryDialog(md_processMergeDimsCB,"true","dp",md_beforeShowCB,md_customizeDicoCB,md_mergeDimsTreeCB,"Select two or more qualified dimensions to be merged");
}
function md_canMergeDims(sels)
{
return (sels.length>1 && md_areCandidateToMergeDims(sels) && md_hasSameDataType(sels) && md_fromDifferentDPs(sels))
}
function md_canAddToMergeDims(sels)
{
if (sels.length>1 && mb_onlyOneMergeDim(sels)) {
var nonMergedObjects = new Array
for (var i=0; i < sels.length; i++) { 
var sel = sels[i]
if ((null != sel.userData.dpName) && ("" !=  sel.userData.dpName) || typeof(sel.userData.DPNames)!="undefined") {
nonMergedObjects.push(sel)
}
}
return (md_areCandidateToMergeDims(nonMergedObjects) && md_hasSameDataType(sels) && md_fromDifferentDPs(nonMergedObjects))
}
return false
}
function mb_onlyOneMergeDim(sels)
{
var _hasOneMergeDim = false
for (var i=0; i < sels.length; i++) {
var sel = sels[i]
if (sel.userData) {
if (null != sel.userData.DPNames) {
if (_hasOneMergeDim) return false 
_hasOneMergeDim = true
}
}
}
return _hasOneMergeDim
}
function md_areCandidateToMergeDims(sels)
{
var ret=true;
var len = sels.length;
for (var i=0; i < len; i++) 
{
var obj = sels[i].userData;
if (!obj || (obj.isVariable) || !(obj.kind) || !((obj.kind == _dim) || (obj.kind == _hchy) || (obj.kind == _dtl) || (obj.kind ==_linkDim)) || (obj.parLinkId) || (obj.isStripped)) {
ret = false;
break;
}
}
return ret;
}
function md_hasSameDataType(sels)
{
var ret = true;
var len = sels.length;
var dataType = sels[0].userData.dataType;
for (var i=1; i < len; i++) 
{
if(sels[i].userData.dataType != dataType)
{
ret=false
break
}
}
return ret;
}
function md_fromDifferentDPs(sels)
{
var ret = true;
var len = sels.length;
var arrDPNames=[];
for (var i=0; i < len; i++) 
{
var obj =sels[i].userData; 
if (((null == obj.dpName) || ("" ==  obj.dpName) ) 
&& typeof(obj.DPNames)=="undefined") continue 
if(arrDPNames.indexOf(obj.dpName)!=-1)
{
ret=false
break
}
else if(typeof(obj.DPNames)!="undefined" && obj.DPNames!=null )
{
if (!md_containsDP(arrDPNames,obj.DPNames))
{
for (var k=0; k < obj.DPNames.length; k++) 
{
arrDPNames.push(obj.DPNames[k]);
}
}else
{
ret=false;
break;
}
}
else
arrDPNames.push(obj.dpName);
}
return ret;
}
function md_containsDP(arrDPNames,DPNames)
{
var ret = false;
if (!arrDPNames || !DPNames) return false;
for (var k=0; k < DPNames.length; k++) 
{
if(arrDPNames.indexOf(DPNames[k])!=-1)
{
ret=true;
break;
}
}
return ret;
}
function md_setLinkedInfo(obj)
{
if(obj.kind == null || obj.kind == _linkDim || obj.parLinkId || obj.hasNoLink) return ;
var links = getDictionary().byQuery.Links
if(links)
{
var len= links.length
for(var i=0;i<len;i++)
{
var arr = links[i].children;
for(var j=0;j<arr.length;j++)
{
if (obj.id == arr[j].id) 
{
obj.parLinkId = links[i].id;
return ;
}
}
}
}
obj.hasNoLink=true;
}
function md_processMergeDims(mergeAction, sels)
{
var sDimensionIDs = "";
var sDimensionName = (mergeAction=="unmerge")? sels[0].userData.name:"";
var isEditMerge = (mergeAction=="rmFromMerge") || (mergeAction=="addToMerge")
var len = sels.length;
var parentLinkId=""
for (var i=0; i < len; i++) 
{
   var data = sels[i].userData
if ((null != data.dpName) && ("" !=  data.dpName)) {     
sDimensionIDs += data.id
if (i < (len-1)) sDimensionIDs += ","
}
if ((mergeAction=="addToMerge") && (null != data.DPNames)) {
parentLinkId = data.id
}
if ((mergeAction=="rmFromMerge") && (null != data.parLinkId)) {
parentLinkId = data.parLinkId
}
}
var url = _root + "processMergeDimensions" + _appExt
url += urlParamsNoBID()
url += "&sDimensionIDs=" + sDimensionIDs + "&sMergeAction=" + mergeAction + "&name="+convURL(sDimensionName);
if (isEditMerge) {
url += "&parentLinkId=" + parentLinkId 
}
wt()
eventManager.notify(_EVT_VARS_UPDATE)
setReportUrl(url)       
}
function md_processMergeDimsCB(tree)
{
md_processMergeDims("merge",tree.getSelections());
}
function md_mergeDimsTreeCB(data)
{
if(data == null) return;
var tree = _dictionaryTree;
var dlg = _dictionaryDialog;
md_setLinkedInfo(data); 
var sels = tree.getSelections()
dlg.getOKBtn().setDisabled(!md_canMergeDims(sels));
}
function md_beforeShowCB()
{
var dlg = _dictionaryDialog;
dlg.getOKBtn().setDisabled(true);
}
function md_customizeDicoCB()
{
return getDictionaryWithoutStrippedObjects();
}
function setFilter(elts)
{
var filter=false
if (_singleSel != null)
{
cn = _singleSel.className
switch (cn)
{
case "body":
filter = (_singleSel.parent && _singleSel.parent.filter)?true:false; 
break
case "report":
filter = _singleSel.filter?true:false; 
break
case "block":
filter = _singleSel.filter?true:false; 
break
case "section":
filter = _singleSel.filter?true:false; 
break
case "reportCell":
{
    var id=_singleSel.id;
    if ((id.indexOf("DP")>=0) || reportCellCanHaveFilter(_singleSel))
    {
        var hasFilter=reportCellHasFilter(_singleSel);
        filter = (hasFilter.hasFilter>0)?true:false;
    }
break
            }
}
} 
    var filterBtn = workbenchW.getAction("filterBtn");
filterBtn.updateRadioBtn(filter, 10);
    var editFilter = workbenchW.getAction("editFilter");              
    editFilter.setDisabled(!filter)
    var removeFilter = workbenchW.getAction("removeFilter");              
    removeFilter.setDisabled(!filter)
    if (!isEnableUserRight(WS._usrCreateEditInputControls))
    {
    var filterByInputControl = workbenchW.getAction("filterByInputControl");              
        filterByInputControl.setDisabled(true)
    }
}
function reportCellInParentFilter(parent, elt)
{
    var filter=parent.filter;           
    var nc=0;
    if (filter)
    {                
        var arr=filter.split(",");
        var index;
        for (var i=0; i<arr.length; i++)
        {
            index=arr[i].indexOf(elt.id);  
            if (index>=0 && arr[i].length==elt.id.length)
            {
                nc++;
            }
        }
    }
    return nc;
}
function reportCellHasFilter(elt)
{
    var hasFilter={hasFilter:0, parent:null};
    var block=getBlockFromTableCell(elt);
    if (block)
    {
        hasFilter.hasFilter = reportCellInParentFilter(block, elt);              
        hasFilter.parent=block;
    }
    else
    if (isCellInSection(elt))
    {
        var section=elt.parent.parent;
        hasFilter.hasFilter = reportCellInParentFilter(section, elt);               
        hasFilter.parent=section;
    }
    return hasFilter;
}
function reportCellCanHaveFilter(elt)
{
    return  (elt.className=="reportCell" && !elt.id.startsWith("="))?true:false;
}
function addDicoObjInFilter(elt)
{
    var dicoObj=null;
    if (reportCellCanHaveFilter(elt) && (isTableCell(elt) || isCellInSection(elt)) )
    {
        var jsObj=getDictionaryObjectFromId(elt.id);                  
        if (jsObj && (typeof(jsObj.isStripped)=="undefined" || jsObj.isStripped==false) )
        {                      
            dicoObj={name:jsObj.name, dataType:jsObj.dataType, objType:jsObj.kind, Uuid:jsObj.id, forFilter:true, reportFilter:true}                            
        }
    } 
    return dicoObj;
}
function getReportFilterDlgParam(actionId)
{
    var elts=getSelectedElts();
    var elt= elts[0];   
    var param={};
    if (actionId.indexOf("dsEditFilter")>=0)
    {
        var action=_currWorkbench.getAction(actionId);    
        if (action && action.userData)
        {                        
            param= action.userData;  
            if (param.idArr && param.idArr.length>0)
            {
                param.Uuid=param.idArr[0];
            }                                
        }
    }
    else
    if (isBlock(elt) || isSectionFn(elt))
    {
        param.blockBid=elt.bid;
    }
    else
    {
        var hasFilter=reportCellHasFilter(elt);
        if (!hasFilter.parent)  return param;                             
        param.blockBid=hasFilter.parent.bid;                
        switch (actionId)
        {
            case "removeFilter":
                if (hasFilter.hasFilter)
                {      
                    param.Uuid=elt.id;           
                }
                break;
            case "filterBtn":
            {
                if (hasFilter.hasFilter)
                {      
                    param.Uuid=elt.id;           
                }
                else
                if (reportCellCanHaveFilter(elt))
                {
                    var dicoObj=addDicoObjInFilter(elt);
                    if (dicoObj)
                        param.dicoObjArr=[dicoObj];                    
                } 
                break;
            }
        case "addFilter":
        {         
            if (isMultiTableCellInSameTable(elts)) 
            {
                var dicoObj;
                param.dicoObjArr=[];
                for (var i=0; i<elts.length; i++)
                {
                    dicoObj=addDicoObjInFilter(elts[i]);
                    if (dicoObj)
                    {
                        param.dicoObjArr[param.dicoObjArr.length]=dicoObj; 
                }
                }
                if (param.dicoObjArr.length==0)
                {
                    param.dicoObjArr=null;
                }
            }
            else
            if (isCellInSection(elt))
            {
                var dicoObj=addDicoObjInFilter(elt);
                if (dicoObj)
                    param.dicoObjArr=[dicoObj];    
            }
            break;
        }
        case "editFilter":
        {
            if (hasFilter.hasFilter)
                {      
                    param.Uuid=elt.id;           
                }
            break;
        }        
        } 
    }
    return param; 
}
function tableCellHasSeveralFilters(elt)
{
    var b=false;
    var hasFilter=reportCellHasFilter(elt);
    if (hasFilter.parent)
    {               
        b=(hasFilter.hasFilter>1)?true:false;
    }
    return b;
}
function doRemoveFilter() 
{   
    var elts=getSelectedElts();
    var elt= elts[0];
    var bid=elt.bid;
    var id=null;
    if (elt.className=="body")
    {
        bid=elt.parent.bid; 
    }
    else
    if (elt.className=="reportCell")
    {
        id=elt.id;
        var hasFilter=reportCellHasFilter(elt); 
        if (hasFilter.parent)
        {
            bid=hasFilter.parent.bid;
        }       
        else
        {
            return;
        }
    }
var url =  _root + "processRemoveReportFilters" + _appExt +urlParamsNoBID()
url += "&tabId=" + bid
url += "&sRefreshRMNode=yes"
if (id)
{
    url+="&sOid="+encodeURIComponent([id].toJSON());
}
frameNav("Report", url)
}
function handleRemoveFilter()
{
    var elts=getSelectedElts();
    var elt= elts[0];
    var name='';
    if (elt.className=="reportCell")
    {
        var b=tableCellHasSeveralFilters(elt);
        if (b)
        {
            frameNav("DlgFrame", "language/"+_lang+"/html/filterDlg.html"+"?actionId="+"removeFilter"); 
            return;
        }
        name=getObjectNameByItsId(elt.id);
    }
    else
    if (elt.className=="block")
    {    
        if (elt.name)
            name=elt.name;
        else
            name="Block"
    }
    else
    if (elt.className=="section")
    {
        name="Section"
    }
    else
    if (elt.className=="body")
    {
        name="Report"
    }
    else
    {
        return;
    }
    showPromptDialog('Are you sure you want to delete'+' '+name+' '+'Filter'+' ?'  , "Web Intelligence", _promptDlgWarning, doRemoveFilter);        
}
function doRemoveFilterInLeftPane()
{
    var action=_currWorkbench.getAction("dsRemoveFilter");    
    if (!action || !action.userData) return;
    var filterInfo=action.userData;
    if (!filterInfo.blockBid) return;
var lPane = workbenchW.getPerspective().getLeftPane().getFrame();
var form = lPane.document.processForm
if (!form) return;
var url =  _root + "processRemoveReportFilters" + _appExt +urlParamsNoBID();
url += "&tabId=" + filterInfo.blockBid;
if (filterInfo.Uuid)
{
    url+="&sOid="+[filterInfo.Uuid].toJSON();
url+="&sOperator="+filterInfo.operator;
form.sOperands.value = [filterInfo.values].toJSON();
}
    else
    if (filterInfo.idArr)
    {
        url+="&sOid="+filterInfo.idArr.toJSON();
    }
form.action = url;
form.submit();    
}
function  handleRemoveFilterInDocStructLeftPane()
{
    var removeAction=_currWorkbench.getAction("dsRemoveFilter");
    var filterInfo=removeAction.userData;
    var name='';
    if (filterInfo)
    {
        if (filterInfo.Uuid)
        {
            name=getObjectNameByItsId(filterInfo.Uuid);
        }
        else
        if (filterInfo.idArr)
        {
            var len=filterInfo.idArr.length;
            for (var i=0; i<len; i++)
            {
                name+=getObjectNameByItsId(filterInfo.idArr[i]);
                if (i<len-1)
                {
                    name+=", "
                }            
            }        
        }    
    }
    showPromptDialog("Are you sure you want to delete"+' "'+name+'" '+'Filter'+' ?' , "Web Intelligence", _promptDlgWarning, doRemoveFilterInLeftPane);        
}
function getItemInfoFromFilterMap()
{
    var itemInfo=null;
    var showAction=_currWorkbench.getAction("showElement");
    if (showAction && showAction.userData)
    {                    
        var userData=showAction.userData;
        if (userData.bid && userData.className)
        {
            itemInfo=userData;                        
        }
    }
    return itemInfo;                    
}
function initShowHideMenu()
{
    var elts=getSelectedElts();
if (elts.length==0 || elts.length>1) return
    var e= elts[0];   
var rows = e.parent.rows
var columns = e.parent.columns
var blockType = e.parent.parent.blockType
if (e.className == 'reportCell')
{
var tCell = isTableCell(e)
workbenchW.getAction("hideColumn").setDisplay(true && !isMeasureKind(e))
workbenchW.getAction("hideElement").setDisplay(!tCell)
workbenchW.getAction("showElement").setDisplay(!tCell)
workbenchW.getAction("hideElementWhen").setDisplay(!tCell)
workbenchW.getAction("hideElementWhenEmpty").setDisplay(!tCell)
workbenchW.getAction("hideColumn").setDisabled(e.formula == "")
if (!tCell)
{
workbenchW.getAction("hideElementWhenEmpty").check(!e.showWhenEmpty)
}
}
else if (isBlock(e) || isSectionFn(e))
{
workbenchW.getAction("hideColumn").setDisplay(false)
workbenchW.getAction("showElement").setDisplay(true)
workbenchW.getAction("hideElement").setDisplay(true)
workbenchW.getAction("hideElementWhen").setDisplay(true)
workbenchW.getAction("hideElementWhenEmpty").setDisplay(true)
workbenchW.getAction("hideElementWhenEmpty").check(!e.showWhenEmpty)
}
}
function handleShowHide(actionId)
{
    var elts=getSelectedElts();
    var elt= elts[0];   
    var bOk=false;   
    var bid=elt.bid;
    var hideAction;         
    switch (actionId)
    {
        case "hideColumn":
        {                              
            if (isTableCell(elt))
            {                          
            hideAction="hideCol";                                             
           bOk=true;            
            }
            break;
        }    
        case "showHiddenColumns":
        {                     
            var block=null;
            if (isBlock(elt))
            {
                block=elt;   
            }
            else
            {
                block=getBlockFromTableCell(elt);
            }
            if (block)
            {                
            bid=block.bid;
            hideAction="showAllCol";                                             
            bOk=true;            
            }
            break;
        }    
        case "showAllHiddenContent":           
            if (isSectionFn(elt) || elt.className=="body")
            {                
                hideAction="showAllKids";
                bOk=true;
            }
            break;
        case "hideElementWhenEmpty":
        {
            if (isSectionFn(elt) || isBlock(elt) || isFreeCell(elt) || isCellInSection(elt))
            {                
                hideAction="hideEmpty";
                bOk=true;            
            }
            else
            if (isTableCell(elt))    
            {
                var block =getBlockFromTableCell(elt);    
                if (block)
                {
                    bid=block.bid;
                    hideAction="hideEmpty";
                    bOk=true;
                }               
            }
            else          
            if (elt.className=="body")
            {
                var itemInfo=getItemInfoFromFilterMap();
                if (!itemInfo) return;
                bid= itemInfo.bid; 
                hideAction="hideEmpty";
                bOk=true;   
            }
            break;            
        }
        case "showElement":       
        {    
            if (isSectionFn(elt) || isBlock(elt) || isFreeCell(elt) || isCellInSection(elt))
            {}
            else
            if (isTableCell(elt))         
            {
                var block =getBlockFromTableCell(elt);    
                if (block)
                {
                    bid=block.bid;
                }            
            }
            else
            if (elt.className=="body")
            {
                var itemInfo=getItemInfoFromFilterMap();
                if (!itemInfo) return;
                bid= itemInfo.bid;                              
            }
            hideAction="show";
            bOk=true;
            break;           
        }            
        case "hideElement":
        {    
            if (isTableCell(elt))         
            {
                var block =getBlockFromTableCell(elt);    
                if (block)
                {
                    bid=block.bid;
                }
            }
            hideAction="hide";
            bOk=true;
            break;           
        }  
        case "hideElementWhen":          
        {        
            if (isTableCell(elt))         
            {
                var block =getBlockFromTableCell(elt);    
                if (block)
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html");  
                }            
            }
            else
            if (isSectionFn(elt))
            {
                wt();
                frameNav("DlgFrame", "language/"+_lang+"/html/formatSectionDlg.html");
            } 
            else
            if (isBlock(elt))
            {
                if (!isGraph(elt))
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html");
                }
                else
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/applyFormatChartDialog.html");
                }
            }
            else
            if (isCellInSection(elt) || isFreeCell(elt))
            {
                wt();
                frameNav("DlgFrame", "language/"+_lang+"/html/formatCellDlg.html");
            }            
            else
            if (elt.className=="body")
            {
                var itemInfo=getItemInfoFromFilterMap();
                if (!itemInfo) return;
                if (itemInfo.className=="block")
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/formatTableDlg.html");  
                }
                else
                if (itemInfo.className=="section")
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/formatSectionDlg.html");
                } 
                else
                if (itemInfo.className=="reportCell")
                {
                    wt();
                    frameNav("DlgFrame", "language/"+_lang+"/html/formatCellDlg.html?bid="+itemInfo.bid);
                }                    
            }
            return;
            break;
        }
    }   
    if (bOk)
    {
        var url =  _root + "processShowHide" + _appExt +urlParamsNoBID();
        url +=  "&bid=" + bid+"&hideAction="+hideAction;
        frameNav("Report", url);
    }     
}
function getHideMenuItemInToolbox(actionId1, actionId2)
{
    var hideIconMenu=_currWorkbench.getAction(actionId1);    
    if (!hideIconMenu) return null;
    var hideMenu= hideIconMenu.getMenu(); 
    if (!hideMenu) return null;
    var showHiddenMenuItem=hideMenu.getItemByActionId(actionId2);
    return showHiddenMenuItem;
}
function beforeShowShowHideMenuItemInToolbox(hideMenuId, actionId1, actionId2, isHide)
{
    var hideMenuItem=getHideMenuItemInToolbox(hideMenuId, actionId1);
    var showMenuItem=getHideMenuItemInToolbox(hideMenuId, actionId2);
    isHide=isHide?isHide:false
    if (hideMenuItem)
    {
        hideMenuItem.setDisplay(!isHide);
    }
    if (showMenuItem)
    {
        showMenuItem.setDisplay(isHide);
    }
}
function beforeShowSectionHideMenuInToolbox()
{     
    var elts=getSelectedElts();
    var elt= elts[0];    
    if (!isSectionFn(elt)) return;              
    var showHiddenMenuItem=getHideMenuItemInToolbox("sectionHideMenu", "showAllHiddenContent");    
    if (showHiddenMenuItem)     
    {
        showHiddenMenuItem.setDisabled(elt.hidden?false:true);
    }    
    beforeShowShowHideMenuItemInToolbox("sectionHideMenu", "hideElement", "showElement", elt.isHide);          
}
function beforeShowBlockHideMenuInToolbox()
{  
    var elts=getSelectedElts();
    var elt= elts[0];   
    var block=null;
    var showCol=true;
    if (isBlock(elt))
    {
        block=elt;
        showCol=false;   
beforeShowShowHideMenuItemInToolbox("hideMenu", "hideElement", "showElement", block.isHide);             
    }
    else         
    {
        block = getBlockFromTableCell(elt);                              
    }
    if (!block) return;         
    var showHiddenMenuItem=getHideMenuItemInToolbox("hideMenu", "showHiddenColumns");
    if (showHiddenMenuItem)                      
        showHiddenMenuItem.setDisabled(block.hidden?false:true); 
    var showColMenuItem=getHideMenuItemInToolbox("hideMenu", "hideColumn");  
    if (showColMenuItem)
    {
        showColMenuItem.setDisplay(showCol);
        if (showCol)
        {   
            showColMenuItem.setDisabled((elt.aggregateFct && elt.aggregateFct!="")?true:false);                                
        }            
    }                             
}
function beforeShowFreeCellHideMenuInToolbox()
{
    var elts=getSelectedElts();
    var elt= elts[0];   
    beforeShowShowHideMenuItemInToolbox("simpleHideMenu", "hideElement", "showElement", elt.isHide);   
}
function getObjectNameByItsId(id)
{        
    if (!_dictionaryStructure || !id) return '';
    var flatDico=_dictionaryStructure.flatDico;
    for (var i=0; i<flatDico.length; i++)
    {
        if (flatDico[i].id==id)
        {
            return flatDico[i].name;    
        }
    }
    return '';
}
function isMLDocument()
{
return DS.isLocalizedDoc;
}
function getMLDocumentName(name)
{
var docName=(name==null?DS.strDocName:name);
if(isMLDocument() && DS.localizedDocName!=null && DS.localizedDocName!="")
{
docName = DS.localizedDocName;
}
if(docName==null || docName=="") 
docName=_defaultDocName;
return docName;
}
function getMLDocumentDescription(desc)
{
var docDesc=desc;
if(isMLDocument() && DS.localizedDocDescription!=null && DS.localizedDocDescription!="")
{
docDesc = DS.localizedDocDescription;
}
if(docDesc==null) 
docDesc="";
return docDesc;
}
function getInstancesNameList(bid) {
var nameList = [];
for (var j=0; j < _instanceIds.length; j++) 
{
if(nameList.indexOf(_instanceIds[j].v)<0)
nameList.push(_instanceIds[j].v);
}
return nameList
}
function setCustomGrouping_ContextualMenu(m,elts)
{
var disMenuItem=m.getItemByActionId("customGroup");
if (disMenuItem && disMenuItem.sub && elts && elts.length > 0)
{
setCustomGroupingSubMenu(disMenuItem.sub,disMenuItem,elts[0]);
}
}
function setCustomGrouping()
{
var elts = getSelectedElts();
var groupingBtn = workbenchW.getAction("groupingBtn");
var len = elts?elts.length:0;
var dis=(len!=1 || !isTableCell(elts[0]));
var menuGroup = groupingBtn.items[0].getMenu();
if(dis)
groupingBtn.setDisabled(dis);
else
{
if(_dictionaryAjaxProcessing)
setTimeout("setCustomGrouping()",100);
else
setCustomGroupingSubMenu(menuGroup,groupingBtn,elts[0])
}
}
function setCustomGroupingSubMenu(menuGroup,actionWidget,elt)
{
var groupM = menuGroup.getItemByActionId("groupValues");
var ungroupM = menuGroup.getItemByActionId("ungroup");
var moveToM = menuGroup.getItemByActionId("moveToGroup");
var renameM = menuGroup.getItemByActionId("renameGroup");
var ungroupValuesM = menuGroup.getItemByActionId("ungroupValues");
var textSelections = getInstancesNameList(elt.bid);
var isMultiInstances=(textSelections.length>1);
var jsObj=getDictionaryObjectFromId(elt.id); 
var canBeGrouped = (jsObj!=null && (jsObj.kind == _dim || jsObj.kind == _linkDim || jsObj.kind == _dtl || jsObj.kind == _lvl)); 
var isGroup=false;
var isSelectionContainsGroupLov = false;
var isSelectionContainsOtherGroup = false;
if(jsObj!=null && jsObj.isCustomGroup)
{
isGroup=true;
setMoveToGroupMenu(moveToM,jsObj.groupLov,elt);
isSelectionContainsGroupLov = doesSelectionContainsGroupLov(jsObj.groupLov,elt);
isSelectionContainsOtherGroup = doesSelectionContainsThisGroup(jsObj.groupOtherName,elt);
}
groupM.setDisabled(!isMultiInstances || isSelectionContainsOtherGroup);
ungroupM.setDisabled(!isSelectionContainsGroupLov || isSelectionContainsOtherGroup);
moveToM.setDisabled(!isGroup);
renameM.setDisabled((!isSelectionContainsGroupLov && !isSelectionContainsOtherGroup) || isMultiInstances );
ungroupValuesM.setDisabled(!isGroup);
if(jsObj!=null && jsObj.isCustomGroup)
{
var otherSub = ungroupValuesM.sub
var index=jsObj.groupOtherState; 
otherSub.getItem(0).check(index==0);
otherSub.getItem(1).check(index==2);
}
actionWidget.setDisabled(!canBeGrouped);
}
function setMoveToGroupMenu(m,groupLov,elt)
{
moveToSub = m.sub
if (null == moveToSub) {
moveToSub = new_MenuWidget({id:"moveToGroupSub"})
m.attachSubMenu(moveToSub);
}
var len = moveToSub.items.length;
var lenLov = groupLov.length;
if(len<lenLov)
{
for(var i=len;i<lenLov;i++)
{
moveToSub.add("moveToGroup"+i,"",customGrouping_moveToGroupCB);
}
}
else if(len>lenLov)
{
for(var i=lenLov;i<len;i++)
{
moveToSub.getItem(i).show(false);
}
}
groupLov.sort(function(v1,v2){ return ((v1.toLowerCase()<v2.toLowerCase())?-1:1)}); 
for(var i=0;i<lenLov;i++)
{
moveToSub.getItem(i).show(true);
moveToSub.getItem(i).setText(groupLov[i]);
moveToSub.getItem(i).setDisabled(doesSelectionContainsThisGroup(groupLov[i],elt));
}
}
function doesSelectionContainsGroupLov(groupLov,elt)
{
if(elt)
{
var bid=elt.bid;
var textSelections = getInstancesNameList(bid);
for(var i=0;i<textSelections.length;i++)
{
for(var j=0;j<groupLov.length;j++)
{
if(textSelections[i]==groupLov[j])
return true;
}
}
}
return false;
}
function doesSelectionContainsThisGroup(otherName,elt)
{
if(otherName!=null && elt!=null)
{
var bid=elt.bid;
var textSelections = getInstancesNameList(bid);
for(var i=0;i<textSelections.length;i++)
{
if(textSelections[i]==otherName)
return true;
}
}
return false;
}
function customGrouping_moveToGroupCB(bConfirm, groupName)
{
var name = groupName?groupName:this.text;
var elts=getSelectedElts(),elt=elts[0];
var jsObj=getDictionaryObjectFromId(elt.id); 
if(jsObj!=null && jsObj.isCustomGroup && !bConfirm)
{
if(doesSelectionContainsGroupLov(jsObj.groupLov,elt))
{
frameNav("DlgFrame","language/"+_lang+"/html/customGroupingMoveDialog.html?groupName="+encodeURIComponent(name));
return;
}
}
 var customGroupingProps={groups:[]};
 customGroupingProps.varId = elt.id;
 var arr = getInstancesNameList(elt.bid);
 customGroupingProps.groups.push(            
      {
      groupName: name,                   
      valuesList: arr
              }
 )
self.document.viewerForm.action="processCustomGrouping"+_appExt+urlParams(true);
self.document.viewerForm.target="Report"
self.document.viewerForm.sParam1.value=Object.toJSON(customGroupingProps);
eventManager.notify(_EVT_VARS_UPDATE,{customGrouping:true,varId:elt.id})
wt();
self.document.viewerForm.submit();          
}
function customGrouping_moveToGroupConfirmation(groupName)
{
showPromptDialog("You are moving several groups to another group. The values in the selected groups will be ungrouped and added to the destination group."+groupName,"Move to Group",1,"customGrouping_moveToGroupCB(true,'"+groupName+"')");
}
